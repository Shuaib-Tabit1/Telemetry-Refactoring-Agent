{
  "execution_summary": {
    "total_stages": 9,
    "completed": 8,
    "failed": 1,
    "cache_hits": 0,
    "total_execution_time": 274.3524000644684
  },
  "stage_details": {
    "ticket_processing": {
      "stage_name": "ticket_processing",
      "status": "StageStatus.COMPLETED",
      "result": "## OpenTelemetry Span Attributes Missing - HTTP Redirect Tracking\n\n**Summary:** Add missing HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to CLM web application spans\n\n**Problem Description:**\nOur OpenTelemetry spans in the CLM (Contract Lifecycle Management) web application are missing critical HTTP attributes needed for debugging redirect flows and investigating user journey issues. Specifically:\n\n1. **Missing Attribute**: `HTTP_REFERER` - The referring page URL that led to the current request\n2. **Missing Attribute**: `HTTP_RESPONSE_REDIRECT_LOCATION` - The destination URL when a 302/redirect response occurs\n\n**Business Impact:**\n- Cannot trace user navigation flows through CLM application\n- Difficult to investigate redirect-related issues and errors\n- Missing context for 302 responses that redirect to error pages\n\n**Technical Details:**\n\n**Target Application:** CLM Web Application (clm-web)\n**Environment:** Demo (but affects all environments)\n**Specific Pages Affected:**\n- `/clm/Documents/BrowseDocuments.aspx`\n- `/clm/SSO/SSOEndpoint.ashx` \n- Any page that handles redirects (HTTP 302 responses)\n\n**Expected Kusto Query Results:**\nAfter fix, this query should show the missing attributes:\n```kusto\nOtlpSpanEvents\n| where Environment == \"Demo\"\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\n| where http_status_code > 200\n| project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\n```\n\n**Implementation Requirements:**\n\n1. **Add HTTP_REFERER attribute** to all incoming HTTP requests\n   - Source: `Request.Headers[\"Referer\"]` or `HttpContext.Request.Headers.Referer`\n   - Add to span as: `activity.SetTag(\"HTTP_REFERER\", refererValue)`\n\n2. **Add HTTP_RESPONSE_REDIRECT_LOCATION attribute** for redirect responses\n   - Source: `Response.Headers[\"Location\"]` when status code is 301/302/303/307/308\n   - Add to span as: `activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue)`\n\n**Files to Look For:**\n- CLM web application middleware or request handling code\n- ASP.NET request pipeline components\n- OpenTelemetry instrumentation configuration\n- Files containing \"ActivitySource\", \"SetTag\", or \"AddTag\" method calls\n- Middleware files that handle HTTP requests/responses\n- Look for existing telemetry code in CLM-related projects\n\n**Acceptance Criteria:**\n- [ ] HTTP_REFERER attribute captured from incoming request headers\n- [ ] HTTP_RESPONSE_REDIRECT_LOCATION attribute captured for 302+ responses  \n- [ ] Attributes visible in OtlpSpanEvents Kusto table\n- [ ] No performance degradation from additional attribute collection\n- [ ] Proper null/empty value handling for missing headers\n\n**Technical Notes:**\n- Follow existing OpenTelemetry patterns in the codebase\n- Ensure attribute names match exactly: \"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\"\n- Add attributes to HTTP request spans, not separate spans\n- Handle edge cases where headers might be missing or empty\n",
      "error": null,
      "execution_time": 0.0004749298095703125,
      "cache_hit": false
    },
    "intent_extraction": {
      "stage_name": "intent_extraction",
      "status": "StageStatus.COMPLETED",
      "result": {
        "issue_category": "INSTRUMENTATION",
        "static_analysis_query": {
          "find_method_call": "SetTag"
        },
        "semantic_description": "Add missing HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION tags to existing HTTP request spans in the CLM web app.",
        "search_keywords": [
          "HTTP_REFERER",
          "HTTP_RESPONSE_REDIRECT_LOCATION",
          "SetTag",
          "ActivitySource",
          "AddTag"
        ],
        "telemetry_operation": {
          "type": "span",
          "target_name": "incoming_http_request_span",
          "action": "ADD_ATTRIBUTES",
          "attributes_to_add": [
            {
              "name": "HTTP_REFERER",
              "value_source": "Request.Headers[\"Referer\"]"
            },
            {
              "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
              "value_source": "Response.Headers[\"Location\"]"
            }
          ],
          "new_span_name": null,
          "new_metric_details": {}
        },
        "confidence": "IntentConfidence.HIGH",
        "operation_type": "OperationType.MULTI_FILE",
        "complexity_score": 4,
        "estimated_files": 3,
        "validation_result": {
          "is_valid": true,
          "confidence": "IntentConfidence.HIGH",
          "issues": [],
          "suggestions": []
        },
        "sub_tasks": [
          {
            "order": 1,
            "action": "locate_configuration",
            "description": "Identify where the CLM web application registers OpenTelemetry and/or custom ActivitySource enrichment. Search for files containing \"AddOpenTelemetry\", \"ActivitySource\", \"SetTag\", or custom middleware in the solution root.",
            "expected_files": [
              "Startup.cs",
              "Program.cs",
              "OpenTelemetryExtensions.cs",
              "TelemetryMiddleware.cs"
            ],
            "validation_criteria": "One central location is confirmed where HTTP request Activities are created or enriched."
          },
          {
            "order": 2,
            "action": "design_solution",
            "description": "Decide whether to (a) extend an existing enrichment callback or (b) insert a small custom middleware placed immediately after the ASP.NET Core routing middleware so both Request & Response objects are available before the Activity ends.",
            "expected_files": [],
            "validation_criteria": "The selected design will give access to both Request.Headers and Response.Headers before Activity.Stop is called."
          },
          {
            "order": 3,
            "action": "implement_changes",
            "dependencies": [
              1,
              2
            ],
            "description": "Implement code that: 1) reads Request.Headers[\"Referer\"] and sets activity.SetTag(\"HTTP_REFERER\", value) if not null/empty; 2) after await _next(context) reads Response.StatusCode and Response.Headers[\"Location\"] and, if the status code is 301/302/303/307/308 and header present, sets activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", value).",
            "expected_files": [
              "TelemetryMiddleware.cs (modified or new)",
              "OpenTelemetryExtensions.cs (modified)"
            ],
            "validation_criteria": "No duplicate tags; null or empty values are ignored; build succeeds."
          },
          {
            "order": 4,
            "action": "unit_and_integration_tests",
            "dependencies": [
              3
            ],
            "description": "Add or update tests that simulate: a) normal 200 request without Referer; b) normal 200 request with Referer; c) 302 redirect response with Location header. Verify tags exist or are omitted correctly using ActivityListener in tests.",
            "expected_files": [
              "TelemetryMiddlewareTests.cs"
            ],
            "validation_criteria": "All new tests pass in CI pipeline."
          },
          {
            "order": 5,
            "action": "local_validation",
            "dependencies": [
              3
            ],
            "description": "Run the CLM site locally with OTLP exporter pointed to dev collector. Hit /clm/Documents/BrowseDocuments.aspx and an endpoint that issues a redirect. Inspect exported spans with the OpenTelemetry Collector or Jaeger UI to confirm tags appear.",
            "expected_files": [],
            "validation_criteria": "\"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\" appear on the root HTTP spans."
          },
          {
            "order": 6,
            "action": "performance_check",
            "dependencies": [
              5
            ],
            "description": "Run a simple load-test (e.g., k6) for 1\u20132 minutes. Compare request latency and memory allocations to previous baseline to ensure no regression (>5 %).",
            "expected_files": [],
            "validation_criteria": "p95 latency delta < 5 %, GC collections unchanged."
          },
          {
            "order": 7,
            "action": "code_review_pr",
            "dependencies": [
              3,
              4
            ],
            "description": "Open a PR, tag telemetry and performance reviewers. Include screenshots of span inspection and test results.",
            "expected_files": [
              "pull_request.md"
            ],
            "validation_criteria": "PR approved by at least two reviewers."
          },
          {
            "order": 8,
            "action": "deploy_to_demo",
            "dependencies": [
              7
            ],
            "description": "Merge PR and trigger CI/CD to deploy to Demo environment. Enable feature flag or configuration toggle if applicable.",
            "expected_files": [],
            "validation_criteria": "Deployment pipeline green; Demo site healthy."
          },
          {
            "order": 9,
            "action": "post_deploy_validation",
            "dependencies": [
              8
            ],
            "description": "Run the provided Kusto query in Demo:\nOtlpSpanEvents | where Environment == \"Demo\" | where url_path == \"/clm/Documents/BrowseDocuments.aspx\" | where http_status_code > 200 | project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION",
            "expected_files": [],
            "validation_criteria": "Rows include non-null HTTP_REFERER or HTTP_RESPONSE_REDIRECT_LOCATION as expected."
          },
          {
            "order": 10,
            "action": "promote_to_all_envs",
            "dependencies": [
              9
            ],
            "description": "After 24 hours of stable Demo monitoring, promote the change to Test and Prod via standard release pipelines.",
            "expected_files": [],
            "validation_criteria": "Spans in Prod contain both attributes; no increase in error rate or latency."
          }
        ],
        "contextual_hints": [
          "Finding or adding the single middleware layer where both Request and Response are simultaneously accessible so tags can be set once per span",
          "Guaranteeing the attributes are added only to the root HTTP span (avoiding duplication in child spans or background activities)",
          "Reproducing and validating real 302/redirect flows in local or lower environments to confirm Location header is set before the span ends"
        ],
        "similar_patterns": [
          "ASP.NET request enrichment",
          "OpenTelemetry span attribute enrichment"
        ]
      },
      "error": null,
      "execution_time": 28.331743001937866,
      "cache_hit": false
    },
    "project_parsing": {
      "stage_name": "project_parsing",
      "status": "StageStatus.COMPLETED",
      "result": [
        "/Users/shuaib.tabit/Documents/Atlas/src/ActIntegration\\ActIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdminService\\AdminService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService\\AdvancedInsightsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService.IntegrationTests\\AdvancedInsightsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AgreementDefinitionModel\\AdmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP\\API.ABAC.PDP.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation.IntegrationTests/API.Allocation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/API.Allocation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication\\API.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Common\\API.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content\\API.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content.EndToEndTests\\API.Content.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.Common\\API.DocuSignInternal.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.IntegrationTests\\API.DocuSignInternal.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal\\API.DocuSignInternal.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper.IntegrationTests/API.GateKeeper.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper\\API.GateKeeper.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch.EndToEndTests\\API.OpenSearch.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch\\API.OpenSearch.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning.IntegrationTests/API.Provisioning.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning\\API.Provisioning.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.SfGenAPI\\API.SfGenAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI\\API.WebAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities\\API.WorkflowActivities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.IntegrationTests\\API.WorkflowActivities.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.Client/API.WorkflowActivities.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign\\API.WorkflowDesign.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign.IntegrationTests\\API.WorkflowDesign.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities\\Atlas.Workflow.Activities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Client\\Atlas.Workflow.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Readers\\Atlas.Workflow.Readers.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService\\AtlasDataManipulationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService.IntegrationTests\\AtlasDataManipulationService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication\\AuthenticationApplication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication.IntegrationTests\\AuthenticationApplication.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService\\AuthMaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService.IntegrationTests\\AuthMaintenanceService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Automation.Toolkit.Tests\\Automation.Toolkit.Tests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ChatNotification\\ChatNotification.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CodeRunner\\CodeRunner.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Core\\Collaboration.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Infrastructure\\Collaboration.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ConnectServiceIntegration\\ConnectServiceIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain.Testing\\Core.Domain.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain\\Core.Domain.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework\\Core.ServiceFramework.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework.Testing\\Core.ServiceFramework.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types\\Core.Types.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules\\CustomRules.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService\\CustomRuleService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService.IntegrationTests\\CustomRuleService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService\\DetectTypeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService.IntegrationTests\\DetectTypeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService\\DocToPDFService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService.IntegrationTests\\DocToPDFService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentAssembly\\DocumentAssembly.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService\\DocumentCompareService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService.IntegrationTests\\DocumentCompareService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation\\DocumentCreation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation.IntegrationTests\\DocumentCreation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticCore\\ElasticCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticIndexing\\ElasticIndexing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElectronicSignature\\ElectronicSignature.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService\\ESignatureService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService.IntegrationTests\\ESignatureService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ETL\\ETL.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService\\ExtractService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService.IntegrationTests\\ExtractService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Fax\\Fax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/FormGen\\FormGen.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor\\GenericEventProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor.IntegrationTests\\GenericEventProcessor.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GraphQLCore\\GraphQLCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/HtmlService\\HtmlService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InboundFax\\InboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InteractivePreviewCore\\InteractivePreviewCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MaintenanceService\\MaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MenuActions\\DocumentReviewMenuActions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService\\MessageWorkerService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService\\NewsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService.IntegrationTests\\NewsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ObligationManagementIntegration\\ObligationManagementIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI.IntegrationTests/OfficeWebAppsAPI.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI\\OfficeWebAppsAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OneConfig.Testing\\OneConfig.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\DacDocGenApiClient\\DacDocGenApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\Doc2PdfApiClient\\Doc2PdfApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OrchestrationIntegration\\OrchestrationIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail\\OutboundEmail.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail.IntegrationTests\\OutboundEmail.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent\\OutboundEvent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent.IntegrationTests\\OutboundEvent.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundFax\\OutboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundHttpService\\OutboundHttpService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Packaging\\Packaging.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/PdfService\\PdfService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProcessBuilder\\ProcessBuilder.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProfileLogger\\ProfileLogger.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Core\\ProxyLayer.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Infrastructure\\ProxyLayer.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService\\ReportingService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService.IntegrationTests\\ReportingService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Authentication\\REST.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Common\\REST.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Content\\REST.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices\\REST.WebServices.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/RtmIntegration\\RtmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SANitationService\\SANitationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Core\\SForce.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Services\\SForce.Services.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer\\SFTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer.IntegrationTests\\SFTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SharedTemplates\\SharedTemplates.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer\\SMTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer.IntegrationTests\\SMTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService\\StructuredDocumentService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService.IntegrationTests\\StructuredDocumentService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TaskProcessor\\TaskProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService\\TreeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService.IntegrationTests\\TreeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/UserTaskList\\UserTaskList.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback\\VendorCallback.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Testing\\Web.Common.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Abstractions/Web.Common.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Resources/Web.Common.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common\\Web.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Web.Common.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Abstractions\\Web.CommonUI.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Resources/Web.CommonUI.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI\\Web.CommonUI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.IntegrationTests\\Web.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Testing\\Web.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web\\Web.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet\\WebNet.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet.IntegrationTests\\WebNet.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebContent\\WebContent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebShare\\WebShare.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap\\WebSoap.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol\\WINS.Protocol.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS\\WINS.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CLM.Search\\dirs.proj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap.EndToEndTests\\WebSoap.EndToEndTests.csproj"
      ],
      "error": null,
      "execution_time": 0.0238802433013916,
      "cache_hit": false
    },
    "graph_building": {
      "stage_name": "graph_building",
      "status": "StageStatus.COMPLETED",
      "result": {
        "projects_count": 143,
        "graph_loaded": true
      },
      "error": null,
      "execution_time": 226.81552600860596,
      "cache_hit": false
    },
    "intelligent_search": {
      "stage_name": "intelligent_search",
      "status": "StageStatus.COMPLETED",
      "result": [
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "ActivitySource",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Pattern: Metrics",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)",
            "?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);",
            "?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "ActivitySource",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Pattern: Metrics",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)",
            "?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);",
            "?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "Logger.InfoNoPII(Task.LastErrorMessage);\n\t\t\t\t\tresult.TaskResult = TaskResult.Success;\n\t\t\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, mimeType);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics; Contains method call: SetTag (2 times); Matches 3 keywords: HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION, SetTag; Matches 3 keywords: HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION, SetTag",
          "matching_patterns": [
            "Import: OpenTelemetry.Trace",
            "Pattern: Instrumentation",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Pattern: UseOpenTelemetry",
            "Pattern: Metrics",
            "HTTP_RESPONSE_REDIRECT_LOCATION",
            "Import: DocuSign.CLM.Monitoring",
            "Pattern: Monitoring",
            "Import: OpenTelemetry.Metrics",
            "HTTP_REFERER",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "{\n\t\t\t\t\t\t\toptions.EnrichWithHttpResponse = (Activity activity, HttpResponse response) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tactivity.SetTag(OtelSemanticConventions.AttributeHttpResponseRedirectUrl, response?.Headers[\"Location\"]);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\toptions.EnrichWithHttpRequest = (Activity activity, HttpRequest request) =>\n\t\t\t\t\t\t\t{",
            "};\n\t\t\t\t\t\t\toptions.EnrichWithHttpRequest = (Activity activity, HttpRequest request) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tactivity.SetTag(OtelSemanticConventions.AttributeHttpReferer, request?.Headers[\"Referer\"]);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t.AddSource(typeof(RedisSessionStateProviderWrapper).FullName);"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (3 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "ActivitySource",
            "Import: var activity = StartActivity(task, corrToken)",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Import: DocuSign.Monitoring",
            "Import: DocuSign.CLM.Monitoring",
            "Pattern: StartActivity",
            "Pattern: Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "ActivityKind.Consumer,\n\t\t\t\t\tparentContext: correlationToken.ToActivityContext())\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);",
            "parentContext: correlationToken.ToActivityContext())\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);\n\t}",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);\n\t}\n}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (9 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid), Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid); Contains method call: SetTag (9 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "Import: var span = StartActivity()",
            "ActivitySource",
            "Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid)",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid)",
            "SetTag",
            "Pattern: OpenTelemetry",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "LastProcessDate = DateTime.UtcNow;\n\n\t\t\tusing var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid);\n\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\n            if (activity == null) throw new ApplicationException(string.Format(\"Cannot find expected activity {0} in workflow map for instanceUid {1}\", instanceActivity.ActivityTypeName, Uid));",
            "LastProcessDate = DateTime.UtcNow;\n\n\t\t\tusing var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid);\n\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\n            if (activity == null) return;",
            "private Activity StartActivity([CallerMemberName] string name = \"\") => ServiceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)",
            "?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)",
            ".SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);",
            ".SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);",
            ".SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\n\n\t\tprivate void CheckAndHandleInstanceStateChanges()",
            ".SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\n\n\t\tprivate void CheckAndHandleInstanceStateChanges()\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "private Activity? StartActivity([CallerMemberName] string name = \"\") => _serviceInstrumentation?.ActivitySource\n                ?.StartActivity($\"{nameof(WinsService)}.{name}\")\n                ?.SetStatus(ActivityStatusCode.Error)\n                ?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n}\n\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Trace, Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId); Contains method call: SetTag (54 times); Matches 2 keywords: SetTag, AddTag; Matches 2 keywords: SetTag, AddTag",
          "matching_patterns": [
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid)",
            "Pattern: AddTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)",
            "Import: OpenTelemetry.Trace",
            "Pattern: Instrumentation",
            "SetTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid)",
            "Pattern: StartActivity",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Pattern: OpenTelemetry",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)",
            "AddTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.StartParameters?.Submitter);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))\n\t\t{",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartRoutingApprovalWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t\treturn Task.FromResult(new SendStartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private void OnPostRequestHandlerExecute(object sender, EventArgs e)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\n\t\t\tLogSessionSize(HttpContext.Current?.Session);\n\t\t\t_performanceLog.SetSession(HttpContext.Current?.Session);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\n\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (1 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "Import: OpenTelemetry.Trace",
            "Import: var activity = StartActivity()",
            "ActivitySource",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Import: DocuSign.Monitoring",
            "Import: DocuSign.CLM.Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t\t?.SetStatus(ActivityStatusCode.Ok)",
            "Pattern: StartActivity",
            "Import: OpenTelemetry.Instrumentation.AspNet",
            "Import: OpenTelemetry.Context.Propagation",
            "Pattern: Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "private Activity StartActivity([CallerMemberName] string name = \"\") =>\n\t\t\tSessionStateProviderActivitySource\n\t\t\t\t.StartActivity($\"{nameof(RedisSessionStateProviderWrapper)}.{name}\")\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n\n\t\t#endregion\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorWindows.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "Import: var activity = StartActivity()",
            "ActivitySource",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Pattern: Metrics",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "{\n\t\t\tvar result = MimeLookup.GetMimeType(filePath);\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))",
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);",
            "?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n\n\tstatic class MimeLookup"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorCrossPlatform.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "Import: var activity = StartActivity()",
            "ActivitySource",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Pattern: Metrics",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "using var stream = File.OpenRead(filePath);\n\t\t\tvar result = MimeGuesser.GuessMimeType(stream);\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))",
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n}",
            "?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (5 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (5 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "Import: var activity = StartActivity()",
            "ActivitySource",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Pattern: Metrics",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity($\"{InstrumentationNames.MediaInfo}.{name}\")\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t\t?.SetMetricName(InstrumentationNames.MediaInfo);\n\n\t\tprivate Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>",
            "private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);",
            "private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}",
            "activity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}\n}",
            "?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}\n}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Extensions/Telemetry/ActivityExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "where T : IQueueTask\n\t\t=>\n\t\tactivity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);",
            "=>\n\t\tactivity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);",
            "activity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\n\n\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)",
            "?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\n\n\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)\n\t\twhere T : IQueueTask",
            "where T : IQueueTask\n\t\t=>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\n}\n#nullable restore",
            "=>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
          "matching_patterns": [
            "Pattern: Instrumentation",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Import: DocuSign.Monitoring",
            "Import: DocuSign.CLM.Monitoring.HttpModules",
            "Pattern: Activity.Current",
            "Pattern: Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tif (!string.IsNullOrEmpty(context.Request[Constants.QueryStringParameters.SAMLResponse]))"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (15 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes)), Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid); Contains method call: SetTag (15 times); Matches 2 keywords: SetTag, ActivitySource; Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "Import: var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Pattern: SetAttribute",
            "ActivitySource",
            "Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Pattern: Instrumentation",
            "Pattern: ActivitySource",
            "Pattern: OpenTelemetry",
            "SetTag",
            "Import: var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Import: var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Pattern: StartActivity",
            "Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes))",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "using var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();",
            "?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();\n\t\t\tvar statusMessages = new Messages();",
            "{\n\t\t\t\tattrvm = WebUtility.HtmlDecode(attrvm);\n\t\t\t\tvar attributes = attrvm.ToObject<AttributesViewModel>();\n\t\t\t\tsaveActivity?.SetTag(\"docusign.document.id\", attributes.docUid);\n\n\t\t\t\tvar document = LoadAndValidateDocument(attributes.docUid);",
            "using var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\tif (!HasSufficientRightsToView())",
            "using var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry",
            "using var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "using var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tFileUploadInfo fileUploadInfo = null;"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "public virtual void BeginRequest(HttpContext httpContext)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n\n\t\t\tif (httpContext.Handler is MvcHandler)\n\t\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "AttemptEventSource.Emit(counterInstanceName);\n\n#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif",
            "#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif\n\n\t\t\tStopwatch sw = Stopwatch.StartNew();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Controls/FormExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (10 occurrences); Contains method call: SetTag (10 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "{\n               tag.MergeAttribute(\"id\", id);\n           }\n           SetTagContent(tag, text);\n       }\n\n       private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)",
            "private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)\n       {\n           tag.MergeAttributes(attributes);\n           SetTagContent(tag, text);\n       }\n\n       private static void ConfigureAtlasImageTag(TTagBuilder tag, string spriteClassName, string additionalClassName)",
            "{\n           tag.ApplyHtmlAttributes(htmlAttributes);\n           tag.AddCssClass(\"LinkButton\");\n           SetTagContent(tag, string.IsNullOrWhiteSpace(text) ? WebCommonUI.Resources.Common.Close : text);\n           if (!tag.Attributes.ContainsKey(\"onclick\"))\n           {\n               tag.Attributes.Add(\"onclick\", \"CloseWindoid();return false;\");",
            "}\n           }, TTagRenderMode.SelfClosing);\n\n           SetTagContent(tag, imageHtml);\n       }\n\n       private static THtml BuildAtlasMetadataField(THtmlHelper html, string name, Enums.DataType fieldType, List<string> allowedValues, string value, CultureInfo culture)",
            "div.ApplyHtmlAttributes(htmlAttributes);\n           div.AddCssClass(\"atlasfield\");\n           div.Attributes.Add(\"id\", $\"{member.Member.Name}Field\");\n           SetTagContent(div, labelHtml, controlHtml);\n       }\n\n       private static void ConfigureFaUxFieldFor<TModel, TValue>(TTagBuilder div, Expression<Func<TModel, TValue>> expression, object htmlAttributes, THtml labelHtml, THtml controlHtml)",
            "t.AddCssClass(\"theme_primary-dark_background-color\");\n           });\n\n           SetTagContent(div, icon, controlHtml, labelHtml, spanLine);\n       }\n\n       private static TTagBuilder BuildLabel(string name, string displayName)",
            "var tag = new TTagBuilder(\"label\");\n           tag.Attributes[\"for\"] = name;\n           tag.AddCssClass(AtlasLabelName);\n           SetTagContent(tag, displayName);\n           return tag;\n       }",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, string content)\n       {\n#if NETFRAMEWORK\n           tag.SetInnerText(content);",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, THtml htmlContent)\n       {\n#if NETFRAMEWORK\n           tag.InnerHtml = htmlContent.ToHtmlString();",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, params THtml[] htmlContents)\n       {\n#if NETFRAMEWORK\n           using (var writer = new StringWriter())"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private static void OnPostRequestHandlerExecute(HttpContext context)\n\t{\n\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\tif (HasSession(context))\n\t\t{\n\t\t\tLogSessionSize(context.Session);"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowScopeEvents/WorkflowScopeEventsController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times); Matches 2 keywords: SetTag, ActivitySource",
          "matching_patterns": [
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowActivities/WorkflowActivitiesController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowDefinition/WorkflowDefinitionController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Contains method call: SetTag (4 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/OpenXmlExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "return sdtElement.SdtProperties.GetFirstChild<Tag>().Val.Value;\n        }\n\n        public static void SetTag(this SdtElement sdtElement, string tag)\n        {\n            if (sdtElement == null) return;\n            if (sdtElement.SdtProperties == null) sdtElement.SdtProperties = new SdtProperties();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (7 occurrences); Contains method call: SetTag (7 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "namespace ADEXS.Core.Domain.Utilities;\npublic static class ActivityEnricher\n{\n\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\n\t{\n\t\tif (activity == null)\n\t\t{",
            "{\n\t\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\n\t\t\treturn;\n\t\t}",
            "var account = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(account))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\n\t\t\treturn;\n\t\t}",
            "var userId = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(userId))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\n\t\t}\n\t}\n#else",
            "var session = context == null ? null : GetSession(context);\n\t\tif (!string.IsNullOrEmpty(session?.Id))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\n\t\t}\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/MergeType/RepeatingSectionMergeType.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "mergeType.Merge();\n                }\n\n                newSection.SetTag(string.Empty);\n            }\n\n            _sdtElement.Remove();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/Workflow/Client/WorkflowV1GrpcClient.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (54 times)",
          "matching_patterns": [
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString())",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)",
            "Pattern: ActivitySource",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\n\t\t\t\tactivityUid.ToString())",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid)",
            "Import: OpenTelemetry.Trace",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString())",
            "Pattern: Instrumentation",
            "SetTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "Import: DocuSign.CLM.Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)",
            "Import: DocuSign.Monitoring",
            "Pattern: StartActivity",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid)",
            "Pattern: OpenTelemetry",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid)",
            "Pattern: Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions"
          ],
          "context_snippets": [
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "headers: GetHeaders(request.User.AccountId),\n\t\t\t\t\t\t\t\tcancellationToken: cancellationToken)));\n\n\t\t\t\tactivity?.SetTag(\n\t\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\t\tresponse.Definition.Uid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.\n\t\tvar serviceClient = GetWinsServiceClient(user.AccountId, instanceUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "object? callbackData = null)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\n\t\t\t\tactivityUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\n\n\t\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\n\n\t\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid);",
            "int activityExecutionCount)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "private Activity? StartActivity([CallerMemberName] string name = \"\") => _instrumentation?.ActivitySource\n\t\t?.StartActivity($\"{nameof(WorkflowV1GrpcClient)}.{name}\", ActivityKind.Client)\n\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n\n\tprivate WinsService.WinsServiceClient GetWinsServiceClientByWorkItem(int accountId, Guid workItemUid)\n\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Import: OpenTelemetry.Metrics",
          "matching_patterns": [
            "Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Import: OpenTelemetry.Metrics",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Config file: program.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
          "matching_patterns": [
            "Import: ADEXS.Caching.OpenTelemetry.Extensions",
            "Import: ADEXS.CqlCorePersistence.OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry",
            "Import: OpenTelemetry.Exporter",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: ConfigureServices",
            "Config file: startup.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/ICoreInstrumentationLifetimeService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: TracerProvider",
            "Pattern: MeterProvider",
            "Config file: icoreinstrumentationlifetimeservice.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/CoreInstrumentationLifetimeService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: TracerProvider",
            "Pattern: MeterProvider",
            "Config file: coreinstrumentationlifetimeservice.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: Activity.Current",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [
            "exception = allError[allError.Length - 1];\n\t\t\t}\n\t\t\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\n\t\t\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\n\t\t\t_log.ErrorNoPII(message, exception);"
          ],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WINSManager.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: Monitoring = DocuSign.Monitoring, Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName), Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
          "matching_patterns": [
            "Import: Monitoring = DocuSign.Monitoring",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.LoadWorkItem(user, workItemUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.InfoNoPII(string.Format(\"SubmitWorkItem: WorkItemUid {0}, output {1}\", workItemUid, PII.Encode(output)))",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IVersionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, version.Uid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IRevisionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, revision.Uid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar result = new Legacy2Designer(new DefinitionReaderLegacy(oldDesign)).Convert(user)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tstring jwtToken = null",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(userAccount.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(userAccount.AccountId, sourceInstanceUid))\n\t\t\t{\n\t\t\t\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\n\t\t\t{\n\t\t\t\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar result = WINSClientLibrary.ExportWorkflowDefinition(user, workflowName, versionNumber, revisionNumber)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.VersionWorkflow(user, workflowName, sourceVersionNumber, sourceRevisionNumber, newVersionNumber, comment)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.VersionWorkflow(user, sourceVersionUid, sourceRevisionNumber, newVersionNumber, comment)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\n\t\t\t{\n\t\t\t\tbool isActivityExecutionLimitReached = Governor.IsActivityExecutionLimitReached(accountId, instanceUid, revisionUid, revisionCreatedDate, activityExecutionCount, out _)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\n\t\t\t\t{\n\t\t\t\t\tStartParameters startParameters = new StartParameters(user, xmlParam, sourceType, sourceId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\n\t\t\t\t{\n\t\t\t\t\tGuid result = WorkflowRepository.SendStartWorkflow(user, workflowName, sourceType, sourceId, xmlParam)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tGuid result = _StartWorkflow(user.AccountId, user.Uid, workflowName, xmlParam, sourceType, sourceId, instanceUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t{\n\t\t\t\t\tGuid result = _StartWorkflow(user.AccountId, revisionUid, startParameters, instanceUid)",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Controllers/WorkflowActivitiesController.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.Monitoring, Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid), Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
          "matching_patterns": [
            "Import: DocuSign.Monitoring",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope(\"AccountId: {AccountId}, UserAccountUid: {UserAccountUid}\", accountId, userAccountUid))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: StartActivity"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 90,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Config file: program.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 90,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Config file: program.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/AbstractServicedComponent.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: service invocation to start process,\n\t\t\t\t\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\n\t\t\t\t\t// using GetType().Assembly instead, which would provide correct release version.\n\t\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\t\tassembly: this.GetType().Assembly))\n\t\t\t\t\t\t\t.GetAwaiter().GetResult()",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: service invocation to start process,\n\t\t\t\t\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\n\t\t\t\t\t// using GetType().Assembly instead, which would provide correct release version.\n\t\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\t\tassembly: this.GetType().Assembly))\n\t\t\t\t\t\t\t.GetAwaiter().GetResult()",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Ems/EmsRestClient.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveDocumentIngestPayload),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveDocumentIngestPayload),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveCustomAttributeDefinition),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n                                                                nameof(FinalizeCustomAttributeDefinition),\n                                                                new ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\tnameof(UpdateDocumentIdOfAgreementDocument),\n\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/UnifiedRepository/UnifiedRepositoryIngestionService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document Permissions\")",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document Permissions\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessAttributes, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t{\n\t\t\tLog.InfoNoPII($\"Processing Document Attributes\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.AttributeSyncUsingIngestionService, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t{\n\t\t\tLog.InfoNoPII($\"Processing Document Attributes\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessHistory, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document History\")",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        }
      ],
      "error": null,
      "execution_time": 2.7959070205688477,
      "cache_hit": false
    },
    "advanced_analysis": {
      "stage_name": "advanced_analysis",
      "status": "StageStatus.COMPLETED",
      "result": {
        "impact_analysis": {
          "direct_impact": [
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Extensions/Telemetry/ActivityExtensions.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorCrossPlatform.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorWindows.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs"
          ],
          "indirect_impact": [
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/AtlasUrlHelper.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowContext.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/UserAccount.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/BaseApiHandlerSecure.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/DocumentRepository/DocumentReader.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasContext.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WebShare/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WINSManager.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/User/UserAccountRepository.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/NpsUtilities.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Helpers/InstanceStateChangedHelper.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Log.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/CommonWebUrl.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AjaxUrl.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/PropertyTypes/StringProperty.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/Helpers/ConfigurationHelper.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowWorkload.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/WebUrl.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/InstanceWorker.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web/Addressbook/MVC/Models/EntityDataSource.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowControlInstance.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/ExternalTaskWorker.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/Telemetry/WorkflowEventWorkload.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Persistence/Model/QueueStatePersistence.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/RequestHeaders/IPAddressUtil.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/Infrastructure/LoggingHelper.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/UploadFileHelper.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AuthUrl.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowManager.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/Workflow/WorkflowConversion.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.Content/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/Activities/Helpers/UpdateVariablesHelper.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/Models/WorkflowMap.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/AtlasWebUrl.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/Workflow/InstanceVariable.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Exceptions/WorkflowApiRequestThrottledException.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/PerformanceLog.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/Handlers/WorkflowXmlVariableHandler.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Workload.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/API.SfGenAPI/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/Handlers/WorkflowVariableHandler.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/REST.Content/Global.asax.cs",
            "/Users/shuaib.tabit/Documents/Atlas/src/REST.Authentication/Global.asax.cs"
          ],
          "risk_score": 10,
          "affected_patterns": [
            "ArchitecturalPattern.FACTORY",
            "ArchitecturalPattern.SINGLETON"
          ],
          "breaking_changes": [
            "Service registration changes may affect dependency injection"
          ],
          "test_requirements": [
            "Integration tests for telemetry data collection",
            "OpenTelemetry span validation tests",
            "Unit tests for modified methods",
            "Service registration validation tests",
            "Middleware pipeline integration tests"
          ]
        },
        "code_clusters": [
          {
            "name": "Cluster (2 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs"
              ]
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 2
          },
          {
            "name": "Cluster (4 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/NpsUtilities.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/AtlasUrlHelper.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/BaseApiHandlerSecure.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/NpsUtilities.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/AtlasUrlHelper.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/NpsUtilities.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/AtlasUrlHelper.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/BaseApiHandlerSecure.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs"
              ]
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 4
          },
          {
            "name": "Cluster (2 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/ExternalTaskWorker.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/ExternalTaskWorker.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/ExternalTaskWorker.cs"
              ]
            },
            "architectural_patterns": [
              "ArchitecturalPattern.FACTORY"
            ],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 2
          },
          {
            "name": "Cluster (2 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs"
              ]
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 2
          },
          {
            "name": "Cluster (2 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasContext.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasContext.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasContext.cs": []
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 2
          },
          {
            "name": "Cluster (10 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/InstanceWorker.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Helpers/InstanceStateChangedHelper.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowContext.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/UserAccount.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/PropertyTypes/StringProperty.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowControlInstance.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WINSManager.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowWorkload.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/User/UserAccountRepository.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/InstanceWorker.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Helpers/InstanceStateChangedHelper.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowContext.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/PropertyTypes/StringProperty.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/UserAccount.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/PropertyTypes/StringProperty.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowControlInstance.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WINSManager.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Helpers/InstanceStateChangedHelper.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowWorkload.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Helpers/InstanceStateChangedHelper.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/UserAccount.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowControlInstance.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities/PropertyTypes/StringProperty.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowWorkload.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/User/UserAccountRepository.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/User/UserAccountRepository.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/UserAccount.cs"
              ]
            },
            "architectural_patterns": [
              "ArchitecturalPattern.SINGLETON"
            ],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 10
          },
          {
            "name": "Cluster (2 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/Addressbook/MVC/Models/EntityDataSource.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web/Addressbook/MVC/Models/EntityDataSource.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/Addressbook/MVC/Models/EntityDataSource.cs": []
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 2
          },
          {
            "name": "Cluster (10 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Global.asax.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication/Global.asax.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback/Global.asax.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI/Global.asax.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/Helpers/ConfigurationHelper.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices/Global.asax.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WebShare/Global.asax.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP/Global.asax.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap/Global.asax.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/Helpers/ConfigurationHelper.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/Helpers/ConfigurationHelper.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/WebShare/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap/Global.asax.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs"
              ]
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/Helpers/ConfigurationHelper.cs"
            ],
            "test_coverage": 0.0,
            "complexity_score": 10
          },
          {
            "name": "Cluster (3 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/CommonWebUrl.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/WebUrl.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/CommonWebUrl.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/WebUrl.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/CommonWebUrl.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/Web/AtlasUrl/WebUrl.cs": []
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 3
          },
          {
            "name": "Cluster (2 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AjaxUrl.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AjaxUrl.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AjaxUrl.cs": []
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 2
          },
          {
            "name": "Service Layer",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Log.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Log.cs",
                "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs"
              ],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Log.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs": []
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 3
          },
          {
            "name": "Cluster (2 files)",
            "files": [
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/DocumentRepository/DocumentReader.cs",
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs"
            ],
            "relationships": {
              "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/DocumentRepository/DocumentReader.cs": [],
              "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs": [
                "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/DocumentRepository/DocumentReader.cs"
              ]
            },
            "architectural_patterns": [],
            "entry_points": [],
            "configuration_files": [],
            "test_coverage": 0.0,
            "complexity_score": 2
          }
        ]
      },
      "error": null,
      "execution_time": 0.005043983459472656,
      "cache_hit": false
    },
    "file_selection": {
      "stage_name": "file_selection",
      "status": "StageStatus.COMPLETED",
      "result": {
        "selected_files": [],
        "reasoning_chain": {
          "strategy": "ReasoningStrategy.CHAIN_OF_THOUGHT",
          "steps": [
            {
              "step_number": 1,
              "description": "1. Analysis",
              "reasoning": "1. Analysis\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nRequirement  ",
              "conclusion": "Requirement  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 2,
              "description": "\u2022 ASP.NET / ASP.NET-Core middleware or HttpModule / HttpApplication implementations that already start or enrich an Activity/Span.",
              "reasoning": "\u2022 ASP.NET / ASP.NET-Core middleware or HttpModule / HttpApplication implementations that already start or enrich an Activity/Span.  \n\u2022 Helper / extension classes that mutate Activity objects (e.g., \u201cActivityExtensions\u201d).  \n\u2022 Anything named \u201cLogAsyncRequestHttpMiddleware\u201d, \u201cScmLogAsyncRequestHttpMiddleware\u201d, \u201cProfileMiddleware\u201d, etc.",
              "conclusion": "\u2022 Anything named \u201cLogAsyncRequestHttpMiddleware\u201d, \u201cScmLogAsyncRequestHttpMiddleware\u201d, \u201cProfileMiddleware\u201d, etc.",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 3,
              "description": "2. Planning",
              "reasoning": "2. Planning\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nApproach  ",
              "conclusion": "Approach  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 4,
              "description": "3. Implementation Candidates",
              "reasoning": "3. Implementation Candidates\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nThe following files are the ones that (based on their names/locations) clearly wrap every request and interact with telemetry. These are the minimal set you need to touch to guarantee coverage of the CLM web app:",
              "conclusion": "The following files are the ones that (based on their names/locations) clearly wrap every request and interact with telemetry. These are the minimal set you need to touch to guarantee coverage of the CLM web app:",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 5,
              "description": "\u2022 Three sibling middleware implementations in different services that wrap incoming HTTP calls.",
              "reasoning": "   \u2022 Three sibling middleware implementations in different services that wrap incoming HTTP calls.\n\n8. /Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs  ",
              "conclusion": "8. /Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 6,
              "description": "4. Validation",
              "reasoning": "4. Validation\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2022 Unit tests / integration tests that simulate a request with a Referer header and assert the produced span contains HTTP_REFERER.  ",
              "conclusion": "\u2022 Unit tests / integration tests that simulate a request with a Referer header and assert the produced span contains HTTP_REFERER.  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            }
          ],
          "final_conclusion": "(Names and directory structure strongly imply these files hold request-level telemetry, though final confirmation would require inspecting code bodies.)",
          "overall_confidence": 0.8000000000000002,
          "alternative_approaches": [
            "Approach",
            "\u2022 Utility with extension methods for setting tags on Activity \u2013 will likely be reused for the new attributes.",
            "Alternative approaches considered"
          ]
        }
      },
      "error": null,
      "execution_time": 16.3796489238739,
      "cache_hit": false
    },
    "patch_generation": {
      "stage_name": "patch_generation",
      "status": "StageStatus.COMPLETED",
      "result": {
        "diff": "",
        "explanation": "No files selected for modification",
        "reasoning": {
          "strategy": "ReasoningStrategy.CHAIN_OF_THOUGHT",
          "steps": [
            {
              "step_number": 1,
              "description": "1. Analysis",
              "reasoning": "1. Analysis\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nRequirement  ",
              "conclusion": "Requirement  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 2,
              "description": "\u2022 ASP.NET / ASP.NET-Core middleware or HttpModule / HttpApplication implementations that already start or enrich an Activity/Span.",
              "reasoning": "\u2022 ASP.NET / ASP.NET-Core middleware or HttpModule / HttpApplication implementations that already start or enrich an Activity/Span.  \n\u2022 Helper / extension classes that mutate Activity objects (e.g., \u201cActivityExtensions\u201d).  \n\u2022 Anything named \u201cLogAsyncRequestHttpMiddleware\u201d, \u201cScmLogAsyncRequestHttpMiddleware\u201d, \u201cProfileMiddleware\u201d, etc.",
              "conclusion": "\u2022 Anything named \u201cLogAsyncRequestHttpMiddleware\u201d, \u201cScmLogAsyncRequestHttpMiddleware\u201d, \u201cProfileMiddleware\u201d, etc.",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 3,
              "description": "2. Planning",
              "reasoning": "2. Planning\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nApproach  ",
              "conclusion": "Approach  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 4,
              "description": "3. Implementation Candidates",
              "reasoning": "3. Implementation Candidates\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nThe following files are the ones that (based on their names/locations) clearly wrap every request and interact with telemetry. These are the minimal set you need to touch to guarantee coverage of the CLM web app:",
              "conclusion": "The following files are the ones that (based on their names/locations) clearly wrap every request and interact with telemetry. These are the minimal set you need to touch to guarantee coverage of the CLM web app:",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 5,
              "description": "\u2022 Three sibling middleware implementations in different services that wrap incoming HTTP calls.",
              "reasoning": "   \u2022 Three sibling middleware implementations in different services that wrap incoming HTTP calls.\n\n8. /Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs  ",
              "conclusion": "8. /Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 6,
              "description": "4. Validation",
              "reasoning": "4. Validation\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2022 Unit tests / integration tests that simulate a request with a Referer header and assert the produced span contains HTTP_REFERER.  ",
              "conclusion": "\u2022 Unit tests / integration tests that simulate a request with a Referer header and assert the produced span contains HTTP_REFERER.  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            }
          ],
          "final_conclusion": "(Names and directory structure strongly imply these files hold request-level telemetry, though final confirmation would require inspecting code bodies.)",
          "overall_confidence": 0.8000000000000002,
          "alternative_approaches": [
            "Approach",
            "\u2022 Utility with extension methods for setting tags on Activity \u2013 will likely be reused for the new attributes.",
            "Alternative approaches considered"
          ]
        }
      },
      "error": null,
      "execution_time": 0.00017595291137695312,
      "cache_hit": false
    },
    "validation": {
      "stage_name": "validation",
      "status": "StageStatus.FAILED",
      "result": null,
      "error": "'selected_files'",
      "execution_time": 0.0,
      "cache_hit": false
    }
  }
}