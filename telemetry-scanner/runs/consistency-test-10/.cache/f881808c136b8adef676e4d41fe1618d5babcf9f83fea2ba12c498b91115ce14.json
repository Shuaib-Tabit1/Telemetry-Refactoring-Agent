"EnhancedIntent(issue_category='INSTRUMENTATION', static_analysis_query={'find_method_call': 'SetTag'}, semantic_description='Add missing HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to existing HTTP server spans in the CLM web application.', search_keywords=['HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION', 'ActivitySource', 'SetTag', 'HttpContext', 'OpenTelemetry'], telemetry_operation={'type': 'span', 'target_name': 'incoming_http_request', 'action': 'ADD_ATTRIBUTES', 'attributes_to_add': [{'name': 'HTTP_REFERER', 'value_source': 'Request.Headers[\"Referer\"]'}, {'name': 'HTTP_RESPONSE_REDIRECT_LOCATION', 'value_source': 'Response.Headers[\"Location\"]'}], 'new_span_name': None, 'new_metric_details': {}}, confidence=<IntentConfidence.HIGH: 'high'>, operation_type=<OperationType.MULTI_FILE: 'multi_file'>, complexity_score=4, estimated_files=2, validation_result=ValidationResult(is_valid=True, confidence=<IntentConfidence.HIGH: 'high'>, issues=[], suggestions=[]), sub_tasks=[{'order': 1, 'id': 'code_discovery', 'action': 'locate_configuration', 'description': 'Search the CLM-Web solution for the existing OpenTelemetry / ActivitySource setup and any custom middleware that wraps HttpContext. Focus on files that reference `ActivitySource`, `OpenTelemetry`, `AddOpenTelemetryInstrumentation`, or `SetTag`.', 'search_keywords': ['ActivitySource', 'AddOpenTelemetry', 'UseOpenTelemetry', 'SetTag', 'Middleware'], 'expected_files': ['Startup.cs or Program.cs', 'TelemetryExtensions.cs', 'TracingMiddleware.cs (if any)', 'Global.asax.cs for WebForms pipelines'], 'validation_criteria': 'A single place (or very small set) is identified where the inbound Activity is created and can be enriched both BEFORE request processing and AFTER the response is written.'}, {'order': 2, 'id': 'design_hook', 'action': 'design_instrumentation_hook', 'description': 'Decide whether to (a) extend an existing custom middleware or (b) create a new middleware to enrich Activity.Current with the two new tags. The hook must run:\\n  \u2022 Early enough to read the incoming Referer header (Request.Headers[\"Referer\"])\\n  \u2022 Late enough to read the final response headers (Response.Headers[\"Location\"])', 'dependencies': ['code_discovery'], 'validation_criteria': 'Instrumentation point determined; trade-offs documented in PR description.'}, {'order': 3, 'id': 'implement_referer_tag', 'action': 'code_change', 'description': 'Inside the chosen middleware, add logic to read the Referer header and set the tag if non-empty:\\n```\\nvar referer = context.Request.Headers[\"Referer\"].FirstOrDefault();\\nif (!string.IsNullOrWhiteSpace(referer))\\n{\\n    Activity.Current?.SetTag(\"HTTP_REFERER\", referer);\\n}\\n```', 'dependencies': ['design_hook'], 'expected_files': ['<ChosenMiddleware>.cs'], 'validation_criteria': 'Tag added; null / empty handled; compiles.'}, {'order': 4, 'id': 'implement_redirect_location_tag', 'action': 'code_change', 'description': 'After `await _next(context)` (i.e., when the response is final), add logic to capture redirect target when status code is 3xx and Location header exists:\\n```\\nif (context.Response.StatusCode >= 300 && context.Response.StatusCode < 400)\\n{\\n    var location = context.Response.Headers[\"Location\"].FirstOrDefault();\\n    if (!string.IsNullOrWhiteSpace(location))\\n    {\\n        Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location);\\n    }\\n}\\n```', 'dependencies': ['implement_referer_tag'], 'validation_criteria': 'Tag added; handles all 30x codes; no exceptions thrown when header missing.'}, {'order': 5, 'id': 'unit_tests', 'action': 'add_unit_integration_tests', 'description': 'Write unit tests for the middleware using TestServer/WebApplicationFactory. Scenarios:\\n  \u2022 GET with Referer, expect tag present\\n  \u2022 302 response with Location, expect tag present\\n  \u2022 Missing headers, expect no tags (or tag not added)\\nUse ActivityListener or InMemoryExporter to assert tags.', 'dependencies': ['implement_redirect_location_tag'], 'expected_files': ['TelemetryMiddlewareTests.cs'], 'validation_criteria': 'All tests pass locally and on CI.'}, {'order': 6, 'id': 'manual_validation_local', 'action': 'run_local_server', 'description': 'Run CLM-Web locally, exercise redirect pages, and inspect emitted spans with OTLP console or Jaeger UI to ensure tags appear.', 'dependencies': ['unit_tests'], 'validation_criteria': 'Tags visible in local exporter; no performance regression observed via simple load test.'}, {'order': 7, 'id': 'feature_flag', 'action': 'add_feature_toggle_optional', 'description': 'If risk is high, guard the new logic behind an `IOptions<TelemetryFlags>` flag (default ON in Demo). Allows quick disable in production.', 'dependencies': ['manual_validation_local'], 'validation_criteria': 'Flag toggles behaviour in tests.'}, {'order': 8, 'id': 'code_review_pr', 'action': 'open_pull_request', 'description': 'Submit PR with:\\n  \u2022 Middleware changes\\n  \u2022 Unit tests\\n  \u2022 Update to release notes / CHANGELOG\\n  \u2022 Kusto validation query in PR description', 'dependencies': ['feature_flag'], 'validation_criteria': 'Approved by at least two peers; no failed CI checks.'}, {'order': 9, 'id': 'deploy_demo', 'action': 'deploy_to_demo', 'description': 'Deploy to Demo environment via standard pipeline. Run the expected Kusto query:\\n```\\nOtlpSpanEvents\\n| where Environment == \"Demo\"\\n| where HTTP_REFERER !~ \"\" or HTTP_RESPONSE_REDIRECT_LOCATION !~ \"\"\\n| limit 50\\n```', 'dependencies': ['code_review_pr'], 'validation_criteria': 'Query returns spans with both attributes within the first 10 minutes post-deploy.'}, {'order': 10, 'id': 'prod_rollout', 'action': 'progressive_deploy', 'description': 'Roll out to Prod using ringed deployment (e.g., 5% \u2192 25% \u2192 100%) while monitoring:\\n  \u2022 Span error rates\\n  \u2022 GC/CPU per node\\n  \u2022 Any spike in 5xx responses', 'dependencies': ['deploy_demo'], 'validation_criteria': 'No performance degradation (>5% baseline) and no new errors during 30-minute observation window.'}, {'order': 11, 'id': 'post_deploy_validation', 'action': 'final_validation_kusto', 'description': 'Re-run expanded Kusto query on Prod after full rollout to confirm attribute presence on key pages:\\n```\\nOtlpSpanEvents\\n| where url_path in (\"/clm/Documents/BrowseDocuments.aspx\", \"/clm/SSO/SSOEndpoint.ashx\")\\n| where http_status_code between (300 .. 399)\\n| project Timestamp, url_path, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\\n| take 100\\n```', 'dependencies': ['prod_rollout'], 'validation_criteria': 'At least 95% of 3xx spans contain the redirect location tag; referer present when header sent by browser.'}], contextual_hints=['Hooking into the ASP-NET pipeline late enough to see Response.Headers[\"Location\"], yet early enough that the Activity has not been stopped', 'Guaranteeing the attributes are added for every framework variant (IIS in-proc, Kestrel, WebForms pages, .ashx endpoints, etc.)'], similar_patterns=['http_server_span_attributes', 'redirect_tracking'], implementation_strategy=ImplementationStrategy(extend_existing=True, create_new=False, preferred_approach='middleware'), exact_requirements=ExactRequirements(attribute_names=['HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION', 'HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION'], patterns=['kusto\\nOtlpSpanEvents\\n| where Environment == \"Demo\"\\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\\n| where http_status_code > 200\\n| project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\\n', '\\n\\n**Implementation Requirements:**\\n\\n1. **Add HTTP_REFERER attribute** to all incoming HTTP requests\\n   - Source: ', '\\n   - Add to span as: ', '\\n\\n2. **Add HTTP_RESPONSE_REDIRECT_LOCATION attribute** for redirect responses\\n   - Source: ', ' when status code is 301/302/303/307/308\\n   - Add to span as: '], implementation_notes=['SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue)`\\n\\n**Files to Look For:**\\n- CLM web application middleware or request handling code\\n- ASP', 'NET request pipeline components\\n- OpenTelemetry instrumentation configuration\\n- Files containing \"ActivitySource\", \"SetTag\", or \"AddTag\" method calls\\n- Middleware files that handle HTTP requests/responses\\n- Look for existing telemetry code in CLM-related projects\\n\\n**Acceptance Criteria:**\\n- [ ] HTTP_REFERER attribute captured from incoming request headers\\n- [ ] HTTP_RESPONSE_REDIRECT_LOCATION attribute captured for 302+ responses  \\n- [ ] Attributes visible in OtlpSpanEvents Kusto table\\n- [ ] No performance degradation from additional attribute collection\\n- [ ] Proper null/empty value handling for missing headers\\n\\n**Technical Notes:**\\n- Follow existing OpenTelemetry patterns in the codebase\\n- Ensure attribute names match exactly: \"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\"\\n- Add attributes to HTTP request spans, not separate spans\\n- Handle edge cases where headers might be missing or empty']), telemetry_analysis=None)"