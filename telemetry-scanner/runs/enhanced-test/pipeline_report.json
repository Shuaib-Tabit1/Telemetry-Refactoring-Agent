{
  "execution_summary": {
    "total_stages": 7,
    "completed": 7,
    "failed": 0,
    "cache_hits": 0,
    "total_execution_time": 293.33561635017395
  },
  "stage_details": {
    "fetch_ticket": {
      "stage_name": "fetch_ticket",
      "status": "StageStatus.COMPLETED",
      "result": "Please look at this Trace I couldn't able to find where this request is redirected to. This is a CLM Demo Trace; Can you please take a look why OtlpSpanEvents do not have span attributes  HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION ?\nQuery from OtlpSpanEvents https://kazmon.docusign.net/Kusto?queryId=20250513015129-4146728714337517111\nQuery from RequestEvents link here\nAs you know that these are very important span attributes for us to assess the impact and for investigation of an issue, could you please ensure these attributes are available in OtlpspanEvents? Thank you!\n\n \n\nQuery from OtlpSpanEvents\n\n\n\nOtlpSpanEvents\n| where Timestamp between (datetime('2025-05-10T02:55:40.207396Z')..datetime('2025-05-10T08:25:40.207396Z'))\n| where Environment == \"Demo\"\n//| where url_path contains \"/clm/SSO/SSOEndpoint.ashx\"\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\n| where http_status_code > 200\n| limit 100\n \n\nQuery from RequestEvents\n\n\n\nlet _startTime=datetime(2025-05-10T02:55:40.207396Z);\nlet _endTime = datetime(2025-05-10T08:25:40.207396Z);\nRequestEvents\n| where Timestamp between (_startTime .. _endTime) and Environment==\"Demo\"\n| where Application == \"clm-web\"\n| where HTTP_RESPONSE_STATUS_CODE == \"302\" and HTTP_RESPONSE_REDIRECT_LOCATION contains \"Error\"\n| limit 100\n\n\nAcceptance Criteria\n\nHTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION should be available as span_attributes ",
      "error": null,
      "execution_time": 0.000408172607421875,
      "cache_hit": false
    },
    "extract_intent": {
      "stage_name": "extract_intent",
      "status": "StageStatus.COMPLETED",
      "result": {
        "issue_category": "INSTRUMENTATION",
        "static_analysis_query": {
          "find_method_call": "SetAttribute"
        },
        "semantic_description": "Add the HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to outgoing CLM-web spans so they appear in OtlpSpanEvents.",
        "search_keywords": [
          "HTTP_REFERER",
          "HTTP_RESPONSE_REDIRECT_LOCATION",
          "OtlpSpanEvents",
          "SetAttribute",
          "OpenTelemetry"
        ],
        "telemetry_operation": {
          "type": "span",
          "target_name": null,
          "action": "ADD_ATTRIBUTES",
          "attributes_to_add": [
            {
              "name": "HTTP_REFERER",
              "value_source": "HTTP request header / context"
            },
            {
              "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
              "value_source": "HTTP response header"
            }
          ],
          "new_span_name": null,
          "new_metric_details": {}
        },
        "confidence": "IntentConfidence.HIGH",
        "operation_type": "OperationType.MULTI_FILE",
        "complexity_score": 5,
        "estimated_files": 3,
        "validation_result": {
          "is_valid": true,
          "confidence": "IntentConfidence.HIGH",
          "issues": [],
          "suggestions": []
        },
        "sub_tasks": [
          {
            "order": 1,
            "name": "Scope & Ownership Confirmation",
            "action": "kickoff",
            "description": "Confirm that the change is limited to CLM-web (only) and that adding these headers does not violate any security or privacy guideline.  File an ADO work-item for Security/Privacy review if needed.",
            "validation_criteria": [
              "Security/Privacy sign-off recorded (or N/A).",
              "Agreement that only CLM-web spans will be enriched."
            ]
          },
          {
            "order": 2,
            "name": "Locate Existing OTEL Wiring",
            "action": "locate_configuration",
            "description": "Search for the OpenTelemetry registration in the CLM-web solution.",
            "search_keywords": [
              "OpenTelemetry",
              "AddOpenTelemetry",
              "ActivitySource",
              "TracerProviderBuilder",
              "Enrich"
            ],
            "expected_files": [
              "Startup.cs / Program.cs (depending on .NET version)",
              "Telemetry/TelemetryExtensions.cs",
              "Telemetry/OpenTelemetryConfig.cs"
            ],
            "validation_criteria": "Files that build the TracerProvider are identified and checked into this ticket as \u2018touch-points\u2019."
          },
          {
            "order": 3,
            "name": "Select Injection Point",
            "action": "design",
            "description": "Choose the most sustainable place to attach the enrichment logic.\nOption A (preferred): Use builder.AddAspNetCoreInstrumentation(options => options.Enrich = \u2026)\nOption B:  Add a custom AspNetCore middleware that captures headers and sets Activity.Current?.SetTag().",
            "dependencies": [
              2
            ],
            "validation_criteria": "Code comment (or ADR) explains which option was chosen and why."
          },
          {
            "order": 4,
            "name": "Implement Attribute Enricher",
            "action": "implement_changes",
            "description": "Add code that reads\n  \u2022 HTTP_REFERER from HttpContext.Request.Headers[\"Referer\"],\n  \u2022 HTTP_RESPONSE_REDIRECT_LOCATION from HttpContext.Response.Headers[\"Location\"] (only if status code 3xx).\nand calls Activity.SetTag(\"HTTP_REFERER\", value) / SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", value).  Guard with null/empty checks and restrict to CLM-web requests (e.g., Activity.Source.Name == \"clm-web\" or path prefix).",
            "dependencies": [
              3
            ],
            "expected_files_modified": [
              "Telemetry/TelemetryExtensions.cs",
              "Telemetry/OpenTelemetryConfig.cs",
              "Telemetry/RedirectEnricher.cs (new)"
            ],
            "validation_criteria": [
              "dotnet build succeeds.",
              "Span attributes appear in unit/integration test (see next step)."
            ]
          },
          {
            "order": 5,
            "name": "Add Unit / Integration Tests",
            "action": "test_automation",
            "description": "Create or extend tests that issue a fake 302 response and assert Activity tags include the two new keys.",
            "dependencies": [
              4
            ],
            "expected_files_added": [
              "tests/RedirectEnricherTests.cs"
            ],
            "validation_criteria": "CI pipeline shows green tests covering positive, negative, and privacy redaction cases."
          },
          {
            "order": 6,
            "name": "Local & Dev-Cluster Verification",
            "action": "manual_verification",
            "description": "Run the service locally with OTLP exporter pointing to a local collector. Inspect spans (Jaeger, OpenTelemetry Collector, or console exporter) to confirm headers appear ONLY when they should.",
            "dependencies": [
              4
            ],
            "validation_criteria": "Visual confirmation that an Activity with HTTP 302 has both tags; Activities without redirect do not have HTTP_RESPONSE_REDIRECT_LOCATION."
          },
          {
            "order": 7,
            "name": "Schema / Mapping Check in Kusto",
            "action": "schema_validation",
            "description": "Verify that OtlpSpanEvents table in Kusto already ingests unknown tags inside span_attributes JSON. If explicit column mapping is required, file a Data Engineering PR to extend the mapping.",
            "dependencies": [
              6
            ],
            "validation_criteria": "Kusto mapping change approved OR confirmation that no change is required."
          },
          {
            "order": 8,
            "name": "Deploy to Demo Environment",
            "action": "deployment",
            "description": "Merge PR behind a feature-flag (e.g., OTEL_ENRICH_REDIRECT_HEADERS). Release to Demo and enable the flag via config.",
            "dependencies": [
              5,
              7
            ],
            "validation_criteria": [
              "No errors in Demo logs related to the new enricher.",
              "Kusto query against OtlpSpanEvents (same as in ticket) returns rows with the new attributes."
            ]
          },
          {
            "order": 9,
            "name": "Production Roll-out",
            "action": "deployment",
            "description": "Gradual rollout: 10% \u2192 50% \u2192 100% traffic using the feature-flag pattern.  Monitor span ingestion rate & Kusto dashboards.",
            "dependencies": [
              8
            ],
            "validation_criteria": "No spike in OTLP exporter failures, memory, or ingestion cost.  SRE sign-off."
          },
          {
            "order": 10,
            "name": "Documentation & Close-out",
            "action": "documentation",
            "description": "Update runbook and wiki with new troubleshooting steps that rely on these headers.  Close ticket with Kusto screenshots.",
            "dependencies": [
              9
            ],
            "validation_criteria": "Docs merged; ticket closed."
          }
        ],
        "contextual_hints": [
          "Retrieving HTTP_REFERER from the incoming request context and Redirect-Location from the outgoing response at the same execution point",
          "Guaranteeing that attributes are only added for CLM-web spans and not all services, to avoid noisy data",
          "Validating that upstream OTLP exporter and Kusto mappings already accept these new attributes"
        ],
        "similar_patterns": [
          "http_redirect_instrumentation",
          "missing_span_attributes"
        ]
      },
      "error": null,
      "execution_time": 28.54405903816223,
      "cache_hit": false
    },
    "build_graph": {
      "stage_name": "build_graph",
      "status": "StageStatus.COMPLETED",
      "result": [
        "/Users/shuaib.tabit/Documents/Atlas/src/ActIntegration\\ActIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdminService\\AdminService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService\\AdvancedInsightsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService.IntegrationTests\\AdvancedInsightsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AgreementDefinitionModel\\AdmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP\\API.ABAC.PDP.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation.IntegrationTests/API.Allocation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/API.Allocation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication\\API.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Common\\API.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content\\API.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content.EndToEndTests\\API.Content.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.Common\\API.DocuSignInternal.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.IntegrationTests\\API.DocuSignInternal.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal\\API.DocuSignInternal.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper.IntegrationTests/API.GateKeeper.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper\\API.GateKeeper.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch.EndToEndTests\\API.OpenSearch.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch\\API.OpenSearch.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning.IntegrationTests/API.Provisioning.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning\\API.Provisioning.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.SfGenAPI\\API.SfGenAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI\\API.WebAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities\\API.WorkflowActivities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.IntegrationTests\\API.WorkflowActivities.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.Client/API.WorkflowActivities.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign\\API.WorkflowDesign.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign.IntegrationTests\\API.WorkflowDesign.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities\\Atlas.Workflow.Activities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Client\\Atlas.Workflow.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Readers\\Atlas.Workflow.Readers.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService\\AtlasDataManipulationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService.IntegrationTests\\AtlasDataManipulationService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication\\AuthenticationApplication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication.IntegrationTests\\AuthenticationApplication.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService\\AuthMaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService.IntegrationTests\\AuthMaintenanceService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Automation.Toolkit.Tests\\Automation.Toolkit.Tests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ChatNotification\\ChatNotification.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CodeRunner\\CodeRunner.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Core\\Collaboration.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Infrastructure\\Collaboration.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ConnectServiceIntegration\\ConnectServiceIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain.Testing\\Core.Domain.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain\\Core.Domain.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework\\Core.ServiceFramework.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework.Testing\\Core.ServiceFramework.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types\\Core.Types.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules\\CustomRules.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService\\CustomRuleService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService.IntegrationTests\\CustomRuleService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService\\DetectTypeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService.IntegrationTests\\DetectTypeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService\\DocToPDFService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService.IntegrationTests\\DocToPDFService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentAssembly\\DocumentAssembly.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService\\DocumentCompareService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService.IntegrationTests\\DocumentCompareService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation\\DocumentCreation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation.IntegrationTests\\DocumentCreation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticCore\\ElasticCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticIndexing\\ElasticIndexing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElectronicSignature\\ElectronicSignature.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService\\ESignatureService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService.IntegrationTests\\ESignatureService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ETL\\ETL.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService\\ExtractService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService.IntegrationTests\\ExtractService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Fax\\Fax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/FormGen\\FormGen.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor\\GenericEventProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor.IntegrationTests\\GenericEventProcessor.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GraphQLCore\\GraphQLCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/HtmlService\\HtmlService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InboundFax\\InboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InteractivePreviewCore\\InteractivePreviewCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MaintenanceService\\MaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MenuActions\\DocumentReviewMenuActions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService\\MessageWorkerService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService\\NewsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService.IntegrationTests\\NewsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ObligationManagementIntegration\\ObligationManagementIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI.IntegrationTests/OfficeWebAppsAPI.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI\\OfficeWebAppsAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OneConfig.Testing\\OneConfig.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\DacDocGenApiClient\\DacDocGenApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\Doc2PdfApiClient\\Doc2PdfApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OrchestrationIntegration\\OrchestrationIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail\\OutboundEmail.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail.IntegrationTests\\OutboundEmail.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent\\OutboundEvent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent.IntegrationTests\\OutboundEvent.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundFax\\OutboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundHttpService\\OutboundHttpService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Packaging\\Packaging.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/PdfService\\PdfService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProcessBuilder\\ProcessBuilder.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProfileLogger\\ProfileLogger.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Core\\ProxyLayer.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Infrastructure\\ProxyLayer.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService\\ReportingService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService.IntegrationTests\\ReportingService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Authentication\\REST.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Common\\REST.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Content\\REST.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices\\REST.WebServices.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/RtmIntegration\\RtmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SANitationService\\SANitationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Core\\SForce.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Services\\SForce.Services.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer\\SFTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer.IntegrationTests\\SFTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SharedTemplates\\SharedTemplates.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer\\SMTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer.IntegrationTests\\SMTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService\\StructuredDocumentService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService.IntegrationTests\\StructuredDocumentService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TaskProcessor\\TaskProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService\\TreeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService.IntegrationTests\\TreeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/UserTaskList\\UserTaskList.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback\\VendorCallback.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Testing\\Web.Common.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Abstractions/Web.Common.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Resources/Web.Common.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common\\Web.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Web.Common.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Abstractions\\Web.CommonUI.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Resources/Web.CommonUI.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI\\Web.CommonUI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.IntegrationTests\\Web.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Testing\\Web.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web\\Web.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet\\WebNet.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet.IntegrationTests\\WebNet.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebContent\\WebContent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebShare\\WebShare.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap\\WebSoap.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol\\WINS.Protocol.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS\\WINS.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CLM.Search\\dirs.proj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap.EndToEndTests\\WebSoap.EndToEndTests.csproj"
      ],
      "error": null,
      "execution_time": 0.1614398956298828,
      "cache_hit": false
    },
    "intelligent_search": {
      "stage_name": "intelligent_search",
      "status": "StageStatus.COMPLETED",
      "result": [
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Common/GlobalSuppressions.cs",
          "strategy": "SearchStrategy.STRUCTURAL",
          "relevance_score": 100,
          "reasoning": "Contains method call: SetAttribute (33 times)",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [
            "[assembly: SuppressMessage(\"Reliability\", \"CA2016:Forward the 'CancellationToken' parameter to methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Handlers.RequestLoggingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1847:Use char literal for a single character lookup\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ApiStringParsers.ParseNameValuePairs(System.String,System.Boolean@)~System.Collections.Specialized.NameValueCollection\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ClientHelper.GetBaseValidationErrorsForCommentAndCompletionRights(System.String,ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Core.Types.Enums.WorkflowComment)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.GenerateTrackName(System.String,System.Boolean,System.Boolean)~System.String\")]",
            "[assembly: SuppressMessage(\"Performance\", \"CA1847:Use char literal for a single character lookup\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ApiStringParsers.ParseNameValuePairs(System.String,System.Boolean@)~System.Collections.Specialized.NameValueCollection\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ClientHelper.GetBaseValidationErrorsForCommentAndCompletionRights(System.String,ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Core.Types.Enums.WorkflowComment)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.GenerateTrackName(System.String,System.Boolean,System.Boolean)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.IDocGenFieldTranslationHelper.GetExternalProvidersConfigurations(ADEXS.Core.Domain.Model.FormConfiguration)~System.Collections.Generic.List{ADEXS.Api.Common.Types.DocGen.ExternalProvidersConfiguration}\")]",
            "[assembly: SuppressMessage(\"Design\", \"CA1019:Define accessors for attribute arguments\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute.#ctor(ADEXS.Core.Types.Enums.LoginAccessPoint)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute.GetClientIpAddress(System.Net.Http.HttpRequestMessage)~System.String\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute.GetClientIpAddress(System.Net.Http.HttpRequestMessage)~System.String\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]",
            "[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]",
            "[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]",
            "[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]",
            "[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]",
            "[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]",
            "[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]",
            "[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.BaseRateLimitFilter.GetCount(System.String,System.Int32,System.Boolean)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Intentional catch of general exception for broad logging purposes and to ensure continuity in response header creation, without letting exceptions disrupt the flow.\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.BaseRateLimitFilter.CreateRateLimitResponseHeaders(System.String,System.Int32,System.Int32)~System.Collections.Generic.Dictionary{System.String,System.String}\")]",
            "[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.BaseRateLimitFilter.GetCount(System.String,System.Int32,System.Boolean)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Intentional catch of general exception for broad logging purposes and to ensure continuity in response header creation, without letting exceptions disrupt the flow.\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.BaseRateLimitFilter.CreateRateLimitResponseHeaders(System.String,System.Int32,System.Int32)~System.Collections.Generic.Dictionary{System.String,System.String}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.ScmSignatureAuthenticationHandler.HandleAuthenticateAsync~System.Threading.Tasks.Task{Microsoft.AspNetCore.Authentication.AuthenticateResult}\")]"
          ],
          "confidence": 0.9
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer/SFTPSession.cs",
          "strategy": "SearchStrategy.STRUCTURAL",
          "relevance_score": 100,
          "reasoning": "Contains method call: SetAttribute (14 times)",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [
            "handler.Server.OnExtendedRequest +=new TElSFTPServerExtendedRequestEvent(Server_OnExtendedRequest);\n            handler.Server.OnReadSymLink +=new TElSFTPServerReadSymLinkEvent(Server_OnReadSymLink);\n            handler.Server.OnRequestAttributes2 +=new TElSFTPServerRequestAttributes2Event(Server_OnRequestAttributes2);\n            handler.Server.OnSetAttributes += new TElSFTPServerSetAttributesEvent(Server_OnSetAttributes);\n            handler.Server.OnSetAttributes2 +=new TElSFTPServerSetAttributes2Event(Server_OnSetAttributes2);\n            handler.Server.OnTextSeek += new TElSFTPServerTextSeekEvent(Server_OnTextSeek);\n            handler.Server.OnUnblock +=new TElSFTPServerUnblockEvent(Server_OnUnblock);",
            "handler.Server.OnReadSymLink +=new TElSFTPServerReadSymLinkEvent(Server_OnReadSymLink);\n            handler.Server.OnRequestAttributes2 +=new TElSFTPServerRequestAttributes2Event(Server_OnRequestAttributes2);\n            handler.Server.OnSetAttributes += new TElSFTPServerSetAttributesEvent(Server_OnSetAttributes);\n            handler.Server.OnSetAttributes2 +=new TElSFTPServerSetAttributes2Event(Server_OnSetAttributes2);\n            handler.Server.OnTextSeek += new TElSFTPServerTextSeekEvent(Server_OnTextSeek);\n            handler.Server.OnUnblock +=new TElSFTPServerUnblockEvent(Server_OnUnblock);\n            handler.Server.OnVersionChange +=new TElSftpServerVersionChangeEvent(Server_OnVersionChange);",
            "handler.Server.OnExtendedRequest -=Server_OnExtendedRequest;\n            handler.Server.OnReadSymLink -=Server_OnReadSymLink;\n            handler.Server.OnRequestAttributes2 -=Server_OnRequestAttributes2;\n            handler.Server.OnSetAttributes -= Server_OnSetAttributes;\n            handler.Server.OnSetAttributes2 -=Server_OnSetAttributes2;\n            handler.Server.OnTextSeek -= Server_OnTextSeek;\n            handler.Server.OnUnblock -=Server_OnUnblock;",
            "handler.Server.OnReadSymLink -=Server_OnReadSymLink;\n            handler.Server.OnRequestAttributes2 -=Server_OnRequestAttributes2;\n            handler.Server.OnSetAttributes -= Server_OnSetAttributes;\n            handler.Server.OnSetAttributes2 -=Server_OnSetAttributes2;\n            handler.Server.OnTextSeek -= Server_OnTextSeek;\n            handler.Server.OnUnblock -=Server_OnUnblock;\n            handler.Server.OnVersionChange -=Server_OnVersionChange;",
            "_log.DebugNoPII(string.Format(\"{0}: Unimplemented OnRequestAttributes2 called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnSetAttributes(object Sender, string Path, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnSetAttributes called from {1}.\", _id, _sshSession.RemoteIP));\n    }",
            "public void Server_OnSetAttributes(object Sender, string Path, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnSetAttributes called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnSetAttributes2(object Sender, object Data, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)",
            "_log.DebugNoPII(string.Format(\"{0}: Unimplemented OnSetAttributes called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnSetAttributes2(object Sender, object Data, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnSetAttributes2 called from {1}.\", _id, _sshSession.RemoteIP));\n    }",
            "public void Server_OnSetAttributes2(object Sender, object Data, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnSetAttributes2 called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnTextSeek(object Sender, object Data, long LineNumber, ref int ErrorCode, ref string Comment)"
          ],
          "confidence": 0.9
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/GlobalSuppressions.cs",
          "strategy": "SearchStrategy.STRUCTURAL",
          "relevance_score": 100,
          "reasoning": "Contains method call: SetAttribute (7 times)",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [
            "[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.RunRule._chainedRule\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.SendReport._cr\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.SendReport._distGroup\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.SetAttributeGroup._metaGroup\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.StartApprovalTemplate._approvalTemplate\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._actions\")]\n[assembly: SuppressMessage(\"Build\", \"CA5362:_actions participates in a potential reference cycle\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._actions\")]",
            "[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendEmail.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1825:Avoid zero-length array allocations\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendReport.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendReport.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]",
            "[assembly: SuppressMessage(\"Performance\", \"CA1825:Avoid zero-length array allocations\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendReport.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendReport.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]",
            "[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendReport.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]",
            "[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.Execute~System.Boolean\")]",
            "[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.GetInfoWithValidate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.String\")]",
            "[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.GetInfoWithValidate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.UsableRuleTypes(ADEXS.Core.Domain.Model.Account)~System.Collections.Generic.IList{ADEXS.Core.Types.Enums.ObjectType}\")]"
          ],
          "confidence": 0.9
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/FolderRules/FolderRuleAnalyzer.cs",
          "strategy": "SearchStrategy.STRUCTURAL",
          "relevance_score": 100,
          "reasoning": "Contains method call: SetAttribute (4 times)",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [
            "//\tif(enough) break;\n\t\t\t\t//}\n\n\t\t\t\tList<AbstractCustomRuleAction> alst = Find(Enums.CustomRuleActionType.SetAttributeGroup);\n\t\t\t\tList<AbstractCustomRuleFilter> flst = Find(Enums.CustomRuleFilterType.HasAttributeGroup);\n\t\t\t\tbool enough = false;\n\t\t\t\tforeach (SetAttributeGroup grpAct in alst)",
            "List<AbstractCustomRuleAction> alst = Find(Enums.CustomRuleActionType.SetAttributeGroup);\n\t\t\t\tList<AbstractCustomRuleFilter> flst = Find(Enums.CustomRuleFilterType.HasAttributeGroup);\n\t\t\t\tbool enough = false;\n\t\t\t\tforeach (SetAttributeGroup grpAct in alst)\n\t\t\t\t{\n\t\t\t\t\tforeach (HasAttributeGroup hasGrp in flst)\n\t\t\t\t\t{",
            "if (enough) break;\n\t\t\t\t}\n\n\t\t\t\talst = Find(Enums.CustomRuleActionType.SetAttributeValue);\n\t\t\t\tflst = Find(Enums.CustomRuleFilterType.HasAttributeValue);\n\t\t\t\tenough = false;\n\t\t\t\tforeach (SetAttributeValue fldAct in alst)",
            "alst = Find(Enums.CustomRuleActionType.SetAttributeValue);\n\t\t\t\tflst = Find(Enums.CustomRuleFilterType.HasAttributeValue);\n\t\t\t\tenough = false;\n\t\t\t\tforeach (SetAttributeValue fldAct in alst)\n\t\t\t\t{\n\t\t\t\t\tforeach (HasAttributeValue hasFld in flst)\n\t\t\t\t\t{"
          ],
          "confidence": 0.9
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Resources/CustomRules.Designer.cs",
          "strategy": "SearchStrategy.STRUCTURAL",
          "relevance_score": 100,
          "reasoning": "Contains method call: SetAttribute (4 times)",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [
            "/// <summary>\n        ///   Looks up a localized string similar to Assign Attribute Group.\n        /// </summary>\n        public static string enum_CustomRuleActionType_SetAttributeGroup {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SetAttributeGroup\", resourceCulture);\n            }",
            "/// </summary>\n        public static string enum_CustomRuleActionType_SetAttributeGroup {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SetAttributeGroup\", resourceCulture);\n            }\n        }",
            "/// <summary>\n        ///   Looks up a localized string similar to Assign Attribute Value.\n        /// </summary>\n        public static string enum_CustomRuleActionType_SetAttributeValue {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SetAttributeValue\", resourceCulture);\n            }",
            "/// </summary>\n        public static string enum_CustomRuleActionType_SetAttributeValue {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SetAttributeValue\", resourceCulture);\n            }\n        }"
          ],
          "confidence": 0.9
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Common/AbstractCustomRuleActionJsonConverter .cs",
          "strategy": "SearchStrategy.STRUCTURAL",
          "relevance_score": 100,
          "reasoning": "Contains method call: SetAttribute (4 times)",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [
            "{\n\t\t\tCustomRuleActionType.MoveDocument => new MoveDocument(),\n\t\t\tCustomRuleActionType.StartWorkflow => new StartWorkflow(),\n\t\t\tCustomRuleActionType.SetAttributeGroup => new SetAttributeGroup(),\n\t\t\tCustomRuleActionType.SetAttributeValue => new SetAttributeValue(),\n\t\t\tCustomRuleActionType.SendEmail => new SendEmail(),\n\t\t\tCustomRuleActionType.BulkMetadataImport => new BulkMetadataImport(),",
            "CustomRuleActionType.MoveDocument => new MoveDocument(),\n\t\t\tCustomRuleActionType.StartWorkflow => new StartWorkflow(),\n\t\t\tCustomRuleActionType.SetAttributeGroup => new SetAttributeGroup(),\n\t\t\tCustomRuleActionType.SetAttributeValue => new SetAttributeValue(),\n\t\t\tCustomRuleActionType.SendEmail => new SendEmail(),\n\t\t\tCustomRuleActionType.BulkMetadataImport => new BulkMetadataImport(),\n\t\t\tCustomRuleActionType.StartApprovalTemplate => new StartApprovalTemplate(),"
          ],
          "confidence": 0.9
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Actions/SetAttributeValue.cs",
          "strategy": "SearchStrategy.STRUCTURAL",
          "relevance_score": 100,
          "reasoning": "Contains method call: SetAttribute (8 times)",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [
            "namespace ADEXS.CustomRules.Actions\n{\n\t[Serializable]\n\tpublic class SetAttributeValue : AbstractCustomRuleAction\n\t{\n\t\tprivate Guid _metaFieldUid = Guid.Empty;\n\t\tprivate MetadataField _metaField;",
            "return RuleUsabilityHelper.GetCachedListFor(Enums.ObjectType.Document, Enums.ObjectType.Folder);\n\t\t}\n\n\t\tinternal SetAttributeValue()\n\t\t{\n\t\t\tActionType = Enums.CustomRuleActionType.SetAttributeValue;\n\t\t}",
            "internal SetAttributeValue()\n\t\t{\n\t\t\tActionType = Enums.CustomRuleActionType.SetAttributeValue;\n\t\t}\n\n\t\tpublic SetAttributeValue(AbstractCustomRule rul)",
            "ActionType = Enums.CustomRuleActionType.SetAttributeValue;\n\t\t}\n\n\t\tpublic SetAttributeValue(AbstractCustomRule rul)\n\t\t\t: this()\n\t\t{\n\t\t\tRule = rul;",
            "Rule = rul;\n\t\t}\n\n\t\tinternal SetAttributeValue(CustomRuleAction dbAction)\n\t\t\t: base(dbAction)\n\t\t{\n\t\t}",
            "public override bool Equals(AbstractCustomRuleAction obj)\n\t\t{\n\t\t\tif (null == obj || !(obj is SetAttributeValue))\n\t\t\t\treturn false;\n\t\t\treturn ((SetAttributeValue)obj)._metaFieldUid == _metaFieldUid &&\n\t\t\t\t\t((SetAttributeValue)obj)._metaParamValue == _metaParamValue;",
            "{\n\t\t\tif (null == obj || !(obj is SetAttributeValue))\n\t\t\t\treturn false;\n\t\t\treturn ((SetAttributeValue)obj)._metaFieldUid == _metaFieldUid &&\n\t\t\t\t\t((SetAttributeValue)obj)._metaParamValue == _metaParamValue;\n\t\t}",
            "if (null == obj || !(obj is SetAttributeValue))\n\t\t\t\treturn false;\n\t\t\treturn ((SetAttributeValue)obj)._metaFieldUid == _metaFieldUid &&\n\t\t\t\t\t((SetAttributeValue)obj)._metaParamValue == _metaParamValue;\n\t\t}\n\n\t\tprotected internal override bool Validate(CustomRuleOutcome outcome)"
          ],
          "confidence": 0.9
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 3 keywords: HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION, OpenTelemetry",
          "matching_patterns": [
            "HTTP_REFERER",
            "HTTP_RESPONSE_REDIRECT_LOCATION",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: SetAttribute, OpenTelemetry",
          "matching_patterns": [
            "SetAttribute",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/CoreDomainRegistry.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 75,
          "reasoning": "Matches 1 keywords: OpenTelemetry",
          "matching_patterns": [
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 75,
          "reasoning": "Matches 1 keywords: OpenTelemetry",
          "matching_patterns": [
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/GlobalSuppressions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 65,
          "reasoning": "Matches 1 keywords: OpenTelemetry",
          "matching_patterns": [
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Services/Program.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 65,
          "reasoning": "Matches 1 keywords: OpenTelemetry",
          "matching_patterns": [
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DotVVM/Controls/Adapters/HtmlLink.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 45,
          "reasoning": "Semantic similarity: 0.354",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeff#nullable disable\nusing ADEXS.Web.Controls.Interfaces;\nusing ADEXS.Web.Controls.Util;",
            "\ufeff#nullable disable\nusing ADEXS.Web.Controls.Interfaces;\nusing ADEXS.Web.Controls.Util;\n\nusing DotVVM.Framework.Binding;",
            "using ADEXS.Web.Controls.Util;\n\nusing DotVVM.Framework.Binding;\nusing DotVVM.Framework.Hosting;"
          ],
          "confidence": "0.35415512"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Common.Tests/AttributeHelperTests.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 45,
          "reasoning": "Matches 1 keywords: SetAttribute",
          "matching_patterns": [
            "SetAttribute"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/OtelSemanticConventions.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 38,
          "reasoning": "Semantic similarity: 0.383",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;",
            "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;",
            "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;"
          ],
          "confidence": "0.38260975"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/ForwardEventRegistrationRequest.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 36,
          "reasoning": "Semantic similarity: 0.364",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing CLM.MessageDefines.Constants;\n\nnamespace ADEXS.Core.Domain.Model",
            "\ufeffusing CLM.MessageDefines.Constants;\n\nnamespace ADEXS.Core.Domain.Model\n{\n\tpublic class ForwardEventRegistrationRequest",
            "public class ForwardEventRegistrationRequest\n\t{\n\t\tpublic string SourceSite { get; set; }\n\t\tpublic ScmEnums.EventType[] EventTypes { get; set; }\n\t\tpublic string SubscriberId { get; set; }"
          ],
          "confidence": "0.3637902"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/SpringOAuth/Models/OAuthConnectionModel.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 36,
          "reasoning": "Semantic similarity: 0.363",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing System;\nusing System.ComponentModel.DataAnnotations;",
            "\ufeffusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace ADEXS.Web.SpringOAuth.Models",
            "using System.ComponentModel.DataAnnotations;\n\nnamespace ADEXS.Web.SpringOAuth.Models\n{\n\tpublic class OAuthConnectionModel"
          ],
          "confidence": "0.3631995"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/FeatureFlags/GoogleFeatureFlags.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 35,
          "reasoning": "Semantic similarity: 0.358",
          "matching_patterns": [],
          "context_snippets": [
            "using DocuSign.DynamicSettings;\nusing ADEXS.FeatureFlags;",
            "using DocuSign.DynamicSettings;\nusing ADEXS.FeatureFlags;\n\nnamespace ADEXS.Core.Domain.FeatureFlags;",
            "using ADEXS.FeatureFlags;\n\nnamespace ADEXS.Core.Domain.FeatureFlags;\n\npublic class GoogleFeatureFlags"
          ],
          "confidence": "0.35840914"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Config/WebNetOptions.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 35,
          "reasoning": "Semantic similarity: 0.354",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing System;\n\nnamespace ADEXS.Web.Config;",
            "namespace ADEXS.Web.Config;\n\npublic class WebNetOptions\n{\n\tpublic const string Section = \"WebReverseProxy\";",
            "public class WebNetOptions\n{\n\tpublic const string Section = \"WebReverseProxy\";\n\n\tpublic Uri? AddressOverride { get; set; }"
          ],
          "confidence": "0.35370153"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP/Filters/CustomResponseHeaderFilter.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 35,
          "reasoning": "Semantic similarity: 0.352",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing ADEXS.Core.Domain;\nusing ADEXS.Core.Types;\nusing System.Web.Http.Filters;",
            "\ufeffusing ADEXS.Core.Domain;\nusing ADEXS.Core.Types;\nusing System.Web.Http.Filters;",
            "\ufeffusing ADEXS.Core.Domain;\nusing ADEXS.Core.Types;\nusing System.Web.Http.Filters;\n\nnamespace ADEXS.API.ABAC.PDP.Filters"
          ],
          "confidence": "0.35236207"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Helpers/RestAuthenticationParameters.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 34,
          "reasoning": "Semantic similarity: 0.350",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing System;\nusing System.Collections.Generic;",
            "\ufeffusing System;\nusing System.Collections.Generic;\n\nusing ADEXS.Api.Common.Attributes;",
            "using System.Collections.Generic;\n\nusing ADEXS.Api.Common.Attributes;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Core;"
          ],
          "confidence": "0.34952736"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Info/HttpConfigurationExtensions.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 34,
          "reasoning": "Semantic similarity: 0.348",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing System.Web.Http;\n\nnamespace ADEXS.Web.Common.Info",
            "\ufeffusing System.Web.Http;\n\nnamespace ADEXS.Web.Common.Info\n{\n\tpublic static class HttpConfigurationExtensions",
            "public static class HttpConfigurationExtensions\n\t{\n\t\tpublic static void EnableInfo<THandler>(this HttpConfiguration httpConfig)\n\t\t\twhere THandler : ServiceInfoHandler, new()\n\t\t{"
          ],
          "confidence": "0.34787235"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/MVC/Filters/RedirectUnsupportedBrowserAttribute.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 34,
          "reasoning": "Semantic similarity: 0.346",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing System;\nusing System.Web;\nusing System.Web.Mvc;",
            "\ufeffusing System;\nusing System.Web;\nusing System.Web.Mvc;\nusing ADEXS.Core.Domain;",
            "\ufeffusing System;\nusing System.Web;\nusing System.Web.Mvc;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.AtlasUrl;"
          ],
          "confidence": "0.34556168"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/IResponseRedirector.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 34,
          "reasoning": "Semantic similarity: 0.345",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffnamespace ADEXS.Web.CommonUI.Helpers\n{\n    public interface IResponseRedirector\n    {\n\t\t/// <summary>",
            "{\n\t\t/// <summary>\n\t\t/// Interrupting call to redirect user to the given url.\n\t\t/// WebForms uses .net's HttpResponse redirect\n\t\t/// </summary>",
            "/// WebForms uses .net's HttpResponse redirect\n\t\t/// </summary>\n\t\t/// <param name=\"url\">The url to redirect to.</param>\n\t\t[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Design\", \"CA1054:Uri parameters should not be strings\", Justification = \"Migrating legacy code\")]\n\t\tvoid ResponseRedirect(string url);"
          ],
          "confidence": "0.34509534"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/Admin/Actions/CreateGroup.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 34,
          "reasoning": "Semantic similarity: 0.345",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing ADEXS.Web.Common;\nusing ADEXS.Web.Common.Responses;\nusing ADEXS.Web.Controller;",
            "\ufeffusing ADEXS.Web.Common;\nusing ADEXS.Web.Common.Responses;\nusing ADEXS.Web.Controller;\nusing ADEXS.Core.Types;",
            "\ufeffusing ADEXS.Web.Common;\nusing ADEXS.Web.Common.Responses;\nusing ADEXS.Web.Controller;\nusing ADEXS.Core.Types;\nusing ADEXS.Web.Interfaces;"
          ],
          "confidence": "0.34463525"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/Addressbook/Actions/ImportContacts.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 34,
          "reasoning": "Semantic similarity: 0.340",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing ADEXS.Core.Types;\nusing ADEXS.Web.Addressbook.Attributes;\nusing ADEXS.Web.AtlasUrl;",
            "\ufeffusing ADEXS.Core.Types;\nusing ADEXS.Web.Addressbook.Attributes;\nusing ADEXS.Web.AtlasUrl;\nusing ADEXS.Web.Common.Responses;",
            "\ufeffusing ADEXS.Core.Types;\nusing ADEXS.Web.Addressbook.Attributes;\nusing ADEXS.Web.AtlasUrl;\nusing ADEXS.Web.Common.Responses;\nusing ADEXS.Web.Controller;"
          ],
          "confidence": "0.34048212"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DotVVM/Controls/WebMetadata/MetadataSetContainer.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 33,
          "reasoning": "Semantic similarity: 0.338",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing ADEXS.Web.Controls.Interfaces;\nusing ADEXS.Web.Controls.WebMetadata;",
            "\ufeffusing ADEXS.Web.Controls.Interfaces;\nusing ADEXS.Web.Controls.WebMetadata;\n\nusing DotVVM.Framework.Controls;",
            "using ADEXS.Web.Controls.WebMetadata;\n\nusing DotVVM.Framework.Controls;\nusing DotVVM.Framework.Hosting;"
          ],
          "confidence": "0.33753645"
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/Controls/Util/AtlasHtmlTextWriter.cs",
          "strategy": "SearchStrategy.SEMANTIC",
          "relevance_score": 33,
          "reasoning": "Semantic similarity: 0.336",
          "matching_patterns": [],
          "context_snippets": [
            "\ufeffusing System;\nusing System.IO;\nusing System.Web.UI;",
            "\ufeffusing System;\nusing System.IO;\nusing System.Web.UI;",
            "\ufeffusing System;\nusing System.IO;\nusing System.Web.UI;\n\nusing ADEXS.Web.Common;"
          ],
          "confidence": "0.33640873"
        }
      ],
      "error": null,
      "execution_time": 41.418686866760254,
      "cache_hit": false
    },
    "analyze_architecture": {
      "stage_name": "analyze_architecture",
      "status": "StageStatus.COMPLETED",
      "result": {
        "direct_impact": [
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Common/AbstractCustomRuleActionJsonConverter .cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/MVC/Filters/RedirectUnsupportedBrowserAttribute.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Config/WebNetOptions.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Resources/CustomRules.Designer.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Helpers/RestAuthenticationParameters.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/OtelSemanticConventions.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Services/Program.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/DotVVM/Controls/WebMetadata/MetadataSetContainer.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.Common.Tests/AttributeHelperTests.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/ForwardEventRegistrationRequest.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/DotVVM/Controls/Adapters/HtmlLink.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer/SFTPSession.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/Addressbook/Actions/ImportContacts.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Info/HttpConfigurationExtensions.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/GlobalSuppressions.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.Common/GlobalSuppressions.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP/Filters/CustomResponseHeaderFilter.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/CoreDomainRegistry.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/GlobalSuppressions.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Actions/SetAttributeValue.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/IResponseRedirector.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/Admin/Actions/CreateGroup.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/SpringOAuth/Models/OAuthConnectionModel.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/Controls/Util/AtlasHtmlTextWriter.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/FeatureFlags/GoogleFeatureFlags.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/FolderRules/FolderRuleAnalyzer.cs"
        ],
        "indirect_impact": [
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Common/Validator.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Actions/AbstractCustomRuleAction.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/WebShare/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/FeatureFlags/FeatureFlagsRegistry.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/Controls/WebMetadata/MetadataSetContainerControl.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer/SFTP_ReadWrite.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.Content/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/Addressbook/MVC/Models/EntityDataSource.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AdminUrl.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer/Utils.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types/Enums.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/MetadataRepository/MetadataRepository.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.SfGenAPI/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/CustomRuleFilter.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Persistence/Model/MetadataFieldPersistence.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/REST.Content/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/RuleUsabilityHelper.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/IMetadataField.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/Helpers/ConfigurationHelper.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Model/Metadata.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/REST.Authentication/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI/Global.asax.cs"
        ],
        "risk_score": 10,
        "affected_patterns": [
          "ArchitecturalPattern.DEPENDENCY_INJECTION",
          "ArchitecturalPattern.SINGLETON"
        ],
        "breaking_changes": [
          "Service registration changes may affect dependency injection"
        ],
        "test_requirements": [
          "OpenTelemetry span validation tests",
          "Service registration validation tests",
          "Integration tests for telemetry data collection",
          "Unit tests for modified methods"
        ]
      },
      "error": null,
      "execution_time": 222.39389514923096,
      "cache_hit": false
    },
    "generate_solution": {
      "stage_name": "generate_solution",
      "status": "StageStatus.COMPLETED",
      "result": {
        "explanation": "Error generating patch: Error code: 400 - {'error': {'message': \"Unsupported parameter: 'max_tokens' is not supported with this model. Use 'max_completion_tokens' instead.\", 'type': 'invalid_request_error', 'param': 'max_tokens', 'code': 'unsupported_parameter'}}\n\nFallback explanation based on reasoning.",
        "diff": "# Patch generation failed - manual implementation required",
        "reasoning_chain": {
          "strategy": "ReasoningStrategy.CHAIN_OF_THOUGHT",
          "steps": [
            {
              "step_number": 1,
              "description": "Fallback analysis",
              "reasoning": "Error in LLM reasoning: Error code: 400 - {'error': {'message': \"Unsupported parameter: 'max_tokens' is not supported with this model. Use 'max_completion_tokens' instead.\", 'type': 'invalid_request_error', 'param': 'max_tokens', 'code': 'unsupported_parameter'}}",
              "conclusion": "Using fallback approach",
              "confidence": 0.5,
              "evidence": [
                "Error occurred"
              ]
            }
          ],
          "final_conclusion": "Fallback conclusion due to reasoning error",
          "overall_confidence": 0.5,
          "alternative_approaches": [
            "Manual implementation"
          ]
        },
        "selected_files": [
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Common/GlobalSuppressions.cs",
            "content": "\ufeff// This file is used by Code Analysis to maintain SuppressMessage\n// attributes that are applied to this project.\n// Project-level suppressions either have no target or are given\n// a specific target and scoped to a namespace, type, member, etc.\n\nusing System.Diagnostics.CodeAnalysis;\n\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApiCommonRegistry.PopulateRegistry(StructureMap.Registry)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApiRegistry.PopulateRegistry(StructureMap.Registry)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AccountApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.Account)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasFilter.FilterAndSort``1(System.Collections.Generic.List{``0},ADEXS.Api.Common.Types.PageSortParams)~System.Collections.Generic.List{``0}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.DocumentProcessTrackingActivityConverter.Convert(AutoMapper.ResolutionContext)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.DocumentProcessTrackingActivity}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.UriResolver.ResolveCore(ADEXS.Core.Domain.Model.Base.IModel)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetCollectionUri``1(System.Guid,System.Type)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetCollectionUri``1(System.Guid,System.Type,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String,ADEXS.Core.Types.Enums.UriType)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetGenUriFor(System.String,System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetScimUriFor(System.String,System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.String,System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.Type)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.Type,System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ClauseApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Clause)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ClauseApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.TermDocument)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ClauseApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.TermDocument)~ADEXS.Core.Domain.Model.TermDocument\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ContactApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Contact)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ContactApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.Contact)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ContactApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.Contact)~ADEXS.Core.Domain.Model.Contact\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DataSourceFieldMapping.#ctor(System.String)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenConfigurationApplicationService.CreateDocGenConfiguration(ADEXS.Api.Common.Types.DocGen.DocGenConfiguration)~ADEXS.Api.Common.Types.DocGen.DocGenConfigurationResponse\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenConfigurationApplicationService.UpdateDocGenConfiguration(ADEXS.Api.Common.Types.DocGen.DocGenConfiguration,System.Guid)~ADEXS.Api.Common.Types.DocGen.DocGenConfigurationResponse\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldConfigurationApplicationService.CreateFieldConfiguration(ADEXS.Api.Common.Types.DocGen.FieldConfiguration)~ADEXS.Api.Common.Types.DocGen.FieldConfigurationResponse\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldConfigurationApplicationService.UpdateFieldConfiguration(System.Guid,ADEXS.Api.Common.Types.DocGen.FieldConfiguration)~ADEXS.Api.Common.Types.DocGen.FieldConfigurationResponse\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationApplicationService.GetFieldsFromFormConfigJson(ADEXS.Core.Domain.Model.FormConfiguration)~System.Collections.Generic.ICollection{ADEXS.Api.Common.Types.DocGen.Field}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.Document)~ADEXS.Core.Domain.Model.Document\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentReminderApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.DocumentReminder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentReminderApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.DocumentReminder)~ADEXS.Core.Domain.Model.DocumentReminder\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ETLApplicationService.PopulateETLOptionsData(ADEXS.Api.Common.Types.DocGen.Field)~ADEXS.Api.Common.Exceptions.ValidationError\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ExternalReviewApplicationService.CompleteExternalReview(ADEXS.Api.Common.Types.Review,System.Guid,System.String)~ADEXS.Api.Common.Types.Review\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ExternalReviewApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.ExternalReview)~ADEXS.Core.Domain.Model.ExternalReview\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ExternalReviewTaskApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.ExternalReview)~ADEXS.Core.Domain.Model.ExternalReview\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.FindOrCreateEosFolder(ADEXS.Api.Common.Types.EosInfo)~ADEXS.Api.Common.Types.Folder\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.Folder)~ADEXS.Core.Domain.Model.Folder\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.GroupApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Group)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.GroupApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.Group)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.GroupApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.Group)~ADEXS.Core.Domain.Model.Group\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.MergeAndConvertService.PerformMergeAndConversions(System.String,ADEXS.Api.Common.Types.Task.DocumentXmlMergeTask)~ADEXS.Api.Common.ApplicationService.DocumentMergeAndConvertResult\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Option)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.TermOption)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.RetrieveDomainItem(System.String)~ADEXS.Core.Domain.Model.TermOption\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.TermOption)~ADEXS.Core.Domain.Model.TermOption\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Party)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.Party)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.PartialUpdate(ADEXS.Api.Common.Types.Party,System.Guid)~ADEXS.Api.Common.Types.Party\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.Party)~ADEXS.Core.Domain.Model.Party\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.Update(ADEXS.Api.Common.Types.Party,System.Guid)~ADEXS.Api.Common.Types.Party\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentExportTaskApplicationService.GetObjectId(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentExportTask)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentExportTaskApplicationService.HandleSuccess(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentExportTask,ADEXS.Core.Domain.Model.QueueItemState)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentExportTaskApplicationService.HasAccessToSfRecord(ADEXS.Salesforce.DTO.UserRecordAccess)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentExportTaskApplicationService.MapTask(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentExportTask)~CLM.MessageDefines.Interfaces.IUserTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentExportTaskApplicationService.ValidateTask(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentExportTask)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentImportTaskApplicationService.GetObjectId(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentImportTask)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentImportTaskApplicationService.HandleSuccess(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentImportTask,ADEXS.Core.Domain.Model.QueueItemState)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentImportTaskApplicationService.HasAccessToSfRecord(ADEXS.Salesforce.DTO.UserRecordAccess)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentImportTaskApplicationService.MapTask(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentImportTask)~CLM.MessageDefines.Interfaces.IUserTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentImportTaskApplicationService.ValidateTask(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentImportTask)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SearchTaskApplicationService.Get(System.Guid,ADEXS.Core.Types.Enums.ObjectType,ADEXS.Api.Common.Types.PageSortParams,System.Collections.Generic.List{System.String})~ADEXS.Api.Common.Types.Task.SearchTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SearchTaskApplicationService.Submit(ADEXS.Api.Common.Types.Task.SearchTask,ADEXS.Core.Types.Enums.ObjectType,ADEXS.Api.Common.Types.PageSortParams,System.Collections.Generic.List{System.String})~ADEXS.Api.Common.Types.Task.SearchTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfAccessService.HasAccess(ADEXS.Core.Domain.Model.UserAccount,System.String,System.Func{ADEXS.Salesforce.DTO.UserRecordAccess,System.Boolean})~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfDocumentQueryApplicationService.FillSfDocumentDataAndMerge(ADEXS.Api.Common.Types.Task.SfDocumentXmlQueryAndMergeTasks)~System.Collections.Generic.List{ADEXS.Api.Common.Types.Task.SfDocumentXmlMergeTask}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfInvoiceApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SfInvoiceTask)~ADEXS.Api.Common.Types.Task.SfInvoiceTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ShareLinkApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.PublicShareLink)~ADEXS.Core.Domain.Model.PublicShareLink\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.TaskService`1.VerifyFolderAccess(ADEXS.Api.Common.Types.Task.DocumentCreationTask)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.User)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.UserAccount)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.SaveDomainItem(ADEXS.Core.Domain.Model.UserAccount)~ADEXS.Core.Domain.Model.UserAccount\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.WorkItemApplicationService.ValidateOutput(ADEXS.Api.Common.Types.WorkItem,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Authentication.DocuSignResourceAuthentication.#ctor(ADEXS.Web.Common.Helpers.IRestAuthenticationParameters)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.ApiCollectionExtensions.BuildUris``1(ADEXS.Api.Common.Types.ApiCollectionBase,System.Guid,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String,System.Type,ADEXS.Core.Types.Enums.UriType)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.ApiCollectionExtensions.BuildUris``1(ADEXS.Api.Common.Types.ApiCollectionBase,System.String,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String,System.String,ADEXS.Core.Types.Enums.UriType)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToActorValue(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToBaseUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToIntId(System.String)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToStringId(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUid(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.AtlasExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.CommaDelimitedCollectionModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.ScimAttributeExtensions.IsScim(System.Web.Http.Controllers.HttpControllerContext)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.ScimFilterHelper.GetApiFilter(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.ScimFilterHelper.GetExternalIdFilter(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Handlers.AddContentTypeHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.SaveMetadata(System.Guid,ADEXS.Core.Types.Enums.ObjectType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType,System.Nullable{System.Boolean})\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ClientHelper.GetBaseValidationErrorsForCommentAndCompletionRights(System.String,ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Core.Types.Enums.WorkflowComment)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ClientHelper.ProcessComment(ADEXS.Core.Types.Enums.WorkflowComment,ADEXS.Api.Common.Types.WorkItem)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.GetExternalProvidersConfigurations(ADEXS.Core.Domain.Model.FormConfiguration)~System.Collections.Generic.List{ADEXS.Api.Common.Types.DocGen.ExternalProvidersConfiguration}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.GetExternalProviderSourceObject(ADEXS.Api.Common.Types.DocGen.FieldConfiguration,ADEXS.Api.Common.Types.DocGen.DataSourceProviderType)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.GetFormConfigFieldFromLibraryField(ADEXS.Api.Common.Types.DocGen.FormConfigField)~ADEXS.Api.Common.Types.DocGen.FormConfigField\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.GetMergeTag(ADEXS.Api.Common.Types.DocGen.Field,System.Boolean,ADEXS.Core.Types.Enums.MergeEngine)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.RetrieveFieldType(ADEXS.Api.Common.Types.DocGen.FormConfigField)~ADEXS.Core.Types.Enums.DocGenFieldType\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.HistoryHelper.GetHistoryItemFromObjectHistory(ADEXS.Core.Domain.Repository.ObjectHistory.IObjectHistoryMessageRenderingRepository,ADEXS.Core.Domain.Model.ObjectHistory)~ADEXS.Api.Common.Types.HistoryItem\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.UserHelper.GetUserAccount(ADEXS.Api.Common.Types.User,ADEXS.Core.Domain.Repository.User.IUserAccountRepository)~ADEXS.Core.Domain.Model.UserAccount\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.SynchronousWork.SynchronousDocMergeService.DoWork(ADEXS.Api.Common.Types.Task.DocumentXmlMergeTask)~ADEXS.Api.Common.SynchronousWork.DocMergeResult\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.ApiCollection`1.FilterSortAndPage(ADEXS.Api.Common.Types.PageSortParams,System.Boolean)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Attribute.#ctor(ADEXS.Core.Domain.Model.Metadata)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.MailingList.op_Implicit(ADEXS.Api.Common.Types.Group)~ADEXS.Api.Common.Types.MailingList\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.CopyTask.PopulateResults(ADEXS.Core.Domain.Model.CopyResults)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.DocumentSearchTaskDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)~System.Object\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ApproveDocumentsClientApiDecorator.Submit(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ApproveDocumentsClientApiDecorator.Validate(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChoiceClientApiDecorator.Submit(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChoiceClientApiDecorator.Validate(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChooseDocumentsClientApiDecorator.GetSelectedUids(ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{System.Guid}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChooseDocumentsClientApiDecorator.Submit(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChooseDocumentsClientApiDecorator.Validate(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChooseUsersClientApiDecorator.Submit(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChooseUsersClientApiDecorator.Validate(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.EditDocumentsClientApiDecorator.Submit(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.EditDocumentsClientApiDecorator.Validate(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.RoutingClientApiDecorator.Submit(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.RoutingClientApiDecorator.Validate(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.GetRecipients(ADEXS.Api.Common.Types.DocumentReminder,ADEXS.Core.Domain.Model.DocumentReminder)~ADEXS.Core.Domain.Model.DocumentReminderRecipients\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.HasRecipientsToMap(ADEXS.Api.Common.Types.DocumentReminder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ChangeSecurityTaskApplicationService.IsValidSecurityAssignment(ADEXS.Core.Types.Enums.UserRole,ADEXS.Api.Common.Types.Securities.Access)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenAceApplicationService.GetFieldNameWithoutPrefix(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenAceApplicationService.GetFieldType(System.String)~ADEXS.Core.Types.Enums.DocGenFieldType\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationApplicationService.GetInnerItemsAsFieldOptions(ADEXS.Api.Common.Types.DocGen.FormConfigField)~System.Collections.Generic.IEnumerable{ADEXS.Api.Common.Types.DocGen.FieldOption}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationApplicationService.SetFormConfigPropertiesForCheckboxField(ADEXS.Api.Common.Types.DocGen.Field,ADEXS.Api.Common.Types.DocGen.FormConfigField)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationApplicationService.SetFormConfigPropertiesForLibraryField(ADEXS.Api.Common.Types.DocGen.FormConfigField,ADEXS.Api.Common.Types.DocGen.Field)~ADEXS.Api.Common.Types.DocGen.FormConfigField\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationValidator.AllValuesAreUnique(System.Collections.Generic.IEnumerable{System.String})~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationValidator.AllValuesMatchRegex(System.String,System.Collections.Generic.IEnumerable{System.String})~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationValidator.InvalidFormatError(System.String,System.String,System.String)~ADEXS.Api.Common.Exceptions.ValidationError\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationValidator.RequiredFieldError(System.String,System.String)~ADEXS.Api.Common.Exceptions.ValidationError\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationValidator.TranslateValidationResultToApiErrors(ADEXS.Api.Common.Types.DocGen.Field,System.String,ADEXS.Core.Domain.Validation.ValidationResult,System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError})\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationValidator.ValidateEnableMergeTagEditingSetting(ADEXS.Api.Common.Types.DocGen.Field,System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError},System.Boolean)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationValidator.ValidateMergeTagNames(ADEXS.Api.Common.Types.DocGen.Field,System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError},System.Collections.Generic.HashSet{System.String})\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ETLApplicationService.InvalidDataFieldMapping(System.String)~ADEXS.Api.Common.Exceptions.ValidationError\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.GetSystemFolderType(System.String)~ADEXS.Core.Types.Enums.SystemFolderType\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.SourceIsInvalid(System.String,ADEXS.Api.Common.Exceptions.ValidationError@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.ValueHasForbiddenCharacters(System.String,System.String,ADEXS.Api.Common.Exceptions.ValidationError@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.ValueHasNullOrEmpty(System.String,System.String,ADEXS.Api.Common.Exceptions.ValidationError@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.ValueHasOverMaxCharacters(System.String,System.String,ADEXS.Api.Common.Exceptions.ValidationError@,System.Int32)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.isValidProcess(ADEXS.Atlas.Workflow.Client.Model.WorkflowDesignClientVersion)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Exceptions.ExceptionParser.GetColumnName(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.AtlasExceptionFilterAttribute.ApplyHeaders(System.Web.Http.Filters.HttpActionExecutedContext,ADEXS.Api.Common.Exceptions.ApiException)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.SynchronousWork.SynchronousPdfToHtmlConversionService.ValidateDocxFormat(ADEXS.Core.Domain.Model.Document)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.SynchronousWork.SynchronousPdfToHtmlConversionService.ValidatePdfFormat(ADEXS.Core.Domain.Model.Document)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Member.HasEditPrivilege~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.User.HasEditPrivilege~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChooseDocumentsClientApiDecorator.GetSelectedUids(ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{System.Guid}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.ApplicationServiceBase`3.Actions\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.ApplicationServiceBase`3.ExpandableProperties\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.ApplicationServiceBase`3.Validators\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.PerformanceMetrics.ConvertToPdfMs\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.PerformanceMetrics.MergeMs\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.SignatureTaskApplicationService._documentRepository\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.TaskService`1._atlasMapper\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.TaskService`1._documentRepository\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.TaskService`1._folderRepository\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.TaskService`1._queueItemStateRepository\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.Helpers.ApiWorkloadBase.DocuSignAccountId\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.Helpers.ApiWorkloadBase.DocuSignUserId\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.Helpers.ApiWorkloadBase.Request\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.Helpers.ApiWorkloadBase.UserAccountUid\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenAceApplicationService.TranslateAomPropertiesToFieldConfiguration(System.Collections.Generic.Dictionary{System.String,System.Object})~System.Collections.Generic.IEnumerable{ADEXS.Api.Common.Types.DocGen.Field}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.WorkflowApplicationService.StartWorkflow(ADEXS.Api.Common.Types.Workflow)~ADEXS.Api.Common.Types.Workflow\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.CommaDelimitedCollectionModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)~System.Boolean\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.HistoryHelper.GetHistoryItemFromObjectHistory(ADEXS.Core.Domain.Repository.ObjectHistory.IObjectHistoryMessageRenderingRepository,ADEXS.Core.Domain.Model.ObjectHistory)~ADEXS.Api.Common.Types.HistoryItem\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.AttributeHelperTests.CreatesFields\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.AttributeHelperTests.CreatesMetadataGroups\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.DocumentConversionApplicationServiceTests.GetTaskStatus_Returns_TaskStatus\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.DocumentConversionApplicationServiceTests.SubmitTask_Submits_To_Task_Queue\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.PartyApplicationServiceTests.GetAllPartiesInAccount\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.PartyApplicationServiceTests.GetAllPartiesInAccountWithPaging\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.TestService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.zzTests.TestDomainType)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentReminderApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentReminderRepository,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository,ADEXS.Core.Domain.Repository.User.IGroupRepository,ADEXS.Core.Domain.Repository.User.IUserAccountRepository,ADEXS.Core.Domain.Repository.User.IContactRepository)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.DocumentRepository.IFolderRepository,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository,ADEXS.Core.Domain.Repository.DocumentRepository.ILogicalFileSystemParseResultFactory,ADEXS.Core.Domain.Search.IElasticsearchRepositoryFactory,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.EOS.IExternalObjectsStorage,ADEXS.Core.Domain.Repository.Share.IShareRepository,ADEXS.Core.Domain.Repository.User.IGroupRepository,ADEXS.Core.Domain.Repository.User.IUserAccountRepository,ADEXS.Core.Domain.Repository.Security.ISecurityRepository,ADEXS.Core.Domain.Repository.CounterpartyRepository.ICounterpartyRepository)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SearchTaskApplicationService.PopulateAttributes(ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.BasicSpringCMObject},ADEXS.Core.Types.Enums.ObjectType,System.Collections.Generic.Dictionary{System.Guid,System.Collections.Generic.IList{ADEXS.ScmElasticCore.Indexing.MetadataIndexModel}})\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToBaseUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToIntId(System.String)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUid(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Handlers.CompressionHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.UserHelper.GetApiUserFromObject(System.Object)~ADEXS.Api.Common.Types.User\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.zzTests.SearchTaskApplicationServiceTests.SearchTest\")]\n[assembly: SuppressMessage(\"Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Web.Common.zzTests.Authentication.DocuSignResourceAuthenticationTests.CreateJwt(System.IdentityModel.Tokens.Jwt.JwtHeader,System.IdentityModel.Tokens.Jwt.JwtPayload,ADEXS.Core.Domain.Model.ResourceTokenPayload,System.Object)~System.String\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.ApplicationService.DataSourceFieldMapping.Relationships\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Attribute.Groups\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Attribute.PicklistValues\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.AttributeSet.Attributes\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Clause.AttributeGroups\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.CompletionCallbackData.DraftIds\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenApplicationServiceResponse.ValidationErrors\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenConfiguration.LaunchActions\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenConfiguration.Templates\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenConfigurationResponse.ValidationErrors\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.Field.ChildFields\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.FieldConfiguration.ExternalProviders\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.FieldConfiguration.Fields\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.FormConfigField.dynamicOptions\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.FormConfigField.Items\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.FormConfigField.Transformers\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.FormConfigRootContainer.Items\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.SalesforceObjectsResponse.SalesforceObjects\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.Transformer.Parameters\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Document.AttributeGroups\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocumentPreview.PageImagesAvailability\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocumentPreview.Pages\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocumentReminder.RecipientAdHocEmails\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.FilterAndSortProperties.FilterContext\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Folder.AttributeGroups\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.PageOverlay.Characters\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.PermissionSet.Permissions\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.PreviewPage.PageOverlays\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Review.AlsoNotify\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.BulkWorkflowTask.Items\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.DocumentResults\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.DocumentsToCopy\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FailedDocuments\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FailedFolders\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FolderResults\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FoldersToCopy\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentMergeTask.DocumentsToMerge\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentSearchTask.AttributeFields\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentSearchTask.AttributeGroups\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentsLoadTask.Documents\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.ExternalReviewTask.AlsoNotify\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfDocumentXmlQueryAndMergeTasks.AdditionalFields\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask.Bcc\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask.Documents\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask.To\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceTask.Invoices\")]\n[assembly: SuppressMessage(\"Design\", \"CA1001:Types that own disposable fields should be disposable\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Web.Common.zzTests.Authentication.DocuSignResourceAuthenticationTests\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.InitializeContactMapper\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.InitializeDocumentMapper\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.InitializeUserMapper\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetLockStatus(System.Guid)~ADEXS.Api.Common.Types.DocumentLock\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.Lock(System.Guid)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.ReleaseLock(System.Guid)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.Unlock(System.Guid,System.String)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToBaseUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToIntId(System.String)~System.Int32\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUid(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Usage\", \"CA1801:Review unused parameters\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceAttachmentImportTaskApplicationService.#ctor(ADEXS.Core.Domain.Repository.IQueueItemStateRepository,ADEXS.Core.Domain.EOS.IExternalObjectsStorage)\")]\n[assembly: SuppressMessage(\"Usage\", \"CA1801:Review unused parameters\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Exceptions.ApiException.#ctor(System.Exception)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1054:Uri parameters should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToBaseUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1054:Uri parameters should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToIntId(System.String)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1054:Uri parameters should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToStringId(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1054:Uri parameters should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUid(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1054:Uri parameters should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetAccountBrandingUrl~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetAccountLogoUrl~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetBrowseDocumentsUrl(System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetCheckinUri(System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetCollectionUri``1(System.Guid,System.String,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String,ADEXS.Core.Types.Enums.UriType)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetCollectionUri``1(System.Guid,System.Type)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetCollectionUri``1(System.Guid,System.Type,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String,ADEXS.Core.Types.Enums.UriType)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetCollectionUri``1(System.String,System.String,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String,ADEXS.Core.Types.Enums.UriType)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetDocGenTemplateUrl(System.Guid,System.Nullable{System.Guid})~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetDownloadUri(System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetGenUriFor(System.String,System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetGenUriFor``1(System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetGenUriFor``1(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetPreviewUrl(System.Int32,System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetScimUriFor(System.String,System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.String,System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.Type)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor(System.Type,System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor``1~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor``1(System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetUriFor``1(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1055:Uri return values should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetWorkItemUrl(System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Security\", \"CA3075:Insecure DTD processing in XML\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.WorkflowApplicationService.StartWorkflow(ADEXS.Api.Common.Types.Workflow)~ADEXS.Api.Common.Types.Workflow\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.DocumentSearchTaskDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)~System.Object\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.DocGen.Field\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Document\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Group\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Security`1\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Task.Task\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.User\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Workflow\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.WorkItem\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IAccountApplicationService.Get(System.Int32,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Account\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IAttributeGroupApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.AttributeGroup\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IChangeSecurityTaskApplicationService.Get(System.Guid)~ADEXS.Api.Common.Types.Task.ChangeSecurityTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IClauseApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Clause\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IContactApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Contact\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocLauncherConfigurationApplicationService.Get(System.String,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.DocLauncherConfiguration\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocumentApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Document\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocumentProcessTrackingTaskApplicationService.Get(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.Task.DocumentProcessTrackingTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocumentReminderApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.DocumentReminder\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocumentsLoadTaskApplicationService.Get(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.Task.DocumentsLoadTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IExternalReviewApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Review\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IExternalReviewTaskApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Task.ExternalReviewTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IFolderApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Folder\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IGroupApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Group\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IPartyApplicationService.Get(System.Guid)~ADEXS.Api.Common.Types.Party\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IPermissionSetApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.PermissionSet\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ISearchTaskApplicationService.Get(System.Guid,ADEXS.Core.Types.Enums.ObjectType,ADEXS.Api.Common.Types.PageSortParams,System.Collections.Generic.List{System.String})~ADEXS.Api.Common.Types.Task.SearchTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IShareLinkApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.ShareLink\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IUserApplicationService.Get(System.String,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.User\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IWorkflowApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.Workflow\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IWorkItemApplicationService.Get(System.Guid,System.Collections.Generic.IEnumerable{System.String})~ADEXS.Api.Common.Types.WorkItem\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.IActivityClientFactory.Get(System.String,ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkflowContext)~ADEXS.Api.Common.Types.WorkflowClient.IApiWorkflowClient\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.Error\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1716:Identifiers should not match keywords\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Option\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.AccessDeniedException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.ApiException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.ApiRateLimitException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.ConflictException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.NotAcceptableException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.NotFoundException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.UnauthorizedException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.ValidationException\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2208:Instantiate argument exceptions correctly\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationApplicationService.GetFieldsFromFormConfigJson(ADEXS.Core.Domain.Model.FormConfiguration)~System.Collections.Generic.ICollection{ADEXS.Api.Common.Types.DocGen.Field}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2208:Instantiate argument exceptions correctly\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentReminderApplicationService.Delete(System.Guid)\")]\n[assembly: SuppressMessage(\"Usage\", \"CA1801:Review unused parameters\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.CanDelete(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.Party)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1819:Properties should not return arrays\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.FormConfigField.data\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1720:Identifier contains type name\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.GetBrowseDocumentsUrl(System.Guid)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1052:Static holder types should be Static or NotInheritable\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.ApiEnums\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2211:Non-constant fields should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.DocGenConfigurationTranslationApplicationService.followUpActionNone\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2211:Non-constant fields should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.Helpers.TaskHelper.NewStatusMap\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2211:Non-constant fields should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.Helpers.TaskHelper.StatusMap\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.ApplicationService.AtlasMapper.BasicObjectResolver\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.ApplicationService.AtlasMapper.DateTimeResolver\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.ApplicationService.AtlasMapper.DocumentProcessTrackingActivityConverter\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.ApplicationService.AtlasMapper.UriResolver\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2237:Mark ISerializable types with serializable\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.ApiException\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1717:Only FlagsAttribute enums should have plural names\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.ErrorCodes\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2225:Operator overloads have named alternates\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.MailingList.op_Implicit(ADEXS.Api.Common.Types.Group)~ADEXS.Api.Common.Types.MailingList\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2225:Operator overloads have named alternates\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Member.op_Implicit(ADEXS.Api.Common.Types.User)~ADEXS.Api.Common.Types.Member\")]\n[assembly: SuppressMessage(\"Design\", \"CA1000:Do not declare static members on generic types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasValidator`1.Validate(`0)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1018:Mark attributes with AttributeUsageAttribute\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Filters.ScimAttribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1810:Initialize reference type static fields inline\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.ScimFilterHelper.#cctor\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.SaveMetadata(System.Guid,ADEXS.Core.Types.Enums.ObjectType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType,System.Nullable{System.Boolean})\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.DocumentSearchTaskDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)~System.Object\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.DocumentSearchTaskDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)~System.Object\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2211:Non-constant fields should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.AtlasMapper.cfg\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2211:Non-constant fields should not be visible\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.AtlasMapper.Configuration\")]\n[assembly: SuppressMessage(\"Security\", \"CA3075:Insecure DTD processing in XML\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.StartWorflowHelper.StartTheWorkflow(ADEXS.Core.Domain.Model.UserAccount,System.String,System.String,ADEXS.Core.Domain.Model.Documents,System.Boolean)~System.Guid\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Account\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Clause\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1724:Type names should not match namespaces\", Justification = \"initial effort to suppress warnings\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.DocGen.Template\")]\n[assembly: SuppressMessage(\"Design\", \"CA1054:Uri parameters should not be strings\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToActorValue(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Usage\", \"CA1801:Review unused parameters\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA1801:Review unused parameters\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.DocumentRepository.IFolderRepository,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository,ADEXS.Core.Domain.Repository.DocumentRepository.ILogicalFileSystemParseResultFactory,ADEXS.Core.Domain.Search.IElasticsearchRepositoryFactory,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.EOS.IExternalObjectsStorage,ADEXS.Core.Domain.Repository.Share.IShareRepository,ADEXS.Core.Domain.Repository.User.IGroupRepository,ADEXS.Core.Domain.Repository.User.IUserAccountRepository,ADEXS.Core.Domain.Repository.Security.ISecurityRepository,ADEXS.Core.Domain.Repository.CounterpartyRepository.ICounterpartyRepository,ADEXS.Core.Domain.Attributes.IAttributesManagementFramework)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.InitializeDocumentReminderMapper(AutoMapper.IMapperConfigurationExpression)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.UriResolver.Resolve(ADEXS.Core.Domain.Model.Base.IModel,ADEXS.Api.Common.Types.BasicSpringCMObject,System.String,AutoMapper.ResolutionContext)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.DocumentSearchTaskDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)~System.Object\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasFilter.ObjectMatchesFilter``1(System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,System.String},``0,System.Boolean,System.Boolean)~System.Boolean\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.AppendPageSort(System.Text.StringBuilder,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String)~System.Text.StringBuilder\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ClauseApplicationService.GetAllClauses(ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.Clause}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.MergeAndConvertService.PerformMergeAndConversions(System.String,ADEXS.Api.Common.Types.Task.DocumentXmlMergeTask)~ADEXS.Api.Common.ApplicationService.DocumentMergeAndConvertResult\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.GetTermDocumentFromOptionUid(System.Guid)~ADEXS.Core.Domain.Model.TermDocument\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfDocumentQueryApplicationService.ValidateQueryAndMergeRequestForClm(ADEXS.Api.Common.Types.Task.SfDocumentXmlQueryAndMergeTasks)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Exceptions.ExceptionParser.GetColumnName(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Exceptions.ExceptionParser.GetExceptionMessage(System.Exception)~ADEXS.Api.Common.Exceptions.ApiException\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.AtlasExceptionFilterAttribute.GetApiException(System.Web.Http.Filters.HttpActionExecutedContext)~ADEXS.Api.Common.Exceptions.ApiException\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Handlers.RequestLoggingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.DocGen.NumberFormat.GetHashCode~System.Int32\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String,System.String,System.String)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.DocumentRepository.IFolderRepository,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository,ADEXS.Core.Domain.Repository.DocumentRepository.ILogicalFileSystemParseResultFactory,ADEXS.Core.Domain.Search.IElasticsearchRepositoryFactory,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.EOS.IExternalObjectsStorage,ADEXS.Core.Domain.Repository.Share.IShareRepository,ADEXS.Core.Domain.Repository.User.IGroupRepository,ADEXS.Core.Domain.Repository.User.IUserAccountRepository,ADEXS.Core.Domain.Repository.Security.ISecurityRepository,ADEXS.Core.Domain.Repository.CounterpartyRepository.ICounterpartyRepository,ADEXS.Core.Domain.Attributes.IAttributesManagementFramework)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.SalesForcePersonaSyncHelper.TrySyncUserPersona(ADEXS.Core.Domain.Model.UserAccount,System.String)~ADEXS.Api.Common.Helpers.PersonaSyncStatus\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.StartWorflowHelper.StartTheWorkflow(ADEXS.Core.Domain.Model.UserAccount,System.String,System.String,ADEXS.Core.Domain.Model.Documents,System.Boolean)~System.Guid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.SaveMetadata(System.Guid,ADEXS.Core.Types.Enums.ObjectType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType,System.Nullable{System.Boolean})\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.DocumentSearchTaskDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)~System.Object\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.SaveMetadata(System.Guid,ADEXS.Core.Types.Enums.ObjectType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType,System.Nullable{System.Boolean})\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Task.DocumentSearchTaskDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)~System.Object\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertMetadatasToAttributeGroup(ADEXS.Core.Domain.Model.Metadatas)~Newtonsoft.Json.Linq.JObject\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String,System.String,System.String)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"initial effort to suppress warnings\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ApiStringParsers.ParseNameValuePairs(System.String,System.Boolean@)~System.Collections.Specialized.NameValueCollection\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.ApplicationService.DocLauncherTaskApplicationService._ErrorsMap\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.Api.Common.Types.PageSortParams._pagedInRepository\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AccountApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Account)~System.Boolean\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ApplicationServiceBase`3.Create(`1)~`1\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ApplicationServiceBase`3.TryGetIdentifier(`0,`2@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasFilter.FilterAndSort``1(System.Collections.Generic.List{``0},ADEXS.Api.Common.Types.PageSortParams)~System.Collections.Generic.List{``0}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.GetRecipients(ADEXS.Api.Common.Types.DocumentReminder,ADEXS.Core.Domain.Model.DocumentReminder)~ADEXS.Core.Domain.Model.DocumentReminderRecipients\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.GetRecipients(ADEXS.Api.Common.Types.DocumentReminder,ADEXS.Core.Domain.Model.DocumentReminder)~ADEXS.Core.Domain.Model.DocumentReminderRecipients\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.InitializeAccountMapper(AutoMapper.IMapperConfigurationExpression)\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasMapper.InitializeAccountMapper(AutoMapper.IMapperConfigurationExpression)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.AdjustPartForVersion2(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1847:Use char literal for a single character lookup\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.AppendPageSort(System.Text.StringBuilder,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String)~System.Text.StringBuilder\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1834:Consider using 'StringBuilder.Append(char)' when applicable\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasUriBuilder.AppendPageSort(System.Text.StringBuilder,System.Int32,System.Int32,System.String,ADEXS.Api.Common.Types.SortDirection,System.String)~System.Text.StringBuilder\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AtlasValidator`1.Validate(`0)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AttributeGroupApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository)\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AttributeGroupApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AttributeGroupApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.AttributeGroup)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.AttributeGroupApplicationService.FillInActorData(ADEXS.Core.Domain.Model.Metadata,ADEXS.Api.Common.Types.Attribute)~ADEXS.Api.Common.Types.Attribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.BulkWorkflowTaskApplicationService.GetBulkJobExpandList(System.Collections.Generic.List{System.String})~System.Collections.Generic.List{System.String}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ChangeSecurityTaskApplicationService.CreateExplicitSecurity(ADEXS.Core.Domain.Model.Folder)~ADEXS.Core.Domain.Model.ExplicitSecurity\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ClauseApplicationService.TranslateToApiValidationMessage(System.Collections.Generic.List{ADEXS.Core.Domain.Repository.Term.SaveTermValidationResult})\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ClmConversionApplicationService.ValidateRequest~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1849:Call async methods when in an async method\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.CollaborationService.ReplyAsync(System.Guid,System.Guid,System.String)~System.Threading.Tasks.Task{System.Boolean}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1849:Call async methods when in an async method\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.CollaborationService.ResolveAsync(System.Guid,System.Guid)~System.Threading.Tasks.Task{System.Boolean}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ContactApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Contact)~System.Boolean\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ContactApplicationService.CanUpdate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.Contact)~System.Boolean\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.CopyTaskApplicationService.GetTaskStatus(System.Guid)~ADEXS.Api.Common.Types.Task.CopyTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.CopyTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.CopyTask)~ADEXS.Api.Common.Types.Task.CopyTask\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenAceApplicationService.AddField(ADEXS.Api.Common.Types.DocGen.Field,System.Collections.Generic.List{ADEXS.Api.Common.Types.DocGen.Field})\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenAceApplicationService.TranslateAomPropertiesToFieldConfiguration(System.Collections.Generic.Dictionary{System.String,System.Object})~System.Collections.Generic.IEnumerable{ADEXS.Api.Common.Types.DocGen.Field}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenConfigurationApplicationService.ParseValidationErrors(ADEXS.Core.Domain.Repository.DocLauncherConfig.DocLauncherConfigSaveResult,ADEXS.Core.Domain.Model.DocLauncherConfig.DocLauncherConfig)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenConfigurationApplicationService.RetrieveDomainItem(System.Guid)~ADEXS.Core.Domain.Model.DocLauncherConfig.DocLauncherConfig\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenConfigurationApplicationService.UpdateDocGenConfiguration(ADEXS.Api.Common.Types.DocGen.DocGenConfiguration,System.Guid)~ADEXS.Api.Common.Types.DocGen.DocGenConfigurationResponse\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocGenFieldTranslationApplicationService.GetInnerItemsAsFieldOptions(ADEXS.Api.Common.Types.DocGen.FormConfigField)~System.Collections.Generic.IEnumerable{ADEXS.Api.Common.Types.DocGen.FieldOption}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocLauncherTaskApplicationService.ConvertToApiValidationError(ADEXS.Core.Domain.Repository.DocumentLauncherData.DocumentLauncherDataSaveResult.ErrorTypes)~ADEXS.Api.Common.Exceptions.ValidationError\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Document)~System.Boolean\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentCompareApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.DocumentCompareTask)~ADEXS.Api.Common.Types.Task.DocumentCompareTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentConversionApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.DocumentConversionTask)~ADEXS.Api.Common.Types.Task.DocumentConversionTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentMergeTaskApplicationService.GetTaskStatus(System.Guid)~ADEXS.Api.Common.Types.Task.DocumentMergeTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentMergeTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.DocumentMergeTask)~ADEXS.Api.Common.Types.Task.DocumentMergeTask\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentProcessTrackingTaskApplicationService.GetResults(ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.DocumentProcessTrackingActivity},ADEXS.Api.Common.Types.Task.DocumentProcessTrackingTask,ADEXS.Api.Common.Types.PageSortParams@)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentReminderApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.DocumentReminder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentReminderApplicationService.ValidateEmailAddress(System.String,System.String,System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError})~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentsLoadTaskApplicationService.Get(System.Collections.Generic.List{System.Guid},ADEXS.Api.Common.Types.PageSortParams,System.Guid)~ADEXS.Api.Common.Types.Task.DocumentsLoadTask\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentXmlMergeTaskApplicationService.OnSyncTaskSending(CLM.MessageDefines.CommonTask)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentXmlMergeTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.DocumentXmlMergeTask)~ADEXS.Api.Common.Types.Task.DocumentXmlMergeTask\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ETLApplicationService.GetFieldOptionsFromField(ADEXS.Salesforce.SfSoap.Field)~System.Collections.Generic.List{ADEXS.Api.Common.Types.DocGen.FieldOption}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ETLApplicationService.SalesforceMisconfiguredError~ADEXS.Api.Common.Exceptions.ValidationError\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1827:Do not use Count() or LongCount() when Any() can be used\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ExternalReviewApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.ExternalReview.IExternalReviewRepository,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository,ADEXS.Core.Domain.Repository.ICommonRepository,ADEXS.Core.Domain.Repository.ExternalDataMapRepository.IExternalDataMapRepository,ADEXS.Core.Domain.Repository.Negotiation.INegotiationApiClient)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ExternalReviewApplicationService.GetUploadResults(ADEXS.Api.Common.Types.Review)~System.Collections.Generic.Dictionary{System.Guid,ADEXS.Core.Domain.Model.ExternalReview.UploadResult}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1827:Do not use Count() or LongCount() when Any() can be used\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ExternalReviewTaskApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository,ADEXS.Core.Domain.Repository.ExternalReview.IExternalReviewRepository)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1829:Use Length/Count property instead of Count() when available\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ExternalReviewTaskApplicationService.GetDocuments(ADEXS.Core.Domain.Model.UserAccount,System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.Document}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Folder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1829:Use Length/Count property instead of Count() when available\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderApplicationService.GetDocuments(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.Document}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderArchiveTaskApplicationService.BuildArchiveIDString(ADEXS.Api.Common.Types.Task.FolderArchiveTask)~System.String\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.FolderArchiveTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.FolderArchiveTask)~ADEXS.Api.Common.Types.Task.FolderArchiveTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.GroupApplicationService.CanCreate(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Api.Common.Types.Group)~System.Boolean\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.GroupApplicationService.GetAllGroupMembers(System.Guid)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.User}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.GroupApplicationService.GetGroupMembers(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.User}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocGenConfigurationApplicationService.GetAllDocGenConfigurations~System.Collections.Generic.List{ADEXS.Api.Common.Types.DocGen.DocGenConfiguration}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocGenConfigurationApplicationService.GetAllDocGenConfigurationTemplates(System.Guid)~System.Collections.Generic.List{ADEXS.Api.Common.Types.DocGen.Template}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocGenFieldTranslationValidator.ValidateFieldConfiguration(ADEXS.Api.Common.Types.DocGen.FieldConfiguration)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IDocGenFieldTranslationValidator.ValidateFields(System.Collections.Generic.ICollection{ADEXS.Api.Common.Types.DocGen.Field})~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ISearchTaskApplicationService.Get(System.Guid,ADEXS.Core.Types.Enums.ObjectType,ADEXS.Api.Common.Types.PageSortParams,System.Collections.Generic.List{System.String})~ADEXS.Api.Common.Types.Task.SearchTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ISearchTaskApplicationService.Submit(ADEXS.Api.Common.Types.Task.SearchTask,ADEXS.Core.Types.Enums.ObjectType,ADEXS.Api.Common.Types.PageSortParams,System.Collections.Generic.List{System.String})~ADEXS.Api.Common.Types.Task.SearchTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ISearchTaskApplicationService.Submit(ADEXS.Api.Common.Types.Task.SearchTask,ADEXS.Core.Types.Enums.ObjectType,System.Collections.Generic.List{System.String})~ADEXS.Api.Common.Types.Task.SearchTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ISfDocumentQueryApplicationService.FillSfDocumentDataAndMerge(ADEXS.Api.Common.Types.Task.SfDocumentXmlQueryAndMergeTasks)~System.Collections.Generic.List{ADEXS.Api.Common.Types.Task.SfDocumentXmlMergeTask}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.IWorkItemApplicationService.ValidateOutput(ADEXS.Api.Common.Types.WorkItem,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.Delete(System.Guid)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.GetClauseUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.GetOptionUidFromComposite(System.String)~System.Guid\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.RetrieveDomainItem(System.String)~ADEXS.Core.Domain.Model.TermOption\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.OptionApplicationService.TranslateToApiValidationMessage(System.Collections.Generic.List{ADEXS.Core.Domain.Repository.Term.SaveTermValidationResult})\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.CanDelete(ADEXS.Core.Domain.Model.UserAccount,ADEXS.Core.Domain.Model.Party)~System.Boolean\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.PartialUpdate(ADEXS.Api.Common.Types.Party,System.Guid)~ADEXS.Api.Common.Types.Party\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.Save(ADEXS.Api.Common.Types.Party)~ADEXS.Api.Common.Types.Party\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.Update(ADEXS.Api.Common.Types.Party,System.Guid)~ADEXS.Api.Common.Types.Party\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.PartyApplicationService.VerifyAdmReadWriteSettings(ADEXS.Core.Domain.Model.UserAccount)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.CreateProcessData(System.Guid,ADEXS.Core.Domain.Model.Workflow.Version)~ADEXS.Core.Domain.Model.WorkflowProcess\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.isValidProcess(ADEXS.Atlas.Workflow.Client.Model.WorkflowDesignClientVersion)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceActionMenusService.GetLocalizedStandardActionGroup(System.String,System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.SalesforceActions.SalesforceActionMenu.StandardAction})~ADEXS.Core.Domain.Model.SalesforceActions.SalesforceActionMenu.StandardActionGroup\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceActionMenusService.LoadSalesforceActionMenus~ADEXS.Core.Domain.Model.SalesforceActions.SalesforceActionMenu.SalesforceActions\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1829:Use Length/Count property instead of Count() when available\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceActionMenusService.LoadSalesforceActionMenus~ADEXS.Core.Domain.Model.SalesforceActions.SalesforceActionMenu.SalesforceActions\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceAttachmentImportTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SalesforceAttachmentImportTask)~ADEXS.Api.Common.Types.Task.SalesforceAttachmentImportTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentImportTaskApplicationService.ValidateTask(ADEXS.Api.Common.Types.Task.SalesforceContentDocumentImportTask)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SearchTaskApplicationService.BuildLocationSearch(ADEXS.Api.Common.Types.Task.SearchTask)~ADEXS.Core.Domain.Search.LocationSearch\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SearchTaskApplicationService.GetAttributeValues(ADEXS.Core.Types.Enums.DataType,ADEXS.ScmElasticCore.Indexing.MetadataIndexModel)~System.Collections.Generic.IEnumerable{System.String}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfDocumentMergeApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SfDocumentXmlMergeTask)~ADEXS.Api.Common.Types.Task.SfDocumentXmlMergeTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfDocumentMergePreviewApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SfDocumentXmlMergePreviewTask)~ADEXS.Api.Common.Types.Task.SfDocumentXmlMergePreviewTask\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfDocumentQueryApplicationService.GenerateSalesForceRequestSchema(ADEXS.Api.Common.Types.Task.SfDocumentXmlQueryAndMergeTasks,ADEXS.Salesforce.DTO.SFAuthorization)~ADEXS.Core.Domain.Javelin.SalesForceRequestSchema\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfDocumentQueryApplicationService.ValidateQueryAndMergeRequest(ADEXS.Api.Common.Types.Task.SfDocumentXmlQueryAndMergeTasks)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SfInvoiceEmailApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask)~ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SignatureTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SignatureTask)~ADEXS.Api.Common.Types.Task.SignatureTask\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SignatureTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SignatureTask)~ADEXS.Api.Common.Types.Task.SignatureTask\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SignatureTaskApplicationService.ValidateEmails(ADEXS.Api.Common.Types.Task.SignatureTask)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.SplitDocumentTaskApplicationService.SubmitTask(ADEXS.Api.Common.Types.Task.SplitDocumentTask)~ADEXS.Api.Common.Types.Task.SplitDocumentTask\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.TaskService`1.VerifyFolderAccess(ADEXS.Api.Common.Types.Task.DocumentCreationTask)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.#ctor(ADEXS.Api.Common.ApplicationService.IAtlasMapper,ADEXS.Core.Domain.Repository.User.IUserAccountRepository,ADEXS.Core.Domain.Repository.AddressBook.IAddressBookRepository,ADEXS.Core.Domain.Repository.User.IGroupRepository,ADEXS.Core.Domain.Repository.ICountryRepository,ADEXS.Core.Domain.Repository.IProvinceStateRepository,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentScopeRepository,ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository,ADEXS.Core.Domain.Repository.User.ILoginRepository,ADEXS.Core.Domain.Repository.User.ICustomUserRoleRepository)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.GetManagedUsers(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.User}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.GetPermissionSets(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.PermissionSet}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.GetRecentDocuments(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.Document}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1829:Use Length/Count property instead of Count() when available\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.GetWorkflowActivities(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.WorkItem}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.GetWorkflowActivities(System.Guid,ADEXS.Api.Common.Types.PageSortParams)~ADEXS.Api.Common.Types.ApiCollection{ADEXS.Api.Common.Types.WorkItem}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.ParseRoleAndValidate(System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError},ADEXS.Api.Common.Types.User)~ADEXS.Core.Types.Enums.UserRole\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.UserApplicationService.RetrieveDomainItem(System.Guid)~ADEXS.Core.Domain.Model.UserAccount\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.WorkflowApplicationService.StartWorkflow(ADEXS.Api.Common.Types.Workflow)~ADEXS.Api.Common.Types.Workflow\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1310:Specify StringComparison for correctness\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.WorkflowApplicationService.StartWorkflow(ADEXS.Api.Common.Types.Workflow)~ADEXS.Api.Common.Types.Workflow\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.WorkflowQueueApplicationService.RetrieveDomainItem(System.Guid)~ADEXS.Core.Domain.Model.Workflow.WorkerPool\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Authentication.DocuSignResourceAuthentication.#ctor(System.String,System.Guid,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Authentication.DocuSignResourceAuthentication.Authenticate~System.Boolean\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Authentication.DocuSignResourceAuthentication.Authenticate~System.Boolean\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Exceptions.ExceptionParser.GetExceptionMessage(System.Exception)~ADEXS.Api.Common.Exceptions.ApiException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Exceptions.ValidationException.#ctor(System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError})\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Extensions.UriExtensions.ToActorValue(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.AtlasExceptionFilterAttribute.GetApiException(System.Web.Http.Filters.HttpActionExecutedContext)~ADEXS.Api.Common.Exceptions.ApiException\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.AtlasExceptionFilterAttribute.LogDataPoints(System.Web.Http.Filters.HttpActionExecutedContext)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1310:Specify StringComparison for correctness\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.CommaDelimitedCollectionModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1829:Use Length/Count property instead of Count() when available\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.ScimFilterHelper.getPropertyAndValue(System.String)~System.Tuple{System.String,System.String}\")]\n[assembly: SuppressMessage(\"Reliability\", \"CA2016:Forward the 'CancellationToken' parameter to methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Handlers.RequestLoggingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)~System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1847:Use char literal for a single character lookup\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ApiStringParsers.ParseNameValuePairs(System.String,System.Boolean@)~System.Collections.Specialized.NameValueCollection\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.ClientHelper.GetBaseValidationErrorsForCommentAndCompletionRights(System.String,ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Core.Types.Enums.WorkflowComment)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.DocGenFieldTranslationHelper.GenerateTrackName(System.String,System.Boolean,System.Boolean)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.IDocGenFieldTranslationHelper.GetExternalProvidersConfigurations(ADEXS.Core.Domain.Model.FormConfiguration)~System.Collections.Generic.List{ADEXS.Api.Common.Types.DocGen.ExternalProvidersConfiguration}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.SalesForcePersonaSyncHelper.SyncUserPersona(ADEXS.Core.Domain.Model.UserAccount,System.String)~ADEXS.Api.Common.Helpers.PersonaSyncStatus\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.UserHelper.GetUserRoleFromRoleString(System.String,ADEXS.Core.Types.Enums.UserRoleNameType)~ADEXS.Core.Types.Enums.UserRole\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.UserHelper.IsRoleStringValid(System.String,ADEXS.Core.Types.Enums.UserRoleNameType)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.SynchronousWork.SynchronousPdfToHtmlConversionService.DetermineHtmlConversionInputFormat(ADEXS.Core.Domain.Model.Document)~ADEXS.Core.Domain.Repository.Html.HtmlConversionInputFormat\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2249:Consider using 'string.Contains' instead of 'string.IndexOf'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.SynchronousWork.SynchronousPdfToHtmlConversionService.DetermineHtmlConversionInputFormat(ADEXS.Core.Domain.Model.Document)~ADEXS.Core.Domain.Repository.Html.HtmlConversionInputFormat\")]\n[assembly: SuppressMessage(\"Design\", \"CA1019:Define accessors for attribute arguments\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Attributes.RegexMatchAttribute.#ctor(System.String)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.DocGen.CurrencyFormat.GetNumericFieldFormat~ADEXS.Api.Common.Types.DocGen.NumericFieldFormat\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.DocGen.NumberFormat.Equals(ADEXS.Api.Common.Types.DocGen.NumberFormat)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.DocGen.NumberFormat.GetNumericFieldFormat~ADEXS.Api.Common.Types.DocGen.NumericFieldFormat\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.DocGen.NumericFieldFormat.GetDigitGroupingIndex~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1834:Consider using 'StringBuilder.Append(char)' when applicable\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.DocGen.NumericFieldFormat.GetFormatForNumericFormatTransformer~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.Interfaces.IValidate.Validate``1(``0,System.String)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.PageSortParams.GetFilterAndSortProperties~ADEXS.Api.Common.Types.FilterAndSortProperties\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.PageSortParams.GetFilterAndSortProperties~ADEXS.Api.Common.Types.FilterAndSortProperties\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.User.GetFullName~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.User.GetMiddleName~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.User.GetSuffix~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ChooseDocumentsClientApiDecorator.GetSelectedUids(ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{System.Guid}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.DefaultWorkflowClient.GetSelections~ADEXS.Api.Common.Types.WorkItemSelection\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.ExternalReviewClientDecorator.GetSelections~ADEXS.Api.Common.Types.WorkItemSelection\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.FillFormClientApiDecorator.GetSelections~ADEXS.Api.Common.Types.WorkItemSelection\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.IApiWorkflowClient.Validate(ADEXS.Core.Domain.Repository.Workflow.Interfaces.IWorkItem,ADEXS.Api.Common.Types.WorkItem)~System.Collections.Generic.List{ADEXS.Api.Common.Exceptions.ValidationError}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1024:Use properties where appropriate\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Types.WorkflowClient.SendForSignatureClientDecorator.GetSelections~ADEXS.Api.Common.Types.WorkItemSelection\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Exceptions.ValidationException.ValidationErrors\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Attribute.Groups\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Attribute.PicklistValues\")]\n[assembly: SuppressMessage(\"Design\", \"CA1019:Define accessors for attribute arguments\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Attributes.SortableAttribute.DBColumnName\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.AttributeSet.Attributes\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.CompletionCallbackData.DraftIds\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenApplicationServiceResponse.ValidationErrors\")]\n[assembly: SuppressMessage(\"Reliability\", \"CA2011:Avoid infinite recursion\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenConfiguration.Href\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenConfiguration.LaunchActions\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenConfiguration.Templates\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocGen.DocGenConfigurationResponse.ValidationErrors\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocumentPreview.PageImagesAvailability\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocumentPreview.Pages\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.DocumentReminder.RecipientAdHocEmails\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.PageOverlay.Characters\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.PermissionSet.Permissions\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.PreviewPage.PageOverlays\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Review.AlsoNotify\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.BulkWorkflowTask.Items\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.DocumentResults\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.DocumentsToCopy\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FailedDocuments\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FailedFolders\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FolderResults\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.CopyTask.FoldersToCopy\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentMergeTask.DocumentsToMerge\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentSearchTask.AttributeFields\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentSearchTask.AttributeGroups\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.DocumentsLoadTask.Documents\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.ExternalReviewTask.AlsoNotify\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask.Bcc\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask.Documents\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceEmailTask.To\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Types.Task.SfInvoiceTask.Invoices\")]\n[assembly: SuppressMessage(\"Design\", \"CA1012:Abstract types should not have public constructors\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.ApplicationService.SalesforceContentDocumentTaskApplicationService`1\")]\n[assembly: SuppressMessage(\"Design\", \"CA1008:Enums should have zero value\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Exceptions.ErrorCodes\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Filters.ApiAuditedRequestAttribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Filters.AtlasExceptionFilterAttribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Filters.ScimAttribute\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1711:Identifiers should not have incorrect suffix\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.ApiCollection`1\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1711:Identifiers should not have incorrect suffix\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Attribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Attributes.DefaultSortAttribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Attributes.FilterableAttribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Attributes.NotNullAttribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Attributes.RegexMatchAttribute\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Attributes.SortableAttribute\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1711:Identifiers should not have incorrect suffix\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.BaseAttribute\")]\n[assembly: SuppressMessage(\"Design\", \"CA1008:Enums should have zero value\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Securities.Access\")]\n[assembly: SuppressMessage(\"Design\", \"CA1008:Enums should have zero value\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.Task.DocumentMergeStopProcessingReason\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1711:Identifiers should not have incorrect suffix\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.Api.Common.Types.WorkflowQueue\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1019:Define accessors for attribute arguments\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute.#ctor(ADEXS.Core.Types.Enums.LoginAccessPoint)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute.GetClientIpAddress(System.Net.Http.HttpRequestMessage)~System.String\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1813:Avoid unsealed attributes\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.API.Common.Filters.DocuSignUserTokenAuthorizationFilterAttribute\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.ConvertAttributeGroupsToMetadatas(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository,ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldRepository,ADEXS.Core.Domain.Repository.AgreementRepository.AgreementMetadataHelper,ADEXS.Api.Common.ApplicationService.ActionType)~ADEXS.Core.Domain.Model.Metadatas\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.DocumentApplicationService.GetCsvData(System.Guid,System.String)~Newtonsoft.Json.Linq.JArray\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetProcessDataFromDefinition(Newtonsoft.Json.Linq.JObject,System.String@,System.String@,System.String@)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.ApplicationService.ProcessDefinitionService.GetStepNumberNumberFromDefinition(Newtonsoft.Json.Linq.JObject)~System.Int32\")]\n[assembly: SuppressMessage(\"Build\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2251:Use 'string.Equals'\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Helpers.AttributeHelper.CreateMetadatasFromSetAttribute(Newtonsoft.Json.Linq.JObject,ADEXS.Core.Domain.Model.Metadatas,System.Int32,ADEXS.Api.Common.ApplicationService.ActionType)~System.Collections.Generic.IEnumerable{ADEXS.Core.Domain.Model.Metadata}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.BaseRateLimitFilter.GetCount(System.String,System.Int32,System.Boolean)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Intentional catch of general exception for broad logging purposes and to ensure continuity in response header creation, without letting exceptions disrupt the flow.\", Scope = \"member\", Target = \"~M:ADEXS.API.Common.Filters.BaseRateLimitFilter.CreateRateLimitResponseHeaders(System.String,System.Int32,System.Int32)~System.Collections.Generic.Dictionary{System.String,System.String}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.Api.Common.Filters.ScmSignatureAuthenticationHandler.HandleAuthenticateAsync~System.Threading.Tasks.Task{Microsoft.AspNetCore.Authentication.AuthenticateResult}\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1819:Properties should not return arrays\", Justification = \"<Suppressing due to not having an alternative at the moment, has to be fixed if refactored>\", Scope = \"member\", Target = \"~P:ADEXS.Api.Common.Helpers.SalesforceHelpers.Models.Fieldmapping.path\")]\n",
            "relevance_score": 100,
            "reasoning": "Contains method call: SetAttribute (33 times)"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer/SFTPSession.cs",
            "content": "\ufeffusing System;\nusing System.IO;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Util.Diagnostic;\nusing ADEXS.Core.Util.Loggers;\nusing SBSftpServer;\nusing SBSSHHandlers;\nusing SBSftpHandler;\nusing SBSSHCommon;\nusing SBSftpCommon;\n\nnamespace ADEXS.SFTPServer\n{\n\t/// <summary>\n\t/// Responsible for a single SFTP session (processing ElSFTPServer requests, accessing file system)\n\t/// </summary>\n\tpublic partial class SFTPSession\n\t{\n        private Guid ROOT_FOLDER_ID = Guid.Empty;\n\n        private static readonly IDiscreetLogger _log = DiscreetLogger.GetLogger(typeof(SFTPSession));\n\n        private SSHSession _sshSession; // the ssh session that instantiated this subsytem\n        private int _id;    // the id of this connection\n\n        private TElSSHSubsystemThread _thread;\n\n        public SFTPSession(SSHSession sshSession, TElSSHTunnelConnection conn)\n\t\t{\n            Debug.assert(null != sshSession);\n            Debug.assert(null != conn);\n\n            _sshSession = sshSession;\n            _id = _sshSession.Id;\n\n            conn.OnError +=new TSSHErrorEvent(Tunnel_OnError);\n\n\t\t\t_thread = new TElSSHSubsystemThread(new TElSFTPSSHSubsystemHandler(conn, true), conn, true);\n\t\t\tTElSFTPSSHSubsystemHandler handler = (TElSFTPSSHSubsystemHandler) _thread.Handler;\n\n\t\t\thandler.Server.OnClose += new SBUtils.TNotifyEvent(Server_OnClose);\n\t\t\thandler.Server.OnCloseHandle += new TElSFTPServerCloseHandleEvent(Server_OnCloseHandle);\n\t\t\thandler.Server.OnCreateDirectory += new TElSFTPServerCreateDirectoryEvent(Server_OnCreateDirectory);\n\t\t\thandler.Server.OnError += new TSBSftpErrorEvent(Server_OnError);\n\t\t\thandler.Server.OnFindClose += new TElSFTPServerFindCloseEvent(Server_OnFindClose);\n\t\t\thandler.Server.OnFindFirst += new TElSFTPServerFindFirstEvent(Server_OnFindFirst);\n\t\t\thandler.Server.OnFindNext += new TElSFTPServerFindNextEvent(Server_OnFindNext);\n\t\t\thandler.Server.OnOpen += new SBUtils.TNotifyEvent(Server_OnOpen);\n\t\t\thandler.Server.OnOpenFile += new TElSFTPServerOpenFileEvent(Server_OnOpenFile);\n\t\t\thandler.Server.OnReadFile += new TElSFTPServerReadEvent(Server_OnReadFile);\n\t\t\thandler.Server.OnRemove += new TElSFTPServerRemoveEvent(Server_OnRemove);\n\t\t\thandler.Server.OnRenameFile += new TElSFTPServerRenameFileEvent(Server_OnRenameFile);\n\t\t\thandler.Server.OnRequestAbsolutePath += new TElSFTPServerRequestAbsolutePathEvent(Server_OnRequestAbsolutePath);\n\t\t\thandler.Server.OnRequestAttributes += new TElSFTPServerRequestAttributesEvent(Server_OnRequestAttributes);\n\t\t\thandler.Server.OnWriteFile += new TElSFTPServerWriteEvent(Server_OnWriteFile);\n\n            // unhandled events. these are mainly to identify if clients call them\n            handler.Server.OnBlock += new TElSFTPServerBlockEvent(Server_OnBlock);\n            handler.Server.OnCreateHardLink += new TElSFTPServerCreateHardLinkEvent(Server_OnCreateHardLink);\n            handler.Server.OnCreateSymLink += new TElSFTPServerCreateSymLinkEvent(Server_OnCreateSymLink);\n            handler.Server.OnExtendedRequest +=new TElSFTPServerExtendedRequestEvent(Server_OnExtendedRequest);\n            handler.Server.OnReadSymLink +=new TElSFTPServerReadSymLinkEvent(Server_OnReadSymLink);\n            handler.Server.OnRequestAttributes2 +=new TElSFTPServerRequestAttributes2Event(Server_OnRequestAttributes2);\n            handler.Server.OnSetAttributes += new TElSFTPServerSetAttributesEvent(Server_OnSetAttributes);\n            handler.Server.OnSetAttributes2 +=new TElSFTPServerSetAttributes2Event(Server_OnSetAttributes2);\n            handler.Server.OnTextSeek += new TElSFTPServerTextSeekEvent(Server_OnTextSeek);\n            handler.Server.OnUnblock +=new TElSFTPServerUnblockEvent(Server_OnUnblock);\n            handler.Server.OnVersionChange +=new TElSftpServerVersionChangeEvent(Server_OnVersionChange);\n\n            _sshSession.OnSSHClosed += new SSHSession.SSHClosedHandler(OnSSHClosed);\n\n            // these two seems are handled by the library\n            // handler.Server.OnReceive +=new TElSFTPServerReceiveEvent(Server_OnReceive);\n            // handler.Server.OnSend +=new TElSFTPServerSendEvent(Server_OnSend);\n\n\t\t\thandler.Server.Versions = SBSftpCommon.Unit.sbSFTP3 | SBSftpCommon.Unit.sbSFTP4  | SBSftpCommon.Unit.sbSFTP5 | SBSftpCommon.Unit.sbSFTP6;\n\t        handler.Server.UseUTF8 = true;\n\n            _log.DebugNoPII($\"{_id}: SFTP subsystem started.\");\n\t\t\t_thread.Resume();\n\t\t\tAtlasContext.Current.UserAccount = _sshSession.UserAccount;\n\t\t}\n\n        void Tunnel_OnError(object Sender, int ErrorCode)\n        {\n            _log.DebugNoPII($\"{_id}: Tunnel error {ErrorCode}.\");\n        }\n\n        ~SFTPSession()\n        {\n            DisposeAllHandles();\n            _log.InfoNoPII($\"{_id}: SFTP Session object destructed.\");\n        }\n\n\t\t/// <summary>\n\t\t/// Is fired when the SFTP connection is gracefully closed\n\t\t/// </summary>\n\t\t/// <param name=\"Sender\">ElSFTPServer object</param>\n\t\tprivate void Server_OnClose(object Sender)\n\t\t{\n\t\t\tAtlasContext.Current.UserAccount = null;\n\n\t\t\t_log.InfoNoPII($\"{_id}: SFTP subsystem closing via OnClose.\");\n            //OnSSHClosed();\n\t\t\tDisposeAllHandles();\n\t\t\tUnsubscribeEvents();\n\t\t}\n\n        // I don't get the above notification. So I'll use this one\n        private void OnSSHClosed()\n        {\n\t        AtlasContext.Current.UserAccount = null;\n\n\t        _log.InfoNoPII($\"{_id}: SFTP subsystem closing via SSH session.\");\n\t        //DisposeAllHandles();\n\t        ((TElSFTPSSHSubsystemHandler)_thread.Handler).Server.Close();\n\t        if (Utils.ShouldDisposeSSHServer())\n\t        {\n\t\t        ((TElSFTPSSHSubsystemHandler)_thread.Handler).Server.Dispose();\n\t        }\n\t        //UnsubscribeEvents();\n        }\n\n/**/\n        private void UnsubscribeEvents()\n        {\n\t        if (_thread.Handler.Connection != null)\n\t        {\n\t\t        _thread.Handler.Connection.OnError -= Tunnel_OnError;\n\t        }\n\n\t        TElSFTPSSHSubsystemHandler handler = (TElSFTPSSHSubsystemHandler) _thread.Handler;\n\t\t\thandler.Server.OnClose -= Server_OnClose;\n\t\t\thandler.Server.OnCloseHandle -= Server_OnCloseHandle;\n\t\t\thandler.Server.OnCreateDirectory -= Server_OnCreateDirectory;\n\t\t\thandler.Server.OnError -= Server_OnError;\n\t\t\thandler.Server.OnFindClose -= Server_OnFindClose;\n\t\t\thandler.Server.OnFindFirst -= Server_OnFindFirst;\n\t\t\thandler.Server.OnFindNext -= Server_OnFindNext;\n\t\t\thandler.Server.OnOpen -= Server_OnOpen;\n\t\t\thandler.Server.OnOpenFile -= Server_OnOpenFile;\n\t\t\thandler.Server.OnReadFile -= Server_OnReadFile;\n\t\t\thandler.Server.OnRemove -= Server_OnRemove;\n\t\t\thandler.Server.OnRenameFile -= Server_OnRenameFile;\n\t\t\thandler.Server.OnRequestAbsolutePath -= Server_OnRequestAbsolutePath;\n\t\t\thandler.Server.OnRequestAttributes -= Server_OnRequestAttributes;\n\t\t\thandler.Server.OnWriteFile -= Server_OnWriteFile;\n\n            // unhandled events. these are mainly to identify if clients call them\n            handler.Server.OnBlock -= Server_OnBlock;\n            handler.Server.OnCreateHardLink -= Server_OnCreateHardLink;\n            handler.Server.OnCreateSymLink -= Server_OnCreateSymLink;\n            handler.Server.OnExtendedRequest -=Server_OnExtendedRequest;\n            handler.Server.OnReadSymLink -=Server_OnReadSymLink;\n            handler.Server.OnRequestAttributes2 -=Server_OnRequestAttributes2;\n            handler.Server.OnSetAttributes -= Server_OnSetAttributes;\n            handler.Server.OnSetAttributes2 -=Server_OnSetAttributes2;\n            handler.Server.OnTextSeek -= Server_OnTextSeek;\n            handler.Server.OnUnblock -=Server_OnUnblock;\n            handler.Server.OnVersionChange -=Server_OnVersionChange;\n\n            _sshSession.OnSSHClosed -= OnSSHClosed;\n        }\n/**/\n        /// <summary>\n\t\t/// Is fired when some error occurs during SFTP communication\n\t\t/// </summary>\n\t\t/// <param name=\"Sender\">ElSFTPServer object</param>\n\t\t/// <param name=\"ErrorCode\">Error code</param>\n\t\t/// <param name=\"Comment\">Error comment</param>\n\t\tprivate void Server_OnError(object Sender, int ErrorCode, string Comment)\n\t\t{\n            _log.ErrorNoPII($\"{_id}: SFTP Error {ErrorCode} encountered. Text: {Comment}\"); //Is comment actually safe to log? Other places I've seen the path put in a comment, not sure if those paths could also end up here.\n\t\t}\n\n\n\t\t/// <summary>\n\t\t/// Is fired when SFTP session is established\n\t\t/// </summary>\n\t\t/// <param name=\"Sender\">ElSFTPServer object</param>\n\t\tprivate void Server_OnOpen(object Sender)\n\t\t{\n            try\n            {\n\t\t\t\tAtlasContext.Current.UserAccount = _sshSession.UserAccount;\n\t\t\t\tAtlasContext.Current.ClientIpAddress = _sshSession.RemoteIP;\n\n                // what's the reason to have the version number as a bit field?\n                int version = -1;\n                for(int bitVer = ((TElSFTPServer) Sender).Version; bitVer != 0; bitVer = bitVer >> 1, version++){}\n\t\t\t    _log.InfoNoPII($\"{_id}: SFTP connection established. Protocol Version {version}\");\n\t            ((TElSFTPServer) Sender).UseUTF8 = true;\n            }\n            catch{}\n\t\t}\n\n    #region Unhandled Events\n\n    // unhandled events. these are mainly to identify if clients call them. \n    public void Server_OnBlock(object Sender, object Data, long Offset, long Length, int LockMask, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII($\"{_id}: Unimplemented OnBlock called from {_sshSession.RemoteIP}.\");\n    }\n\n    public void Server_OnCreateHardLink(object Sender, string NewLinkPath, string ExistingPath, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnCreateHardLink called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnCreateSymLink(object Sender, string LinkPath, string TargetPath, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnCreateSymLink called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnExtendedRequest(object Sender, string Request, byte[] Buffer, int BufferOffset, int Size, Stream Response, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnExtendedRequest called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnReadSymLink(object Sender, string Path, TElSftpFileInfo Info, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnReadSymLink called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnRequestAttributes2(object Sender, object Data, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnRequestAttributes2 called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnSetAttributes(object Sender, string Path, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnSetAttributes called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnSetAttributes2(object Sender, object Data, TElSftpFileAttributes Attributes, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnSetAttributes2 called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnTextSeek(object Sender, object Data, long LineNumber, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnTextSeek called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnUnblock(object Sender, object Data, long Offset, long Length, ref int ErrorCode, ref string Comment)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnUnblock called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    public void Server_OnVersionChange(object Sender, short Version)\n    {\n        _log.DebugNoPII(string.Format(\"{0}: Unimplemented OnVersionChange called from {1}.\", _id, _sshSession.RemoteIP));\n    }\n\n    #endregion\n\n\t}\n}\n",
            "relevance_score": 100,
            "reasoning": "Contains method call: SetAttribute (14 times)"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/GlobalSuppressions.cs",
            "content": "\ufeff// This file is used by Code Analysis to maintain SuppressMessage\n// attributes that are applied to this project.\n// Project-level suppressions either have no target or are given\n// a specific target and scoped to a namespace, type, member, etc.\n\nusing System.Diagnostics.CodeAnalysis;\n\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.VariableEvaluator.CustomRule\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.AbstractMove._folder\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.AbstractMove._folderPath\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.BulkMetadataImport._mapping\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.CreateFolder._folderPath\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.DeleteDocument._folder\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.DeliverReportToFolder._customReport\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.DeliverReportToFolder._folder\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.RunRule._chainedRule\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.SendReport._cr\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.SendReport._distGroup\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.SetAttributeGroup._metaGroup\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Actions.StartApprovalTemplate._approvalTemplate\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._actions\")]\n[assembly: SuppressMessage(\"Build\", \"CA5362:_actions participates in a potential reference cycle\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._actions\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._actions\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._filters\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._filters\")]\n[assembly: SuppressMessage(\"Build\", \"CA5362:_filters participates in a potential reference cycle\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule._filters\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule.FiringGate._originator\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.AbstractCustomRule.WorkloadData.Success\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.ActionTypeNotSuppportedException.ActionType\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaFieldInfo.GroupName\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaFieldInfo.Name\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaFieldInfo.SetName\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaFieldInfo.Uid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaGroupInfo.Name\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaGroupInfo.Uid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.TriggerObjectInfo.Name\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.TriggerObjectInfo.Type\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.CustomRuleInfo.TriggerObjectInfo.Uid\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.EventTypeNotSuppportedException.EventType\")]\n[assembly: SuppressMessage(\"Design\", \"CA1051:Do not declare visible instance fields\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.FilterTypeNotSuppportedException.FilterType\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Common.OrFilter.NegateList\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Filters.AssignedGroup._metaGroup\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Filters.ChangedAttributeField._metaField\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Filters.HasAttributeGroup._metaGroup\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Filters.HasAttributeValue._metaField\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Filters.HasAttributeValue._metaInDbFormat\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1805:Do not initialize unnecessarily\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~F:ADEXS.CustomRules.Filters.InFolder._folder\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.ActionTypesFor(ADEXS.Core.Domain.Model.Account,ADEXS.Core.Types.Enums.ObjectType)~System.Collections.Generic.List{ADEXS.Core.Types.Enums.CustomRuleActionType}\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.Equals(ADEXS.CustomRules.Actions.AbstractCustomRuleAction)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.EvaluateXPath(System.String)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.IsValidFolderPath(System.String,ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.IsValidFolderPath(System.String,ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.NeedsEvaluation(System.String)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.SendEmail(System.String,System.String,ADEXS.Core.Domain.Model.Document)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.VariableEvaluator.EvalMatch(System.Text.RegularExpressions.Match)~System.String\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1310:Specify StringComparison for correctness\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.VariableEvaluator.EvalMatch(System.Text.RegularExpressions.Match)~System.String\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1309:Use ordinal string comparison\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractMove.Equals(ADEXS.CustomRules.Actions.AbstractCustomRuleAction)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractMove.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.GetMetaIterators(System.Xml.XPath.XPathNavigator,System.Collections.Generic.IEnumerable{System.String})~System.Collections.Generic.Dictionary{System.String,System.Xml.XPath.XPathNodeIterator}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.MapMetadataFieldsCSV(System.String[],System.Int32)~System.Collections.Generic.Dictionary{System.Int32,ADEXS.Core.Domain.Model.MetadataField}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.ProcessCSVDocument(ADEXS.Core.Domain.Model.Document,System.Boolean)~System.Int32\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.ReadDocumentCSV(ADEXS.Core.Domain.Model.Document,System.Collections.Generic.List{ADEXS.Core.Util.Core.Pair{System.Int32,System.String[]}},System.Boolean,System.Int32,System.Int32)~System.String[]\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.ReadDocumentCSV(ADEXS.Core.Domain.Model.Document,System.Collections.Generic.List{ADEXS.Core.Util.Core.Pair{System.Int32,System.String[]}},System.Boolean,System.Int32,System.Int32)~System.String[]\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.ReadDocumentXML(ADEXS.Core.Domain.Model.Document)~System.Xml.XPath.XPathDocument\")]\n[assembly: SuppressMessage(\"Security\", \"CA3075:Insecure DTD processing in XML\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.ReadDocumentXML(ADEXS.Core.Domain.Model.Document)~System.Xml.XPath.XPathDocument\")]\n[assembly: SuppressMessage(\"Security\", \"CA5372:Use XmlReader for XPathDocument constructor\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.ReadDocumentXML(ADEXS.Core.Domain.Model.Document)~System.Xml.XPath.XPathDocument\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.BulkMetadataImport.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.CopyDocument.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.CreateFolder.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.CreateFolder.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1806:Do not ignore method results\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.DeleteDocument.DeserializeParams\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.DeleteDocument.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.DeleteDocument.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.DeletedReporter.AddTableRow(System.Text.StringBuilder,System.Boolean,System.String[])\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1825:Avoid zero-length array allocations\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.DeliverReportToFolder.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.DeliverReportToFolder.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.MoveDocument.MoveToFolder(ADEXS.Core.Domain.Model.Folder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.MoveDocument.MoveToFolder(ADEXS.Core.Domain.Model.Folder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.MoveFolder.MoveToFolder(ADEXS.Core.Domain.Model.Folder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.MoveFolder.MoveToFolder(ADEXS.Core.Domain.Model.Folder)~System.Boolean\")]\n[assembly: SuppressMessage(\"Security\", \"CA5359:Do Not Disable Certificate Validation\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.NotifyWebService.CallWebService(ADEXS.Core.Domain.Model.Document,ADEXS.Core.Util.Loggers.IDiscreetLogger)\")]\n[assembly: SuppressMessage(\"Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.NotifyWebService.CallWebService(ADEXS.Core.Domain.Model.Document,ADEXS.Core.Util.Loggers.IDiscreetLogger)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.NotifyWebService.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.NotifyWebService.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.Rename.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.Rename.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.Rename.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.RenameFolder.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.RenameFolder.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.RenameFolder.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.RunRule.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.RunRule.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.RunRule.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1806:Do not ignore method results\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.ScheduleReminder.DeserializeParams\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.ScheduleReminder.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendChatterPost.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendChatterPost.UsableRuleTypes(ADEXS.Core.Domain.Model.Account)~System.Collections.Generic.IList{ADEXS.Core.Types.Enums.ObjectType}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendEmail.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendEmail.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1825:Avoid zero-length array allocations\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendReport.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SendReport.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.GetInfoWithValidate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.UsableRuleTypes(ADEXS.Core.Domain.Model.Account)~System.Collections.Generic.IList{ADEXS.Core.Types.Enums.ObjectType}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.SetSecurity.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.StartApprovalTemplate.UsableRuleTypes(ADEXS.Core.Domain.Model.Account)~System.Collections.Generic.IList{ADEXS.Core.Types.Enums.ObjectType}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.StartApprovalTemplate.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.StartWorkflow.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.StartWorkflow.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.StartWorkflow.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.UpdateDescription.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.UserSyncFromFile.Execute~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.UserSyncFromFile.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.UserSyncFromFile.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.WorkflowParameters.GetFaxDeliveryXmlDoc(ADEXS.CustomRules.Common.AbstractCustomRule)~System.Xml.XmlDocument\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.WorkflowParameters.GetFaxDeliveryXmlDoc(ADEXS.CustomRules.Common.AbstractCustomRule)~System.Xml.XmlDocument\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.WorkflowParameters.GetParamsXml(ADEXS.CustomRules.Common.AbstractCustomRule)~System.String\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.WorkflowParameters.GetRuleInfoXmlDoc(ADEXS.CustomRules.Common.AbstractCustomRule)~System.Xml.XmlDocument\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.WorkflowParameters.SetAdditionalInfo(ADEXS.CustomRules.Common.AbstractCustomRule,ADEXS.CustomRules.Common.CustomRuleInfo)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.WorkflowParameters.SetAdditionalInfo(ADEXS.CustomRules.Common.AbstractCustomRule,ADEXS.CustomRules.Common.CustomRuleInfo)\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule._Process(System.Guid)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule._Process(System.Guid)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Add(ADEXS.CustomRules.Actions.AbstractCustomRuleAction)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Add(ADEXS.CustomRules.Filters.AbstractCustomRuleFilter)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.AvailableRulesForActions(ADEXS.Core.Domain.Model.UserAccount)~System.Collections.Generic.SortedList{System.String,System.Guid}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Create(System.Type,ADEXS.Core.Domain.Model.CustomRuleAF)~ADEXS.CustomRules.Common.ICustomRuleActionFilter\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.IsValid(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome,System.Boolean)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Load(ADEXS.Core.Domain.Model.CustomRule,System.Guid,ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~ADEXS.Core.Domain.Repository.CustomRuleRepository.ICustomRule\")]\n[assembly: SuppressMessage(\"Maintainability\", \"CA1508:Avoid dead conditional code\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Load(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Load(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Process(System.Guid,ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleExecutionContext)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Save(ADEXS.Core.Domain.Model.Account,System.Boolean,ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.AbstractCustomRule.Save(ADEXS.Core.Domain.Model.Account,System.Boolean,ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.#ctor(ADEXS.Core.Domain.Persistence.Model.CustomRuleEventParameters)\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1834:Consider using 'StringBuilder.Append(char)' when applicable\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.OrFilter.GetInfoWithValidate(System.String@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.Validator.ValidateFolder(System.Int32,System.Guid,ADEXS.Core.Domain.Model.Folder@,System.Exception@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.Validator.ValidateMetaField(System.Int32,System.Guid,ADEXS.Core.Domain.Model.MetadataField@,System.Exception@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Common.Validator.ValidateMetaGroup(System.Int32,System.Guid,ADEXS.Core.Domain.Model.MetadataGroup@,System.Exception@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.#ctor(ADEXS.Core.Domain.Model.CustomRule)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRuleAnalyzer.Analyze\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRuleAnalyzer.GetName(ADEXS.Core.Types.Enums.CustomRuleActionType)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRuleAnalyzer.GetName(ADEXS.Core.Types.Enums.CustomRuleEventType)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRuleAnalyzer.GetName(ADEXS.Core.Types.Enums.CustomRuleFilterType)~System.String\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.AbstractCustomRuleFilter.Equals(ADEXS.CustomRules.Filters.AbstractCustomRuleFilter)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.AbstractCustomRuleFilter.FilterTypesFor(ADEXS.Core.Domain.Model.Account,ADEXS.Core.Types.Enums.ObjectType)~System.Collections.Generic.List{ADEXS.Core.Types.Enums.CustomRuleFilterType}\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.AssignedGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.ChangedAttributeField.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.FaxDeliveryStatus.DeserializeParams\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.FaxDeliveryStatus.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.HasAttributeGroup.Evaluate~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.HasAttributeGroup.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.HasAttributeValue.Evaluate~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.HasAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1820:Test for empty strings using string length\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.HasAttributeValue.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.HasNameLike.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.InFolder.Evaluate~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.InFolder.HasDuplicateRules(System.String@)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.InFolder.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.InSubfolder.CheckFolder(System.Guid)~System.Boolean\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.UploadSource.DeserializeParams\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.UploadSource.Validate(ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.FolderRules.FolderRule.#ctor(ADEXS.Core.Domain.Model.CustomRule)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.FolderRules.FolderRule.LogActionStartWorkflow(ADEXS.Core.Domain.Model.UserAccount,System.String)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.FolderRules.FolderRule.LogFolderAction(ADEXS.Core.Domain.Model.Folder,ADEXS.Globals.ScmEnums.ActionType,System.String)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.FolderRules.FolderRuleAnalyzer.Analyze\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.FolderRules.FolderRuleAnalyzer.GetName(ADEXS.Core.Types.Enums.CustomRuleActionType)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.FolderRules.FolderRuleAnalyzer.GetName(ADEXS.Core.Types.Enums.CustomRuleEventType)~System.String\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1822:Mark members as static\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.FolderRules.FolderRuleAnalyzer.GetName(ADEXS.Core.Types.Enums.CustomRuleFilterType)~System.String\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2201:Do not raise reserved exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.ScheduledRules.ScheduledRule.#ctor(ADEXS.Core.Domain.Model.CustomRule)\")]\n[assembly: SuppressMessage(\"Naming\", \"CA1725:Parameter names should match base declaration\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.ScheduledRules.ScheduledRule.LogActionStartWorkflow(ADEXS.Core.Domain.Model.UserAccount,System.String)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.ScheduledRules.ScheduledRuleAnalyzer.Analyze\")]\n[assembly: SuppressMessage(\"Build\", \"CA5362:Rule participates in a potential reference cycle\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.Rule\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Actions.NotifyWebService.ServiceURL\")]\n[assembly: SuppressMessage(\"Design\", \"CA1062:Validate arguments of public methods\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Actions.SendEmail.ToAddress\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.AbstractCustomRule.Account\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.AbstractCustomRule.RuleUser\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetadataFields\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetadataFields\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetadataGroups\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetadataGroups\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.NativeProperties\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.NativeProperties\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.References\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.References\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.FaxDeliveryInfo.TransactionDocumentUids\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2227:Collection properties should be read only\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.FaxDeliveryInfo.TransactionDocumentUids\")]\n[assembly: SuppressMessage(\"Build\", \"CA5362:Rule participates in a potential reference cycle\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Filters.AbstractCustomRuleFilter.Rule\")]\n[assembly: SuppressMessage(\"Design\", \"CA1002:Do not expose generic lists\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Filters.UploadSource.SupportedSources\")]\n[assembly: SuppressMessage(\"Design\", \"CA1067:Override Object.Equals(object) when implementing IEquatable<T>\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Actions.AbstractCustomRuleAction\")]\n[assembly: SuppressMessage(\"Design\", \"CA1064:Exceptions should be public\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Actions.BulkMetadataImport.FatalException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Actions.BulkMetadataImport.FatalException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.ActionTypeNotSuppportedException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRuleException\")]\n[assembly: SuppressMessage(\"Usage\", \"CA2237:Mark ISerializable types with serializable\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRuleException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.ExtraReference\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaFieldInfo\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRuleInfo.CustomRuleInfoEventParameters.MetaGroupInfo\")]\n[assembly: SuppressMessage(\"Design\", \"CA1034:Nested types should not be visible\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRuleInfo.TriggerObjectInfo\")]\n[assembly: SuppressMessage(\"Design\", \"CA1052:Static holder types should be Static or NotInheritable\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.CustomRulesHelper\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.EventTypeNotSuppportedException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.FilterTypeNotSuppportedException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1064:Exceptions should be public\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.RollbackProcessingException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1032:Implement standard exception constructors\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.RollbackProcessingException\")]\n[assembly: SuppressMessage(\"Design\", \"CA1052:Static holder types should be Static or NotInheritable\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Common.Validator\")]\n[assembly: SuppressMessage(\"Design\", \"CA1067:Override Object.Equals(object) when implementing IEquatable<T>\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"type\", Target = \"~T:ADEXS.CustomRules.Filters.AbstractCustomRuleFilter\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(Document,Enums.ActionType,Newtonsoft.Json.Linq.JObject,Enums.HistoryMessageIdentifiers,Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Design\", \"CA1031:Do not catch general exception types\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Build\", \"CA1031:Modify 'LogDocumentAction' to catch a more specific allowed exception type, or rethrow the exception\", Justification = \"Suppressing all existing issues, has to be fixed if refactored\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.DocumentRules.DocumentRule.LogDocumentAction(ADEXS.Core.Domain.Model.Document,ADEXS.Globals.ScmEnums.ActionType,Newtonsoft.Json.Linq.JObject,ADEXS.Core.Types.Enums.HistoryMessageIdentifiers,ADEXS.Core.Types.Enums.HistoryCommentIdentifiers)\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison for clarity\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.IsValidFolderPath(System.String,ADEXS.Core.Domain.Repository.CustomRuleRepository.CustomRuleOutcome)~System.Boolean\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison for clarity\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Actions.AbstractCustomRuleAction.VariableEvaluator.EvalMatch(System.Text.RegularExpressions.Match)~System.String\")]\n[assembly: SuppressMessage(\"Globalization\", \"CA1307:Specify StringComparison for clarity\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~M:ADEXS.CustomRules.Filters.HasNameLike.Evaluate~System.Boolean\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1845:Use span-based 'string.Concat'\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.AbstractCustomRule.ActionDescription\")]\n[assembly: SuppressMessage(\"Performance\", \"CA1845:Use span-based 'string.Concat'\", Justification = \"<Pending>\", Scope = \"member\", Target = \"~P:ADEXS.CustomRules.Common.AbstractCustomRule.FilterDescription\")]\n",
            "relevance_score": 100,
            "reasoning": "Contains method call: SetAttribute (7 times)"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/FolderRules/FolderRuleAnalyzer.cs",
            "content": "\ufeffusing System;\nusing System.Collections.Generic;\nusing ADEXS.Core.Domain.Exceptions;\nusing ADEXS.Core.Domain.Repository.CustomRuleRepository;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.CustomRules.Actions;\nusing ADEXS.CustomRules.Filters;\n\nnamespace ADEXS.CustomRules.FolderRules\n{\n\tpublic class FolderRuleAnalyzer : IRuleAnalyzer\n\t{\n\t\tprivate static readonly IDiscreetLogger _log = DiscreetLogger.GetLogger(typeof(FolderRuleAnalyzer));\n\t\tprivate readonly FolderRule _rule;\n\t\tprivate readonly List<string> _msg = new List<string>();\n\n\t\tpublic FolderRuleAnalyzer(FolderRule rule)\n\t\t{\n\t\t\tif (null == rule)\n\t\t\t{\n\t\t\t\t_log.InfoNoPII(\"Rule is null\");\n\t\t\t\tthrow new PublicException(PublicException.FailReason.InvalidArgument, Resources.CustomRules.error_InvalidRule);\n\t\t\t}\n\t\t\t_rule = rule;\n\t\t}\n\n\t\tpublic List<string> Suggestions\n\t\t{\n\t\t\tget { return _msg; }\n\t\t}\n\n\t\tpublic void Analyze()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tList<AbstractCustomRuleFilter> lst;\n\t\t\t\tif (!_rule.IsScheduled)\n\t\t\t\t{\n\t\t\t\t\tlst = Find(Enums.CustomRuleFilterType.InFolder);\n\t\t\t\t\tif (lst.Count < 1)\n\t\t\t\t\t\t_msg.Add(string.Format(Resources.CustomRules.analyze_AddInFolderFilter, GetName(Enums.CustomRuleFilterType.InFolder)));\n\t\t\t\t}\n\n\t\t\t\tif (Enums.CustomRuleEventType.AttributeGroupAssigned == _rule.EventType)\n\t\t\t\t{\n\t\t\t\t\tlst = Find(Enums.CustomRuleFilterType.AssignedGroup);\n\t\t\t\t\tif (lst.Count < 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t_msg.Add(string.Format(Resources.CustomRules.analyze_AddAssignedGroup,\n\t\t\t\t\t\t\t\t\t\t\t\tGetName(Enums.CustomRuleFilterType.AssignedGroup),\n\t\t\t\t\t\t\t\t\t\t\t\tGetName(Enums.CustomRuleEventType.AttributeGroupAssigned)));\n\n\t\t\t\t\t\tlst = Find(Enums.CustomRuleFilterType.HasAttributeGroup);\n\t\t\t\t\t\tif (lst.Count < 1)\n\t\t\t\t\t\t\t_msg.Add(string.Format(Resources.CustomRules.analyze_AddHasAttributeGroup,\n\t\t\t\t\t\t\t\t\t\t\t\t\tGetName(Enums.CustomRuleFilterType.HasAttributeGroup),\n\t\t\t\t\t\t\t\t\t\t\t\t\tGetName(Enums.CustomRuleEventType.AttributeGroupAssigned)));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (Enums.CustomRuleEventType.AttributeValueChanged == _rule.EventType)\n\t\t\t\t{\n\t\t\t\t\tlst = Find(Enums.CustomRuleFilterType.ChangedAttributeField);\n\t\t\t\t\tif (lst.Count < 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tlst = Find(Enums.CustomRuleFilterType.HasAttributeValue);\n\t\t\t\t\t\tif (lst.Count < 1)\n\t\t\t\t\t\t\t_msg.Add(string.Format(Resources.CustomRules.analyze_AddAttributeFilter,\n\t\t\t\t\t\t\t\t\t\t\t\t\tGetName(Enums.CustomRuleFilterType.HasAttributeValue),\n\t\t\t\t\t\t\t\t\t\t\t\t\tGetName(Enums.CustomRuleFilterType.ChangedAttributeField),\n\t\t\t\t\t\t\t\t\t\t\t\t\tGetName(Enums.CustomRuleEventType.AttributeValueChanged)));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//List<AbstractCustomRuleAction> alst = Find(Enums.CustomRuleActionType.MoveDocument);\n\t\t\t\t//if (alst.Count > 1)\n\t\t\t\t//\t_msg.Add(string.Format(Resources.analyze_MultiveMoves,\n\t\t\t\t//\t\t\t\t\t\t\tGetName(Enums.CustomRuleActionType.MoveDocument)));\n\n\t\t\t\t//List<AbstractCustomRuleFilter> flst = Find(Enums.CustomRuleFilterType.InFolder);\n\t\t\t\t//bool enough = false;\n\t\t\t\t//foreach (MoveDocument moveAct in alst)\n\t\t\t\t//{\n\t\t\t\t//\tforeach (InFolder folderFilt in flst)\n\t\t\t\t//\t{\n\t\t\t\t//\t\tif (moveAct.FolderUid == folderFilt.FolderUid)\n\t\t\t\t//\t\t{\n\t\t\t\t//\t\t\t_msg.Add(Resources.analyze_NoNeedToMove);\n\t\t\t\t//\t\t\tenough = true;\n\t\t\t\t//\t\t\tbreak;\n\t\t\t\t//\t\t}\n\t\t\t\t//\t}\n\t\t\t\t//\tif(enough) break;\n\t\t\t\t//}\n\n\t\t\t\tList<AbstractCustomRuleAction> alst = Find(Enums.CustomRuleActionType.SetAttributeGroup);\n\t\t\t\tList<AbstractCustomRuleFilter> flst = Find(Enums.CustomRuleFilterType.HasAttributeGroup);\n\t\t\t\tbool enough = false;\n\t\t\t\tforeach (SetAttributeGroup grpAct in alst)\n\t\t\t\t{\n\t\t\t\t\tforeach (HasAttributeGroup hasGrp in flst)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (grpAct.AttributeGroupUid == hasGrp.AttributeGroupUid)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_msg.Add(Resources.CustomRules.analyze_NoNeedToAssignGroup);\n\t\t\t\t\t\t\tenough = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (enough) break;\n\t\t\t\t}\n\n\t\t\t\talst = Find(Enums.CustomRuleActionType.SetAttributeValue);\n\t\t\t\tflst = Find(Enums.CustomRuleFilterType.HasAttributeValue);\n\t\t\t\tenough = false;\n\t\t\t\tforeach (SetAttributeValue fldAct in alst)\n\t\t\t\t{\n\t\t\t\t\tforeach (HasAttributeValue hasFld in flst)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (fldAct.AttributeFieldUid == hasFld.AttributeFieldUid && fldAct.AttributeValue == hasFld.AttributeValue)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_msg.Add(Resources.CustomRules.analyze_NoNeedToAssignField);\n\t\t\t\t\t\t\tenough = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (enough) break;\n\t\t\t\t}\n\n\t\t\t\tCheckMetadataUpdateSequence();\n\n                if (_rule.RequiresInitiator)\n                {\n                    _msg.Add(Resources.CustomRules.analyze_RequireInitiatorWillForceNonUserActionsToNotFire);\n                }\n\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII(\"Analyzing failed with exception\", ex);\n\t\t\t\t_msg.Add(Resources.CustomRules.analyze_GenericError);\n\t\t\t}\n\t\t}\n\n\t\tprivate void CheckMetadataUpdateSequence()\n\t\t{\n\t\t\tbool sequenceEnded = false;\n\t\t\tbool prevActionUpdatesMeta = false;\n\t\t\tforeach (AbstractCustomRuleAction action in _rule.Actions)\n\t\t\t{\n\t\t\t\tif(sequenceEnded)\n\t\t\t\t{\n\t\t\t\t\tif(!prevActionUpdatesMeta && action.UpdatesMetadata())\n\t\t\t\t\t{\n\t\t\t\t\t\t_msg.Add(Resources.CustomRules.analyze_GroupAttributeUpdates);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (prevActionUpdatesMeta && !action.UpdatesMetadata())\n\t\t\t\t\t\tsequenceEnded = true;\n\t\t\t\t}\n\n\t\t\t\tprevActionUpdatesMeta = action.UpdatesMetadata();\n\t\t\t}\n\t\t}\n\n\n\t\tprivate List<AbstractCustomRuleFilter> Find(Enums.CustomRuleFilterType filtType)\n\t\t{\n\t\t\tList<AbstractCustomRuleFilter> lst = new List<AbstractCustomRuleFilter>();\n\t\t\tforeach (AbstractCustomRuleFilter filter in _rule.Filters)\n\t\t\t\tif (filtType == filter.FilterType || (filtType == Enums.CustomRuleFilterType.InFolder && filter.FilterType == Enums.CustomRuleFilterType.InSubfolder))\n\t\t\t\t\tlst.Add(filter);\n\n\t\t\treturn lst;\n\t\t}\n\n\t\tprivate List<AbstractCustomRuleAction> Find(Enums.CustomRuleActionType actionType)\n\t\t{\n\t\t\tList<AbstractCustomRuleAction> lst = new List<AbstractCustomRuleAction>();\n\t\t\tforeach (AbstractCustomRuleAction action in _rule.Actions)\n\t\t\t\tif (actionType == action.ActionType)\n\t\t\t\t\tlst.Add(action);\n\n\t\t\treturn lst;\n\t\t}\n\n\t\tprivate string GetName(Enums.CustomRuleEventType eventType)\n\t\t{\n\t\t\treturn Enums.GetLocalizedName(eventType, Resources.CustomRules.ResourceManager);\n\t\t}\n\t\tprivate string GetName(Enums.CustomRuleFilterType filterType)\n\t\t{\n\t\t\treturn Enums.GetLocalizedName(filterType, Resources.CustomRules.ResourceManager);\n\t\t}\n\t\tprivate string GetName(Enums.CustomRuleActionType actionType)\n\t\t{\n\t\t\treturn Enums.GetLocalizedName(actionType, Resources.CustomRules.ResourceManager);\n\t\t}\n\t}\n}\n",
            "relevance_score": 100,
            "reasoning": "Contains method call: SetAttribute (4 times)"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Resources/CustomRules.Designer.cs",
            "content": "\ufeff//------------------------------------------------------------------------------\n// <auto-generated>\n//     This code was generated by a tool.\n//     Runtime Version:4.0.30319.42000\n//\n//     Changes to this file may cause incorrect behavior and will be lost if\n//     the code is regenerated.\n// </auto-generated>\n//------------------------------------------------------------------------------\n\nnamespace ADEXS.CustomRules.Resources {\n    using System;\n    \n    \n    /// <summary>\n    ///   A strongly-typed resource class, for looking up localized strings, etc.\n    /// </summary>\n    // This class was auto-generated by the StronglyTypedResourceBuilder\n    // class via a tool like ResGen or Visual Studio.\n    // To add or remove a member, edit your .ResX file then rerun ResGen\n    // with the /str option, or rebuild your VS project.\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"17.0.0.0\")]\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]\n    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]\n    public class CustomRules {\n        \n        private static global::System.Resources.ResourceManager resourceMan;\n        \n        private static global::System.Globalization.CultureInfo resourceCulture;\n        \n        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\n        internal CustomRules() {\n        }\n        \n        /// <summary>\n        ///   Returns the cached ResourceManager instance used by this class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        public static global::System.Resources.ResourceManager ResourceManager {\n            get {\n                if (object.ReferenceEquals(resourceMan, null)) {\n                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"ADEXS.CustomRules.Resources.CustomRules\", typeof(CustomRules).Assembly);\n                    resourceMan = temp;\n                }\n                return resourceMan;\n            }\n        }\n        \n        /// <summary>\n        ///   Overrides the current thread's CurrentUICulture property for all\n        ///   resource lookups using this strongly typed resource class.\n        /// </summary>\n        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]\n        public static global::System.Globalization.CultureInfo Culture {\n            get {\n                return resourceCulture;\n            }\n            set {\n                resourceCulture = value;\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to  and .\n        /// </summary>\n        public static string _and_ {\n            get {\n                return ResourceManager.GetString(\"_and_\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to  or .\n        /// </summary>\n        public static string _or_ {\n            get {\n                return ResourceManager.GetString(\"_or_\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action.\n        /// </summary>\n        public static string Action {\n            get {\n                return ResourceManager.GetString(\"Action\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Active flag malformed: {0}..\n        /// </summary>\n        public static string ActiveFlagMalformed0 {\n            get {\n                return ResourceManager.GetString(\"ActiveFlagMalformed0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Consider adding a &apos;{0}&apos; filter when handling the &apos;{1}&apos; event. The rule will be made sensitive only to the specified attribute group, which caused the event to fire..\n        /// </summary>\n        public static string analyze_AddAssignedGroup {\n            get {\n                return ResourceManager.GetString(\"analyze_AddAssignedGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Seriously consider adding a &apos;{0}&apos; or &apos;{1}&apos; filter when handling the &apos;{2}&apos; event. This is a high frequency event, and could easily cause unwanted side effect if not properly constrained with filters..\n        /// </summary>\n        public static string analyze_AddAttributeFilter {\n            get {\n                return ResourceManager.GetString(\"analyze_AddAttributeFilter\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to At the very least consider adding a &apos;{0}&apos; filter when handling the &apos;{1}&apos; event. Be mindful of the fact that the attribute group specified in the filter may not be the one raising the event, and may have been assigned to the document before the event fired..\n        /// </summary>\n        public static string analyze_AddHasAttributeGroup {\n            get {\n                return ResourceManager.GetString(\"analyze_AddHasAttributeGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to It is strongly advised to add one or more &apos;{0}&apos; filters. It will limit exposure of unintentional folders to the rule..\n        /// </summary>\n        public static string analyze_AddInFolderFilter {\n            get {\n                return ResourceManager.GetString(\"analyze_AddInFolderFilter\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The &apos;{0}&apos; action could be resource intensive. Consider consulting SpringCM support to verify the environment in which the rule will execute..\n        /// </summary>\n        public static string analyze_BulkMetaImport {\n            get {\n                return ResourceManager.GetString(\"analyze_BulkMetaImport\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to An error was encountered while analyzing the rule..\n        /// </summary>\n        public static string analyze_GenericError {\n            get {\n                return ResourceManager.GetString(\"analyze_GenericError\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to It is best to have all attribute updating actions as an uninterrupted sequence..\n        /// </summary>\n        public static string analyze_GroupAttributeUpdates {\n            get {\n                return ResourceManager.GetString(\"analyze_GroupAttributeUpdates\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to There are multiple &apos;{0}&apos; actions. Only the last one is needed to move the document to the final folder..\n        /// </summary>\n        public static string analyze_MultiveMoves {\n            get {\n                return ResourceManager.GetString(\"analyze_MultiveMoves\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to There is no need to assign an attribute value when a filter ensures it has already been assigned..\n        /// </summary>\n        public static string analyze_NoNeedToAssignField {\n            get {\n                return ResourceManager.GetString(\"analyze_NoNeedToAssignField\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to There is no need to assign an attribute group when a filter ensures it has already been assigned..\n        /// </summary>\n        public static string analyze_NoNeedToAssignGroup {\n            get {\n                return ResourceManager.GetString(\"analyze_NoNeedToAssignGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to There is no need to move the document because a filter ensures it is already in the folder..\n        /// </summary>\n        public static string analyze_NoNeedToMove {\n            get {\n                return ResourceManager.GetString(\"analyze_NoNeedToMove\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Execute as Initiator runs the rule as the user who triggers it.  In some cases, the initiating user may not have the appropriate rights to complete the action..\n        /// </summary>\n        public static string analyze_RequireInitiatorWillForceNonUserActionsToNotFire {\n            get {\n                return ResourceManager.GetString(\"analyze_RequireInitiatorWillForceNonUserActionsToNotFire\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to It is strongly recommended action &apos;{0}&apos; be used only with a scheduled rule..\n        /// </summary>\n        public static string analyze_UseAction0Scheduled {\n            get {\n                return ResourceManager.GetString(\"analyze_UseAction0Scheduled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Assigned To.\n        /// </summary>\n        public static string AsssignTo {\n            get {\n                return ResourceManager.GetString(\"AsssignTo\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case folder will be taken off the tree..\n        /// </summary>\n        public static string CaseFolderReset {\n            get {\n                return ResourceManager.GetString(\"CaseFolderReset\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; in group &apos;{1}&apos;.\n        /// </summary>\n        public static string ChangedAttributeFieldInfo {\n            get {\n                return ResourceManager.GetString(\"ChangedAttributeFieldInfo\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not evaluate message.\n        /// </summary>\n        public static string CouldNotEvaluateMessage {\n            get {\n                return ResourceManager.GetString(\"CouldNotEvaluateMessage\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0}: Deleted documents details.\n        /// </summary>\n        public static string DeletedDocumentsSubject {\n            get {\n                return ResourceManager.GetString(\"DeletedDocumentsSubject\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0} ({1}) to {2}.\n        /// </summary>\n        public static string DetailsSendReport0Type1To2 {\n            get {\n                return ResourceManager.GetString(\"DetailsSendReport0Type1To2\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Made into record of class {0}.\n        /// </summary>\n        public static string DocumentMadeRecordOfClass0 {\n            get {\n                return ResourceManager.GetString(\"DocumentMadeRecordOfClass0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The following documents failed to be moved into the trash folder..\n        /// </summary>\n        public static string DocumentsFailedToMoveToTrash {\n            get {\n                return ResourceManager.GetString(\"DocumentsFailedToMoveToTrash\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The following documents were moved into the trash folder..\n        /// </summary>\n        public static string DocumentsMovedToTrash {\n            get {\n                return ResourceManager.GetString(\"DocumentsMovedToTrash\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Due Date.\n        /// </summary>\n        public static string DueDate {\n            get {\n                return ResourceManager.GetString(\"DueDate\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Bulk Attribute Import.\n        /// </summary>\n        public static string enum_CustomRuleActionType_BulkMetadataImport {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_BulkMetadataImport\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Copy Document.\n        /// </summary>\n        public static string enum_CustomRuleActionType_CopyDocument {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_CopyDocument\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Create Case Task.\n        /// </summary>\n        public static string enum_CustomRuleActionType_CreateCaseTask {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_CreateCaseTask\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Create Folder.\n        /// </summary>\n        public static string enum_CustomRuleActionType_CreateFolder {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_CreateFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Move To Trash.\n        /// </summary>\n        public static string enum_CustomRuleActionType_DeleteDocument {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_DeleteDocument\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Deliver Report To Folder.\n        /// </summary>\n        public static string enum_CustomRuleActionType_DeliverReportToFolder {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_DeliverReportToFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Bulk User Update.\n        /// </summary>\n        public static string enum_CustomRuleActionType_LimitedUserSyncFromFile {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_LimitedUserSyncFromFile\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Make Into Record.\n        /// </summary>\n        public static string enum_CustomRuleActionType_MakeRecord {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_MakeRecord\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Move Document.\n        /// </summary>\n        public static string enum_CustomRuleActionType_MoveDocument {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_MoveDocument\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Move Folder.\n        /// </summary>\n        public static string enum_CustomRuleActionType_MoveFolder {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_MoveFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Relocate Case.\n        /// </summary>\n        public static string enum_CustomRuleActionType_RelocateCase {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_RelocateCase\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rename.\n        /// </summary>\n        public static string enum_CustomRuleActionType_Rename {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_Rename\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rename.\n        /// </summary>\n        public static string enum_CustomRuleActionType_RenameFolder {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_RenameFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Run Rule.\n        /// </summary>\n        public static string enum_CustomRuleActionType_RunRule {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_RunRule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Send Email.\n        /// </summary>\n        public static string enum_CustomRuleActionType_SendEmail {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SendEmail\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Send Report.\n        /// </summary>\n        public static string enum_CustomRuleActionType_SendReport {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SendReport\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Assign Attribute Group.\n        /// </summary>\n        public static string enum_CustomRuleActionType_SetAttributeGroup {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SetAttributeGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Assign Attribute Value.\n        /// </summary>\n        public static string enum_CustomRuleActionType_SetAttributeValue {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SetAttributeValue\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Set Security.\n        /// </summary>\n        public static string enum_CustomRuleActionType_SetSecurity {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_SetSecurity\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Start Approval Template.\n        /// </summary>\n        public static string enum_CustomRuleActionType_StartApprovalTemplate {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_StartApprovalTemplate\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Start Workflow.\n        /// </summary>\n        public static string enum_CustomRuleActionType_StartWorkflow {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_StartWorkflow\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Update Case Property.\n        /// </summary>\n        public static string enum_CustomRuleActionType_UpdateCaseProperty {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_UpdateCaseProperty\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Update Description.\n        /// </summary>\n        public static string enum_CustomRuleActionType_UpdateDescription {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_UpdateDescription\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Bulk Import Users.\n        /// </summary>\n        public static string enum_CustomRuleActionType_UserSyncFromFile {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleActionType_UserSyncFromFile\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Attribute Group Assigned.\n        /// </summary>\n        public static string enum_CustomRuleEventType_AttributeGroupAssigned {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_AttributeGroupAssigned\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document Indexed.\n        /// </summary>\n        public static string enum_CustomRuleEventType_AttributeValueChanged {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_AttributeValueChanged\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case Updated.\n        /// </summary>\n        public static string enum_CustomRuleEventType_CaseUpdated {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_CaseUpdated\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Chained.\n        /// </summary>\n        public static string enum_CustomRuleEventType_Chained {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_Chained\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Changed Attribute Field.\n        /// </summary>\n        public static string enum_CustomRuleEventType_ChangedAttributeField {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_ChangedAttributeField\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document Added.\n        /// </summary>\n        public static string enum_CustomRuleEventType_DocumentAdded {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_DocumentAdded\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document Checked In.\n        /// </summary>\n        public static string enum_CustomRuleEventType_DocumentCheckedIn {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_DocumentCheckedIn\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document Deleted.\n        /// </summary>\n        public static string enum_CustomRuleEventType_DocumentDeleted {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_DocumentDeleted\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document Reminder Executed.\n        /// </summary>\n        public static string enum_CustomRuleEventType_DocumentReminderExecuted {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_DocumentReminderExecuted\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document Entered Folder.\n        /// </summary>\n        public static string enum_CustomRuleEventType_EnteredFolder {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_EnteredFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Outbound Fax Delivery.\n        /// </summary>\n        public static string enum_CustomRuleEventType_FaxDelivery {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_FaxDelivery\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to On Schedule.\n        /// </summary>\n        public static string enum_CustomRuleEventType_ScheduledEvent {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleEventType_ScheduledEvent\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Assigned Attribute Group.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_AssignedGroup {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_AssignedGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case Has Task.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_CaseHasTask {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_CaseHasTask\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case Type.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_CaseType {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_CaseType\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Changed Attribute Field.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_ChangedAttributeField {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_ChangedAttributeField\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Fax Delivery Status.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_FaxDeliveryStatus {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_FaxDeliveryStatus\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Has Attribute Group.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_HasAttributeGroup {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_HasAttributeGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Has Attribute Value.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_HasAttributeValue {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_HasAttributeValue\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Has Name Like.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_HasNameLike {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_HasNameLike\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Has Property Value.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_HasPropertyValue {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_HasPropertyValue\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to In Folder.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_InFolder {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_InFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to In Subfolder.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_InSubfolder {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_InSubfolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Updated Property.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_UpdatedProperty {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_UpdatedProperty\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Upload Source.\n        /// </summary>\n        public static string enum_CustomRuleFilterType_UploadSource {\n            get {\n                return ResourceManager.GetString(\"enum_CustomRuleFilterType_UploadSource\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case.\n        /// </summary>\n        public static string enum_ObjectType_Case {\n            get {\n                return ResourceManager.GetString(\"enum_ObjectType_Case\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document.\n        /// </summary>\n        public static string enum_ObjectType_Document {\n            get {\n                return ResourceManager.GetString(\"enum_ObjectType_Document\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Schedule.\n        /// </summary>\n        public static string enum_ObjectType_Schedule {\n            get {\n                return ResourceManager.GetString(\"enum_ObjectType_Schedule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; failed..\n        /// </summary>\n        public static string error_Action0Failed {\n            get {\n                return ResourceManager.GetString(\"error_Action0Failed\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; may not be included in a scheduled rule..\n        /// </summary>\n        public static string error_Action0MayNotBeScheduled {\n            get {\n                return ResourceManager.GetString(\"error_Action0MayNotBeScheduled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; may be included in only a scheduled rule..\n        /// </summary>\n        public static string error_Action0MayOnlyBeScheduled {\n            get {\n                return ResourceManager.GetString(\"error_Action0MayOnlyBeScheduled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; must be the last transactional action in the rule..\n        /// </summary>\n        public static string error_Action0MustBeLastTransactional {\n            get {\n                return ResourceManager.GetString(\"error_Action0MustBeLastTransactional\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action {0} requires it to execute as initiator..\n        /// </summary>\n        public static string error_Action0RequiresInitiator {\n            get {\n                return ResourceManager.GetString(\"error_Action0RequiresInitiator\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; failed for document &apos;{1}&apos;..\n        /// </summary>\n        public static string error_ActionFailedForDocument {\n            get {\n                return ResourceManager.GetString(\"error_ActionFailedForDocument\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; failed for folder &apos;{1}&apos;..\n        /// </summary>\n        public static string error_ActionFailedForFolder {\n            get {\n                return ResourceManager.GetString(\"error_ActionFailedForFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; is not supported..\n        /// </summary>\n        public static string error_ActionNotSupported {\n            get {\n                return ResourceManager.GetString(\"error_ActionNotSupported\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; is only available for accounts with advanced workflow enabled..\n        /// </summary>\n        public static string error_AdvancedWorkflowDisabled {\n            get {\n                return ResourceManager.GetString(\"error_AdvancedWorkflowDisabled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; is not a predefined work process..\n        /// </summary>\n        public static string error_AppovalWorkflow0NotWorkProcess {\n            get {\n                return ResourceManager.GetString(\"error_AppovalWorkflow0NotWorkProcess\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Invalid group for &apos;{0}&apos; in &apos;{1}&apos;..\n        /// </summary>\n        public static string error_BadSecurityGroupForAction0InRule1 {\n            get {\n                return ResourceManager.GetString(\"error_BadSecurityGroupForAction0InRule1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Invalid user for &apos;{0}&apos; in &apos;{1}&apos;..\n        /// </summary>\n        public static string error_BadUserForAction0InRule1 {\n            get {\n                return ResourceManager.GetString(\"error_BadUserForAction0InRule1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case name may not be blank..\n        /// </summary>\n        public static string error_BlankCaseName {\n            get {\n                return ResourceManager.GetString(\"error_BlankCaseName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document name may not be blank..\n        /// </summary>\n        public static string error_BlankDocName {\n            get {\n                return ResourceManager.GetString(\"error_BlankDocName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Folder name may not be blank..\n        /// </summary>\n        public static string error_BlankFolderName {\n            get {\n                return ResourceManager.GetString(\"error_BlankFolderName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case property name may not be empty..\n        /// </summary>\n        public static string error_CasePropertyNameMayNotBeEmpty {\n            get {\n                return ResourceManager.GetString(\"error_CasePropertyNameMayNotBeEmpty\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case property value may not be empty..\n        /// </summary>\n        public static string error_CasePropertyValueMayNotBeEmpty {\n            get {\n                return ResourceManager.GetString(\"error_CasePropertyValueMayNotBeEmpty\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The chained rule is invalid and may not be used as an action..\n        /// </summary>\n        public static string error_ChainedRuleInvalid {\n            get {\n                return ResourceManager.GetString(\"error_ChainedRuleInvalid\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not parse expression &apos;{0}&apos;..\n        /// </summary>\n        public static string error_CouldNotParseCustomExpression0 {\n            get {\n                return ResourceManager.GetString(\"error_CouldNotParseCustomExpression0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not parse expression &apos;{0}&apos; for field &apos;{1}&apos;..\n        /// </summary>\n        public static string error_CouldNotParseCustomExpression0ForField1 {\n            get {\n                return ResourceManager.GetString(\"error_CouldNotParseCustomExpression0ForField1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Expression &apos;{0}&apos; for field &apos;{1}&apos; evaluated to empty value..\n        /// </summary>\n        public static string error_CustomExpression0ForField1EvaluatedToBlank {\n            get {\n                return ResourceManager.GetString(\"error_CustomExpression0ForField1EvaluatedToBlank\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Delivery {0} is for unsupported type {1}..\n        /// </summary>\n        public static string error_Delivery0ForType1 {\n            get {\n                return ResourceManager.GetString(\"error_Delivery0ForType1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The executing user is disabled..\n        /// </summary>\n        public static string error_DisabledRuleUser {\n            get {\n                return ResourceManager.GetString(\"error_DisabledRuleUser\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule event disposed after {0} unsuccessful attempts to process..\n        /// </summary>\n        public static string error_DisposedWithMaxRetries {\n            get {\n                return ResourceManager.GetString(\"error_DisposedWithMaxRetries\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; event requires either a &apos;{1}&apos; or &apos;{2}&apos; filter..\n        /// </summary>\n        public static string error_DocumentDelete0RequiresInFolder1OrSubFolder2 {\n            get {\n                return ResourceManager.GetString(\"error_DocumentDelete0RequiresInFolder1OrSubFolder2\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The account does not allow document level security..\n        /// </summary>\n        public static string error_DocumentLevelSecurityNotAllowedInAccount {\n            get {\n                return ResourceManager.GetString(\"error_DocumentLevelSecurityNotAllowedInAccount\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; did not move the document to folder {1}, most likely because of account settings or user permissions..\n        /// </summary>\n        public static string error_DocumentNotMoved {\n            get {\n                return ResourceManager.GetString(\"error_DocumentNotMoved\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The URL for the web service may not be blank..\n        /// </summary>\n        public static string error_EmptyWebServiceURL {\n            get {\n                return ResourceManager.GetString(\"error_EmptyWebServiceURL\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not evaluate file path &apos;{0}&apos;..\n        /// </summary>\n        public static string error_EvaluateFilePath0 {\n            get {\n                return ResourceManager.GetString(\"error_EvaluateFilePath0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Event &apos;{0}&apos; is not available..\n        /// </summary>\n        public static string error_Event0NotAvailable {\n            get {\n                return ResourceManager.GetString(\"error_Event0NotAvailable\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Event &apos;{0}&apos; is not supported..\n        /// </summary>\n        public static string error_EventNotSupported {\n            get {\n                return ResourceManager.GetString(\"error_EventNotSupported\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The executor does not have access to the Folder &apos;{0}&apos;..\n        /// </summary>\n        public static string error_ExecutorDoesNotHaveWriteAccessToTheTargetFolder0 {\n            get {\n                return ResourceManager.GetString(\"error_ExecutorDoesNotHaveWriteAccessToTheTargetFolder0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to make document &apos;{0}&apos; (1) a record of class &apos;2&apos;. Additional info: {3}.\n        /// </summary>\n        public static string error_FailedToClassifyDoc01asClass2WithMsg3 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToClassifyDoc01asClass2WithMsg3\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to confirm the account user for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_FailedToConfirmUser0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToConfirmUser0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to create case task..\n        /// </summary>\n        public static string error_FailedToCreateCaseTask {\n            get {\n                return ResourceManager.GetString(\"error_FailedToCreateCaseTask\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to create destination folder..\n        /// </summary>\n        public static string error_FailedToCreateFolder {\n            get {\n                return ResourceManager.GetString(\"error_FailedToCreateFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to create Reminder from Template &apos;{0}&apos;. Additional details: {1}.\n        /// </summary>\n        public static string error_FailedToCreateReminderFromTemplate {\n            get {\n                return ResourceManager.GetString(\"error_FailedToCreateReminderFromTemplate\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to determine updated property..\n        /// </summary>\n        public static string error_FailedToDetemineUpdatedProperty {\n            get {\n                return ResourceManager.GetString(\"error_FailedToDetemineUpdatedProperty\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to determine attribute group for document &apos;{0}&apos; in filter &apos;{1}&apos;..\n        /// </summary>\n        public static string error_FailedToDetermineAttributeGroup {\n            get {\n                return ResourceManager.GetString(\"error_FailedToDetermineAttributeGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not determine existance of task &apos;{0}&apos;..\n        /// </summary>\n        public static string error_FailedToDetermineCaseTask0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToDetermineCaseTask0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to evaluate case properties for case &apos;{0}&apos;..\n        /// </summary>\n        public static string error_FailedToEvaluateCasePropertiesFor0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToEvaluateCasePropertiesFor0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Expression &apos;{0}&apos; in parameter could not be evaluated..\n        /// </summary>\n        public static string error_FailedToEvaluateCustomExpression0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToEvaluateCustomExpression0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to determine ancestor folders for document &apos;{0}&apos; in filter &apos;{1}&apos;..\n        /// </summary>\n        public static string error_FailedToGetAncestorFolders {\n            get {\n                return ResourceManager.GetString(\"error_FailedToGetAncestorFolders\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to determine the delivery uid from the event..\n        /// </summary>\n        public static string error_FailedToGetDeliveryUid {\n            get {\n                return ResourceManager.GetString(\"error_FailedToGetDeliveryUid\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to retrieve chained document rule for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_FailedToLoadChainedRule {\n            get {\n                return ResourceManager.GetString(\"error_FailedToLoadChainedRule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to load delivery for uid {0}..\n        /// </summary>\n        public static string error_FailedToLoadDeliveryFor0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToLoadDeliveryFor0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to determine the owner for work process &apos;{0}&apos;..\n        /// </summary>\n        public static string error_FailedToLoadOwnerOfWorkProcess0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToLoadOwnerOfWorkProcess0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not retrieve rule {0} because it&apos;s type is not supported..\n        /// </summary>\n        public static string error_FailedToLoadRule0UnsupportedType {\n            get {\n                return ResourceManager.GetString(\"error_FailedToLoadRule0UnsupportedType\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not retrieve rule with id {0}.\n        /// </summary>\n        public static string error_FailedToLoadRuleId {\n            get {\n                return ResourceManager.GetString(\"error_FailedToLoadRuleId\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to retrieve work process for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_FailedToLoadWorkProcess {\n            get {\n                return ResourceManager.GetString(\"error_FailedToLoadWorkProcess\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid case status..\n        /// </summary>\n        public static string error_FailedToParseCaseStatus0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToParseCaseStatus0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to process delivery information to pass to workflow..\n        /// </summary>\n        public static string error_FailedToProcessDelivery {\n            get {\n                return ResourceManager.GetString(\"error_FailedToProcessDelivery\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to process rule: &apos;{0}&apos;.\n        /// </summary>\n        public static string error_FailedToProcessRule0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToProcessRule0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to process rule information to pass to workflow..\n        /// </summary>\n        public static string error_FailedToProcessRuleInfo {\n            get {\n                return ResourceManager.GetString(\"error_FailedToProcessRuleInfo\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to queue for metadata propagation..\n        /// </summary>\n        public static string error_FailedToQueueForMetadataPropagation {\n            get {\n                return ResourceManager.GetString(\"error_FailedToQueueForMetadataPropagation\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to relocate case to &apos;{0}&apos; ({1})..\n        /// </summary>\n        public static string error_FailedToRelocateToPath0uid1 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToRelocateToPath0uid1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to determine attribute values for document &apos;{0}&apos; in filter &apos;{1}&apos;.\n        /// </summary>\n        public static string error_FailedToRetrieveAttributeValue {\n            get {\n                return ResourceManager.GetString(\"error_FailedToRetrieveAttributeValue\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to send the chatter post. No Salesforce Organization ID set for the account..\n        /// </summary>\n        public static string error_FailedToSendChatterPostNoSFSettings {\n            get {\n                return ResourceManager.GetString(\"error_FailedToSendChatterPostNoSFSettings\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to email report &apos;{0}&apos;..\n        /// </summary>\n        public static string error_FailedToSendReport0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToSendReport0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to set security. Additional details: {0}..\n        /// </summary>\n        public static string error_FailedToSetSecurityWithDetails0 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToSetSecurityWithDetails0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to start work process &apos;{0}&apos; with internal error: {1}.\n        /// </summary>\n        public static string error_FailedToStartWorkProces0InternalError_1 {\n            get {\n                return ResourceManager.GetString(\"error_FailedToStartWorkProces0InternalError_1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to An unexpected error occurred while validating..\n        /// </summary>\n        public static string error_FailedToValidateWithException {\n            get {\n                return ResourceManager.GetString(\"error_FailedToValidateWithException\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Filter &apos;{0}&apos; is applicable only for event &apos;{1}&apos;..\n        /// </summary>\n        public static string error_Filter0IsValidOnlyForEvent1 {\n            get {\n                return ResourceManager.GetString(\"error_Filter0IsValidOnlyForEvent1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Filter &apos;{0}&apos; is not supported..\n        /// </summary>\n        public static string error_FilterNotSupported {\n            get {\n                return ResourceManager.GetString(\"error_FilterNotSupported\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; did not move the folder to {1}, most likely because of account settings or user permissions. Additional details: {2}..\n        /// </summary>\n        public static string error_FolderNotMoved {\n            get {\n                return ResourceManager.GetString(\"error_FolderNotMoved\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The folder path &apos;{0}&apos; does not exist or is invalid..\n        /// </summary>\n        public static string error_FolderPath0DoesNotExistOrInvalid {\n            get {\n                return ResourceManager.GetString(\"error_FolderPath0DoesNotExistOrInvalid\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Inbound SpringCM email addresses are not allowed for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_InboundSpringEmail {\n            get {\n                return ResourceManager.GetString(\"error_InboundSpringEmail\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has an invalid attribute field..\n        /// </summary>\n        public static string error_InvalidAttributeField {\n            get {\n                return ResourceManager.GetString(\"error_InvalidAttributeField\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has an invalid attribute group..\n        /// </summary>\n        public static string error_InvalidAttributeGroup {\n            get {\n                return ResourceManager.GetString(\"error_InvalidAttributeGroup\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The value &apos;{0}&apos; could not be parsed as type {1} for attribute field &apos;{2}&apos;..\n        /// </summary>\n        public static string error_InvalidAttributeValueFormat {\n            get {\n                return ResourceManager.GetString(\"error_InvalidAttributeValueFormat\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has an invalid schema for bulk metadata import..\n        /// </summary>\n        public static string error_InvalidBulkSchema {\n            get {\n                return ResourceManager.GetString(\"error_InvalidBulkSchema\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Invalid case view form..\n        /// </summary>\n        public static string error_InvalidCaseViewForm {\n            get {\n                return ResourceManager.GetString(\"error_InvalidCaseViewForm\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The execution user is invalid or no longer in the account..\n        /// </summary>\n        public static string error_InvalidExecutionUser {\n            get {\n                return ResourceManager.GetString(\"error_InvalidExecutionUser\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has an invalid folder..\n        /// </summary>\n        public static string error_InvalidFolder {\n            get {\n                return ResourceManager.GetString(\"error_InvalidFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; was passed an unsupported object..\n        /// </summary>\n        public static string error_InvalidObject {\n            get {\n                return ResourceManager.GetString(\"error_InvalidObject\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has an invalid record class..\n        /// </summary>\n        public static string error_InvalidRecordClass {\n            get {\n                return ResourceManager.GetString(\"error_InvalidRecordClass\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Invalid document rule..\n        /// </summary>\n        public static string error_InvalidRule {\n            get {\n                return ResourceManager.GetString(\"error_InvalidRule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; is configured with invalid chained document rule..\n        /// </summary>\n        public static string error_InvalidRuleUid {\n            get {\n                return ResourceManager.GetString(\"error_InvalidRuleUid\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The executing user is not valid..\n        /// </summary>\n        public static string error_InvalidRuleUser {\n            get {\n                return ResourceManager.GetString(\"error_InvalidRuleUser\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not retrieve the schedule..\n        /// </summary>\n        public static string error_InvalidSchedule {\n            get {\n                return ResourceManager.GetString(\"error_InvalidSchedule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case task name may not be empty..\n        /// </summary>\n        public static string error_InvalidTaskName {\n            get {\n                return ResourceManager.GetString(\"error_InvalidTaskName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Upload source &apos;{0}&apos; is not supported..\n        /// </summary>\n        public static string error_InvalidUploadSource {\n            get {\n                return ResourceManager.GetString(\"error_InvalidUploadSource\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The wildcard name may not be empty..\n        /// </summary>\n        public static string error_InvalidWildcardName {\n            get {\n                return ResourceManager.GetString(\"error_InvalidWildcardName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has an invalid workflow name..\n        /// </summary>\n        public static string error_InvalidWorkflow {\n            get {\n                return ResourceManager.GetString(\"error_InvalidWorkflow\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has a workflow which is not published or ill defined..\n        /// </summary>\n        public static string error_InvalidWorkflowDefinition {\n            get {\n                return ResourceManager.GetString(\"error_InvalidWorkflowDefinition\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; is configured with invalid work process..\n        /// </summary>\n        public static string error_InvalidWorkProcessId {\n            get {\n                return ResourceManager.GetString(\"error_InvalidWorkProcessId\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The value {1} is not valid as number of days for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_IvalidDays1ForAction0 {\n            get {\n                return ResourceManager.GetString(\"error_IvalidDays1ForAction0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; may not have the folder &apos;{1}&apos; as target because it has a legacy rule on folder assigned to it..\n        /// </summary>\n        public static string error_LegacyRuleFolder {\n            get {\n                return ResourceManager.GetString(\"error_LegacyRuleFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The web service URL &apos;{0}&apos; is not well formed..\n        /// </summary>\n        public static string error_MalformedWebSerivceURL0 {\n            get {\n                return ResourceManager.GetString(\"error_MalformedWebSerivceURL0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to A valid folder path should be provided..\n        /// </summary>\n        public static string error_NeedFolderPath {\n            get {\n                return ResourceManager.GetString(\"error_NeedFolderPath\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to A completed report name needs to be specified for {0}..\n        /// </summary>\n        public static string error_NoCompletedReportName {\n            get {\n                return ResourceManager.GetString(\"error_NoCompletedReportName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has no email address..\n        /// </summary>\n        public static string error_NoEmailAddress {\n            get {\n                return ResourceManager.GetString(\"error_NoEmailAddress\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Details not available..\n        /// </summary>\n        public static string error_NoInfo {\n            get {\n                return ResourceManager.GetString(\"error_NoInfo\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The rule requires an initiator..\n        /// </summary>\n        public static string error_NoInitiator {\n            get {\n                return ResourceManager.GetString(\"error_NoInitiator\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to load mailing list &apos;{1}&apos; for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_NoMailingList1ForAction0 {\n            get {\n                return ResourceManager.GetString(\"error_NoMailingList1ForAction0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to A mailing list needs to be specified for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_NoMailingListForAction0 {\n            get {\n                return ResourceManager.GetString(\"error_NoMailingListForAction0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; has no message..\n        /// </summary>\n        public static string error_NoMessage {\n            get {\n                return ResourceManager.GetString(\"error_NoMessage\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to load report &apos;{1}&apos; for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_NoReport1ForAction0 {\n            get {\n                return ResourceManager.GetString(\"error_NoReport1ForAction0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to A report name needs to be specified for &apos;{0}&apos;..\n        /// </summary>\n        public static string error_NoReportNameForAction0 {\n            get {\n                return ResourceManager.GetString(\"error_NoReportNameForAction0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Case does not have property &apos;{0}&apos;..\n        /// </summary>\n        public static string error_NoSuchCaseProperty0 {\n            get {\n                return ResourceManager.GetString(\"error_NoSuchCaseProperty0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Executing user does not have enough security for action &apos;{0}&apos;.\n        /// </summary>\n        public static string error_NotEnoughSecurityForAction0 {\n            get {\n                return ResourceManager.GetString(\"error_NotEnoughSecurityForAction0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The path {0} contains invalid characters..\n        /// </summary>\n        public static string error_Path0HasInvalidChars {\n            get {\n                return ResourceManager.GetString(\"error_Path0HasInvalidChars\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to An unexpected error occurred during processing rule &apos;{0}&apos;..\n        /// </summary>\n        public static string error_ProcessFailed {\n            get {\n                return ResourceManager.GetString(\"error_ProcessFailed\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not retrieve the trigger object for rule &apos;{0}&apos;..\n        /// </summary>\n        public static string error_ProcessInvalidTriggerObject {\n            get {\n                return ResourceManager.GetString(\"error_ProcessInvalidTriggerObject\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Recursive execution was detected on rule &apos;{0}&apos; called from rule &apos;{1}&apos;..\n        /// </summary>\n        public static string error_RecursiveExecutionOnRule0FromRule1 {\n            get {\n                return ResourceManager.GetString(\"error_RecursiveExecutionOnRule0FromRule1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Failed to generate or send report &apos;{0}&apos;. Additional details: {1}..\n        /// </summary>\n        public static string error_Report0FailedWithDetails1 {\n            get {\n                return ResourceManager.GetString(\"error_Report0FailedWithDetails1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Records management is not enabled for the account..\n        /// </summary>\n        public static string error_RMNotEnabled {\n            get {\n                return ResourceManager.GetString(\"error_RMNotEnabled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule &apos;{0}&apos; needs at least one action..\n        /// </summary>\n        public static string error_RuleHasNoActions {\n            get {\n                return ResourceManager.GetString(\"error_RuleHasNoActions\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Custom rule &apos;{0}&apos; ({1}) is invalid and has been disabled..\n        /// </summary>\n        public static string error_RuleInvalidAndDisabled {\n            get {\n                return ResourceManager.GetString(\"error_RuleInvalidAndDisabled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule &apos;{0}&apos; was misconfigured. Some actions or filters may have been removed..\n        /// </summary>\n        public static string error_RuleMisconfigured {\n            get {\n                return ResourceManager.GetString(\"error_RuleMisconfigured\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule &apos;{0}&apos; requires one and only one &apos;{1}&apos; filter with a wildcard pattern ending in &apos;.csv&apos;..\n        /// </summary>\n        public static string error_RuleNeedSingleCsvFilter {\n            get {\n                return ResourceManager.GetString(\"error_RuleNeedSingleCsvFilter\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule &apos;{0}&apos; requires exactly one &apos;{1}&apos; filter..\n        /// </summary>\n        public static string error_RuleNeedSingleNameLikeFilter {\n            get {\n                return ResourceManager.GetString(\"error_RuleNeedSingleNameLikeFilter\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Only chained document rules may be used as actions in other rules..\n        /// </summary>\n        public static string error_RuleNotChained {\n            get {\n                return ResourceManager.GetString(\"error_RuleNotChained\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The account does not allow setting security using smart rules..\n        /// </summary>\n        public static string error_SecurityNotAllowedBecauseABACisEnabled {\n            get {\n                return ResourceManager.GetString(\"error_SecurityNotAllowedBecauseABACisEnabled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The rule may not include itself in its list of actions..\n        /// </summary>\n        public static string error_SelfReferencedChainedRule {\n            get {\n                return ResourceManager.GetString(\"error_SelfReferencedChainedRule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Report {0} failed, and will be rescheduled..\n        /// </summary>\n        public static string error_SendReport0Rescheduled {\n            get {\n                return ResourceManager.GetString(\"error_SendReport0Rescheduled\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Task &apos;{0}&apos; does not exist in case &apos;{1}&apos;..\n        /// </summary>\n        public static string error_Task0NotFoundForCase1 {\n            get {\n                return ResourceManager.GetString(\"error_Task0NotFoundForCase1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to This template is not valid for use in a custom rule because it is missing some information needed to create a reminder..\n        /// </summary>\n        public static string error_ThisTemplateIsNotValidInARule {\n            get {\n                return ResourceManager.GetString(\"error_ThisTemplateIsNotValidInARule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to User &apos;{0}&apos; does not have enough privileges to create records..\n        /// </summary>\n        public static string error_User0MayNotCreateRecords {\n            get {\n                return ResourceManager.GetString(\"error_User0MayNotCreateRecords\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not interpret value &apos;{0}&apos; as date..\n        /// </summary>\n        public static string error_Value0isBadDate {\n            get {\n                return ResourceManager.GetString(\"error_Value0isBadDate\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Could not interpret value &apos;{0}&apos; as UID..\n        /// </summary>\n        public static string error_Value0isBadUid {\n            get {\n                return ResourceManager.GetString(\"error_Value0isBadUid\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0} This field in Column {1}, Row {2} will be ignored.&lt;br /&gt;.\n        /// </summary>\n        public static string error0InColumn1Row2 {\n            get {\n                return ResourceManager.GetString(\"error0InColumn1Row2\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to FaxNumber malformed: {0}..\n        /// </summary>\n        public static string FaxNumber0Malformed {\n            get {\n                return ResourceManager.GetString(\"FaxNumber0Malformed\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Filter.\n        /// </summary>\n        public static string Filter {\n            get {\n                return ResourceManager.GetString(\"Filter\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; for &apos;{1}&apos; in group &apos;{2}&apos;.\n        /// </summary>\n        public static string HasAttributeValueFilterInfo {\n            get {\n                return ResourceManager.GetString(\"HasAttributeValueFilterInfo\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Executed by rule &apos;{0}&apos;.\n        /// </summary>\n        public static string HistoryByRule0 {\n            get {\n                return ResourceManager.GetString(\"HistoryByRule0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Id.\n        /// </summary>\n        public static string Id {\n            get {\n                return ResourceManager.GetString(\"Id\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Issues encountered for user &apos;{0}&apos;:.\n        /// </summary>\n        public static string IssuesEncounteredForUser0 {\n            get {\n                return ResourceManager.GetString(\"IssuesEncounteredForUser0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Last updated {0} days ago in &apos;{1}&apos;.\n        /// </summary>\n        public static string LastUpdated0DaysInFolder1 {\n            get {\n                return ResourceManager.GetString(\"LastUpdated0DaysInFolder1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to ManagedBy email malformed: {0}..\n        /// </summary>\n        public static string ManagedByEmail0Malformed {\n            get {\n                return ResourceManager.GetString(\"ManagedByEmail0Malformed\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to ManagedBy: &apos;{0}&apos; does not exist..\n        /// </summary>\n        public static string ManagerByEmailAddress0DoesNotExist {\n            get {\n                return ResourceManager.GetString(\"ManagerByEmailAddress0DoesNotExist\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Attribute group &apos;{0}&apos; assigned.\n        /// </summary>\n        public static string MetaGroup0Assigned {\n            get {\n                return ResourceManager.GetString(\"MetaGroup0Assigned\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Attribute value &apos;{0}&apos; assigned to attribute field &apos;{1}&apos;.\n        /// </summary>\n        public static string MetaValue0AssignedToField1 {\n            get {\n                return ResourceManager.GetString(\"MetaValue0AssignedToField1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Name.\n        /// </summary>\n        public static string Name {\n            get {\n                return ResourceManager.GetString(\"Name\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Name of task to update..\n        /// </summary>\n        public static string NameOfTaskToUpdate {\n            get {\n                return ResourceManager.GetString(\"NameOfTaskToUpdate\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to No document were moved into the trash folder..\n        /// </summary>\n        public static string NoDocumentsMovedToTrash {\n            get {\n                return ResourceManager.GetString(\"NoDocumentsMovedToTrash\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Does not have email column (used as username)..\n        /// </summary>\n        public static string NoEmailColumn {\n            get {\n                return ResourceManager.GetString(\"NoEmailColumn\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Groups column not specified..\n        /// </summary>\n        public static string NoGroupColumn {\n            get {\n                return ResourceManager.GetString(\"NoGroupColumn\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to No problems were reported moving any documents into the trash folder..\n        /// </summary>\n        public static string NoProblemsMovingDocumentsToTrash {\n            get {\n                return ResourceManager.GetString(\"NoProblemsMovingDocumentsToTrash\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule transaction stack not available..\n        /// </summary>\n        public static string NoRuleTransactionStack {\n            get {\n                return ResourceManager.GetString(\"NoRuleTransactionStack\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to not .\n        /// </summary>\n        public static string not_ {\n            get {\n                return ResourceManager.GetString(\"not_\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Parent Task Name.\n        /// </summary>\n        public static string ParentName {\n            get {\n                return ResourceManager.GetString(\"ParentName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Persona: &apos;{0}&apos; does not exist..\n        /// </summary>\n        public static string Persona0DoesNotExist {\n            get {\n                return ResourceManager.GetString(\"Persona0DoesNotExist\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to PhoneNumber malformed: {0}..\n        /// </summary>\n        public static string PhoneNumber0Malformed {\n            get {\n                return ResourceManager.GetString(\"PhoneNumber0Malformed\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0} documents were processed. An email has been sent with details..\n        /// </summary>\n        public static string Processed0Docs {\n            get {\n                return ResourceManager.GetString(\"Processed0Docs\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Processed {0} documents..\n        /// </summary>\n        public static string Processed0Documents_ {\n            get {\n                return ResourceManager.GetString(\"Processed0Documents_\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; for &apos;{1}&apos;..\n        /// </summary>\n        public static string PropertyValue0ForProperty1 {\n            get {\n                return ResourceManager.GetString(\"PropertyValue0ForProperty1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Reason.\n        /// </summary>\n        public static string Reason {\n            get {\n                return ResourceManager.GetString(\"Reason\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to A recursive execution has been detected for rule &apos;{0}&apos;. The rule will not be processed again within this rule transaction. Trace: {1}.\n        /// </summary>\n        public static string RecursionDetectedForRule {\n            get {\n                return ResourceManager.GetString(\"RecursionDetectedForRule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0} was already being exported. It will be retried once the export finishes..\n        /// </summary>\n        public static string Report0AlreadyRunning {\n            get {\n                return ResourceManager.GetString(\"Report0AlreadyRunning\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0} delivered to {1}  named {2}..\n        /// </summary>\n        public static string Report0WillBeDeliveredTo1FolderAndNamed2 {\n            get {\n                return ResourceManager.GetString(\"Report0WillBeDeliveredTo1FolderAndNamed2\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule &apos;{0}&apos; processed successfully..\n        /// </summary>\n        public static string Rule0ProcecessedOK {\n            get {\n                return ResourceManager.GetString(\"Rule0ProcecessedOK\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Rule Service.\n        /// </summary>\n        public static string RuleServiceName {\n            get {\n                return ResourceManager.GetString(\"RuleServiceName\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Transaction {2} rule &apos;{3}&apos; ({4}) document &apos;{5}&apos; ({6}) at {1:yyyy-MM-dd HH:mm:ss.fff} UTC.{0}.\n        /// </summary>\n        public static string RuleTransactionStackEntry {\n            get {\n                return ResourceManager.GetString(\"RuleTransactionStackEntry\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0} for {1}..\n        /// </summary>\n        public static string Security0For1 {\n            get {\n                return ResourceManager.GetString(\"Security0For1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; failed to execute, but it did not cause the rule to fail..\n        /// </summary>\n        public static string SendEmailNotExecuted {\n            get {\n                return ResourceManager.GetString(\"SendEmailNotExecuted\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0}: Auto notification from rule &apos;{1}&apos; on {3} &apos;{2}&apos;..\n        /// </summary>\n        public static string SendEmailSubject {\n            get {\n                return ResourceManager.GetString(\"SendEmailSubject\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0}: Auto notification from scheduled rule &apos;{1}&apos;..\n        /// </summary>\n        public static string SendEmailSubjectForScheduledRule {\n            get {\n                return ResourceManager.GetString(\"SendEmailSubjectForScheduledRule\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to {0} to {1}.\n        /// </summary>\n        public static string SendEmailTo {\n            get {\n                return ResourceManager.GetString(\"SendEmailTo\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Successfully Added: {0} Updated: {1} Deleted: {2} users..\n        /// </summary>\n        public static string SuccessfullyAdded0Updated1Deleted2Users {\n            get {\n                return ResourceManager.GetString(\"SuccessfullyAdded0Updated1Deleted2Users\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Task &apos;{0}&apos; already exists for case &apos;{1}&apos;..\n        /// </summary>\n        public static string Task0AlreadyExistsForCase1 {\n            get {\n                return ResourceManager.GetString(\"Task0AlreadyExistsForCase1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Updated Time.\n        /// </summary>\n        public static string UpdatedTime {\n            get {\n                return ResourceManager.GetString(\"UpdatedTime\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; to &apos;{1}&apos;.\n        /// </summary>\n        public static string UpdateProperty0ToValue1 {\n            get {\n                return ResourceManager.GetString(\"UpdateProperty0ToValue1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Valid options are:.\n        /// </summary>\n        public static string ValidDropDownOptions_ {\n            get {\n                return ResourceManager.GetString(\"ValidDropDownOptions_\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to via Document Rules.\n        /// </summary>\n        public static string ViaDocumentRules {\n            get {\n                return ResourceManager.GetString(\"ViaDocumentRules\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Task may not be assigned to a user who is not a member of the case team..\n        /// </summary>\n        public static string warn_AssigneeNotTeamMember {\n            get {\n                return ResourceManager.GetString(\"warn_AssigneeNotTeamMember\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The user does not have enough privileges to be assigned to the case task..\n        /// </summary>\n        public static string warn_AssigneeWithoutEnoughPrivs {\n            get {\n                return ResourceManager.GetString(\"warn_AssigneeWithoutEnoughPrivs\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Chained rule &apos;{0}&apos; was skipped because it was disabled..\n        /// </summary>\n        public static string warn_ChainedRule0DisabledAndSkipped {\n            get {\n                return ResourceManager.GetString(\"warn_ChainedRule0DisabledAndSkipped\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Expression &apos;{0}&apos; evaluated to empty value..\n        /// </summary>\n        public static string warn_CustomExpression0EvaluatedToBlank {\n            get {\n                return ResourceManager.GetString(\"warn_CustomExpression0EvaluatedToBlank\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Document &apos;{0}&apos; is already classified as a &apos;{1}&apos; record..\n        /// </summary>\n        public static string warn_Document0AlreadyClassifiedAs1 {\n            get {\n                return ResourceManager.GetString(\"warn_Document0AlreadyClassifiedAs1\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Invalid status change for task &apos;{0}&apos; - from {1} to {2}..\n        /// </summary>\n        public static string warn_InvalidTaskStatusChange {\n            get {\n                return ResourceManager.GetString(\"warn_InvalidTaskStatusChange\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Action &apos;{0}&apos; was not executed because the target document was in folder &apos;{1}&apos; which has a legacy rule on folder assigned to it..\n        /// </summary>\n        public static string warn_LegacyRuleFolder {\n            get {\n                return ResourceManager.GetString(\"warn_LegacyRuleFolder\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to The event did not identify the updated task..\n        /// </summary>\n        public static string warn_NoUpdatedTask {\n            get {\n                return ResourceManager.GetString(\"warn_NoUpdatedTask\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Parent task &apos;{0}&apos; does not exist..\n        /// </summary>\n        public static string warn_ParentTask0NotFound {\n            get {\n                return ResourceManager.GetString(\"warn_ParentTask0NotFound\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Task &apos;{0}&apos; requires a document..\n        /// </summary>\n        public static string warn_Task0RequiresDocument {\n            get {\n                return ResourceManager.GetString(\"warn_Task0RequiresDocument\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to Workflow instance {0}.\n        /// </summary>\n        public static string WorkflowInstance0 {\n            get {\n                return ResourceManager.GetString(\"WorkflowInstance0\", resourceCulture);\n            }\n        }\n        \n        /// <summary>\n        ///   Looks up a localized string similar to &apos;{0}&apos; as &apos;{1}&apos;.\n        /// </summary>\n        public static string WorkProcess0as1 {\n            get {\n                return ResourceManager.GetString(\"WorkProcess0as1\", resourceCulture);\n            }\n        }\n    }\n}\n",
            "relevance_score": 100,
            "reasoning": "Contains method call: SetAttribute (4 times)"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Common/AbstractCustomRuleActionJsonConverter .cs",
            "content": "\ufeffusing System;\n\nusing ADEXS.CustomRules.Actions;\n\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\nusing Newtonsoft.Json.Linq;\n\nusing static ADEXS.Core.Types.Enums;\n\nnamespace ADEXS.CustomRules.Common;\n\npublic class AbstractCustomRuleActionJsonConverter : CustomCreationConverter<AbstractCustomRuleAction>\n{\n\tprivate CustomRuleActionType _actionType;\n\n\tpublic override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)\n\t{\n\t\tvar jsonObj = JToken.ReadFrom(reader);\n\t\tif (jsonObj == null || !jsonObj.HasValues)\n\t\t{\n\t\t\treturn null;\n\t\t}\n\t\t_actionType = (CustomRuleActionType)Enum.Parse(typeof(CustomRuleActionType), jsonObj[nameof(AbstractCustomRuleAction.ActionType)]?.ToString());\n\t\treturn base.ReadJson(jsonObj.CreateReader(), objectType, existingValue, serializer);\n\t}\n\n\tpublic override AbstractCustomRuleAction Create(Type objectType)\n\t{\n\t\treturn _actionType switch\n\t\t{\n\t\t\tCustomRuleActionType.MoveDocument => new MoveDocument(),\n\t\t\tCustomRuleActionType.StartWorkflow => new StartWorkflow(),\n\t\t\tCustomRuleActionType.SetAttributeGroup => new SetAttributeGroup(),\n\t\t\tCustomRuleActionType.SetAttributeValue => new SetAttributeValue(),\n\t\t\tCustomRuleActionType.SendEmail => new SendEmail(),\n\t\t\tCustomRuleActionType.BulkMetadataImport => new BulkMetadataImport(),\n\t\t\tCustomRuleActionType.StartApprovalTemplate => new StartApprovalTemplate(),\n\t\t\tCustomRuleActionType.NotifyWebService => new NotifyWebService(),\n\t\t\tCustomRuleActionType.DeleteDocument => new DeleteDocument(),\n\t\t\tCustomRuleActionType.SendReport => new SendReport(),\n\t\t\tCustomRuleActionType.SetSecurity => new SetSecurity(),\n\t\t\tCustomRuleActionType.CreateFolder => new CreateFolder(),\n\t\t\tCustomRuleActionType.UserSyncFromFile => new UserSyncFromFile(),\n\t\t\tCustomRuleActionType.UpdateDescription => new UpdateDescription(),\n\t\t\tCustomRuleActionType.Rename => new Rename(),\n\t\t\tCustomRuleActionType.CopyDocument => new CopyDocument(),\n\t\t\tCustomRuleActionType.RunRule => new RunRule(),\n\t\t\tCustomRuleActionType.SendChatterPost => new SendChatterPost(),\n\t\t\tCustomRuleActionType.ScheduleReminder => new ScheduleReminder(),\n\t\t\tCustomRuleActionType.DeliverReportToFolder => new DeliverReportToFolder(),\n\t\t\tCustomRuleActionType.LimitedUserSyncFromFile => new LimitedUserSyncFromFile(),\n\t\t\tCustomRuleActionType.RenameFolder => new RenameFolder(),\n\t\t\tCustomRuleActionType.MoveFolder => new MoveFolder(),\n\t\t\tCustomRuleActionType.Undefined => throw new NotSupportedException(),\n\t\t\t_ => throw new NotSupportedException()\n\t\t};\n\t}\n}\n",
            "relevance_score": 100,
            "reasoning": "Contains method call: SetAttribute (4 times)"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules/Actions/SetAttributeValue.cs",
            "content": "\ufeffusing System;\nusing System.Collections.Generic;\nusing ADEXS.Core.Domain.Model;\nusing ADEXS.Core.Domain.Persistence.Model;\nusing ADEXS.Core.Domain.Repository.CustomRuleRepository;\nusing ADEXS.Core.Domain.Repository.MetadataRepository;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Conversions;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.CustomRules.Common;\n\nnamespace ADEXS.CustomRules.Actions\n{\n\t[Serializable]\n\tpublic class SetAttributeValue : AbstractCustomRuleAction\n\t{\n\t\tprivate Guid _metaFieldUid = Guid.Empty;\n\t\tprivate MetadataField _metaField;\n\t\tprivate string _metaParamValue = \"\";\n\t\tprivate string _metaValueToSave;\n\n\t\tpublic override IList<Enums.ObjectType> UsableRuleTypes(Account account)\n\t\t{\n\t\t\treturn RuleUsabilityHelper.GetCachedListFor(Enums.ObjectType.Document, Enums.ObjectType.Folder);\n\t\t}\n\n\t\tinternal SetAttributeValue()\n\t\t{\n\t\t\tActionType = Enums.CustomRuleActionType.SetAttributeValue;\n\t\t}\n\n\t\tpublic SetAttributeValue(AbstractCustomRule rul)\n\t\t\t: this()\n\t\t{\n\t\t\tRule = rul;\n\t\t}\n\n\t\tinternal SetAttributeValue(CustomRuleAction dbAction)\n\t\t\t: base(dbAction)\n\t\t{\n\t\t}\n\n\t\tinternal override bool UpdatesMetadata()\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic override bool Equals(AbstractCustomRuleAction obj)\n\t\t{\n\t\t\tif (null == obj || !(obj is SetAttributeValue))\n\t\t\t\treturn false;\n\t\t\treturn ((SetAttributeValue)obj)._metaFieldUid == _metaFieldUid &&\n\t\t\t\t\t((SetAttributeValue)obj)._metaParamValue == _metaParamValue;\n\t\t}\n\n\t\tprotected internal override bool Validate(CustomRuleOutcome outcome)\n\t\t{\n\t\t\tException ex;\n\t\t\tif (!Validator.ValidateMetaField(Rule.AccountId, _metaFieldUid, ref _metaField, out ex))\n\t\t\t{\n\t\t\t\tif (null == ex)\n\t\t\t\t{\n\t\t\t\t\toutcome.FailMsg = string.Format(Resources.CustomRules.error_InvalidAttributeField, Name);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\toutcome.Exception = ex;\n\t\t\t\t\toutcome.FailMsg = Resources.CustomRules.error_FailedToValidateWithException;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t_metaValueToSave = _metaParamValue;\n\n\t\t\t// validate the value\n\t\t\tif (!_metaField.IsRequiredAttribute && _metaParamValue == \"\")\n\t\t\t\treturn true;\n\n\t\t\tif (NeedsEvaluation(_metaParamValue))\n\t\t\t{\n\t\t\t\tif (null == Rule.ExecutionContext)\n\t\t\t\t\treturn true;  // can only be done at run time\n\n\t\t\t\t_metaValueToSave = EvaluateParameter(_metaParamValue);\n\t\t\t}\n\n\t\t\tstring outMessage;\n\t\t\tif (!MetadataRepository.ValidateTypeAndFormat(ref _metaValueToSave, _metaField, Rule.RuleUser.Settings.CultureInfo, out outMessage))\n\t\t\t{\n\t\t\t\toutcome.FailMsg = outMessage;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic override bool Execute()\n\t\t{\n\t\t\tCustomRuleOutcome outcome = Rule.ExecutionOutcome;\n\t\t\tCustomRuleExecutionContext execContext = Rule.ExecutionContext;\n\t\t\t// to check to make sure the value is the same and no saving is needed, \n\t\t\t// the field data needs to be loaded. So we'll do the full validation.\n\t\t\tif (!Validate(outcome))\n\t\t\t{\n\t\t\t\toutcome.FailMsg = string.Format(Resources.CustomRules.error_InvalidAttributeField, Name);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tICustomRuleTrigger trig = Rule.TriggerObject;\n\t\t\tif (!trig.CanBeUpdatedFormRule())\n\t\t\t{\n\t\t\t\toutcome.FailMsg = string.Format(Resources.CustomRules.error_NotEnoughSecurityForAction0, Name);\n\t\t\t\toutcome.Dispose = true;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (null == _metaValueToSave)\n\t\t\t\t{\n\t\t\t\t\toutcome.FailMsg = string.Format(Resources.CustomRules.error_CouldNotParseCustomExpression0, _metaParamValue);\n\t\t\t\t\toutcome.Dispose = true;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tif (\"\" == _metaValueToSave)\n\t\t\t\t{\n\t\t\t\t\toutcome.WarningMsg = string.Format(Resources.CustomRules.warn_CustomExpression0EvaluatedToBlank, _metaParamValue);\n\t\t\t\t}\n\n\t\t\t\tstring oldValue = \"\";\n\t\t\t\tMetadatas metas = ServiceLocator.GetInstance<IMetadataRepository>().LoadMinimal(Rule.AccountId, trig.Type, trig.Uid);\n\t\t\t\tif (null != metas) // the doc has metadata\n\t\t\t\t{\n\t\t\t\t\tMetadata fieldmeta = metas.Find(_metaFieldUid);\n\t\t\t\t\tif (null != fieldmeta) // the doc has our field\n\t\t\t\t\t{\n\t\t\t\t\t\toldValue = fieldmeta.Value;\n\t\t\t\t\t\tif (oldValue == _metaValueToSave)\n\t\t\t\t\t\t\treturn true; // nothing to do\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tMetadata mdata = new Metadata(trig.AccountId, _metaField, trig.Type, trig.Uid, _metaValueToSave) { Validated = true };\n\t\t\t\tmdata.DataType = _metaField.DataType;\n\t\t\t\tRule.MetasToUpdate.Add(mdata);\n\t\t\t\tRule.MetasToUpdate.MetadataHistoryInfo.Add(new HistoryInfo\n\t\t\t\t{\n\t\t\t\t\tOldValue = oldValue,\n\t\t\t\t\tNewValue = _metaValueToSave,\n\t\t\t\t\tHistoryMessage = string.Format(Resources.CustomRules.MetaValue0AssignedToField1, _metaValueToSave, _metaField.Name),\n\t\t\t\t});\n\t\t\t\toutcome.ActionsExecuted = true;\n\t\t\t\texecContext.Logger.DebugWithPII($\"Assigned value '{{0}}' to field {_metaField.Uid}.\", _metaValueToSave);\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\toutcome.FailMsg = string.Format(Resources.CustomRules.error_ActionFailedForDocument, Name, trig.Name);\n\t\t\t\toutcome.Exception = ex;\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tpublic Guid AttributeFieldUid\n\t\t{\n\t\t\tget { return _metaFieldUid; }\n\t\t\tset { _metaFieldUid = value; }\n\t\t}\n\n\t\tpublic string AttributeValue\n\t\t{\n\t\t\tget { return _metaParamValue; }\n\t\t\tset { _metaParamValue = value; }\n\t\t}\n\n\t\tprotected internal override string GetInfoWithValidate(CustomRuleOutcome outcome)\n\t\t{\n\t\t\tif (Validate(outcome))\n\t\t\t{\n\t\t\t\tstring formattedVal = MetadataRepository.FormatMetaValue(_metaValueToSave, _metaField.DataType, Rule.RuleUser.Settings.CultureInfo);\n\t\t\t\tif (_metaField.DataType == Enums.DataType.Actor)\n\t\t\t\t{\n\t\t\t\t\t/*\n\t\t\t\t\t\tSo this is weird we have a FormatMetaValue which is supposed to format value to be human readable but instead we use this \n\t\t\t\t\t\tConvertActorValueToUserFriendlyString. The reason is that the primary use for FormatMetaValue is to format metadata values for input fields but \n\t\t\t\t\t\tfor a user chooser we don't want a user friendly string, we want a raw actor value. So the few places that just want to print the text value of \n\t\t\t\t\t\tthe metadata, use ConvertActorValueToUserFriendlyString.\n\t\t\t\t\t*/\n\t\t\t\t\tformattedVal = MetadataRepository.ConvertActorValueToUserFriendlyString(_metaField.AccountId, _metaValueToSave);\n\t\t\t\t}\n\t\t\t\tif (_metaField.IsEnumeratedDataType())\n\t\t\t\t{\n\t\t\t\t\tformattedVal = _metaField.LocalizeValue(formattedVal);\n\t\t\t\t}\n\t\t\t\treturn string.Format(Resources.CustomRules.HasAttributeValueFilterInfo, formattedVal, _metaField.LocalizedName, _metaField.LocalizedGroupName);\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic override void SerializeParams()\n\t\t{\n\t\t\tstring fieldValue = _metaValueToSave;\n\t\t\tSetParameters(_metaFieldUid != Guid.Empty ? _metaFieldUid.ToString() : \"\", fieldValue);\n\t\t}\n\n\t\tpublic override void DeserializeParams()\n\t\t{\n\t\t\t_metaFieldUid = Guid.Empty;\n\t\t\t_metaParamValue = \"\";\n\t\t\tstring[] vals = GetParameters();\n\t\t\tif (null == vals || vals.Length != 2)\n\t\t\t\treturn;\n\t\t\t_metaFieldUid = Conversions.TryParseGuid(vals[0]);\n\t\t\t_metaField = MetadataFieldPersistence.GetInstance(Rule.AccountId).LoadByUid(Rule.AccountId, _metaFieldUid);\n\t\t\tif (_metaField == null)\n\t\t\t{\n\t\t\t\t_metaParamValue = vals[1];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// rule user could be null if the user was deleted or the rule was just installed via packaging.\n\t\t\t\t_metaParamValue = MetadataRepository.FormatMetaValue(vals[1], _metaField.DataType, Rule.RuleUser?.Settings.CultureInfo ?? Rule.Account.Settings.CultureInfo);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "relevance_score": 100,
            "reasoning": "Contains method call: SetAttribute (8 times)"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
            "content": "\ufeff// BUGBUG: ATL-71924 Move code dependent on System.Web out of Core.Domain\n#if NETFRAMEWORK\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing System.Web;\n\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.ServiceFramework;\nusing ADEXS.Core.ServiceFramework.Helpers;\nusing ADEXS.Core.Util.Config;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.FeatureFlags;\nusing ADEXS.Web.Common.Session;\n\nusing DocuSign.CLM.Monitoring;\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\n\nusing log4net;\nusing log4net.Config;\n\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nusing ApplicationInfo = ADEXS.Core.Domain.Utilities.ApplicationInfo;\n\nnamespace ADEXS.Web.Common;\n\n/// <summary>\n/// Base class for all SCM web applications.\n/// </summary>\npublic abstract class ScmHttpApplication : HttpApplication\n{\n\tprivate ICoreInstrumentationLifetimeService _coreInstrumentationLifetimeService;\n\n\t/// <summary>\n\t/// Don't use the standard Application_Start(). .Net picks one via reflection\n\t/// and runs it. Ends up being this one here, not the one in the derived class.\n\t/// </summary>\n\tprotected void ApplicationStart()\n\t{\n\t\t// log4net initialization\n\t\tFileInfo logConfigFileInfo = new FileInfo(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);\n\t\tXmlConfigurator.ConfigureAndWatch(logConfigFileInfo);\n\n\t\tConfigurationHelper.InitializeConfiguration();\n\n\t\tif (ConfigWrapper.UseOneConfig)\n\t\t{\n\t\t\tBootstrap();\n\t\t}\n\n\t\t// Use MSF specific env variable, fallback to app settings.\n\t\tvar appName = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_APPLICATION\") ?? AppConfig.AppName(ApplicationInfo.Name);\n\t\tvar site = SiteConfig.Site(ApplicationSettings.Site);\n\t\tvar environment = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_ENVIRONMENT\") ?? SiteConfig.Environment(\"Unknown\");\n\t\tvar partition = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_PARTITION\");\n\n\t\tKazmonMonitoring.InitializeKazmon(\n\t\t\tapplicationName: appName,\n\t\t\tappVersion: typeof(ScmHttpApplication).Assembly.GetName().Version.ToString(),\n\t\t\tenvironmentName: environment,\n\t\t\tsiteName: site,\n\t\t\tpartitionName: partition,\n\t\t\tshouldEnableKazmon: () => ApplicationSettings.KazmonEnableMonitoring,\n\t\t\tshouldEnableSmartMon: () => ApplicationSettings.SmartMonEnable,\n\t\t\tshouldEnableLogFileListener: () => Configuration.GetBooleanAppSetting(\"KazmonEnableLogFileListener\", false));\n\n\t\tif (Configuration.GetBooleanAppSetting(\"UseOpenTelemetryNetFramework\", true))\n\t\t{\n\t\t\t_coreInstrumentationLifetimeService = ServiceLocator.Container.TryGetInstance<ICoreInstrumentationLifetimeService>();\n\n\t\t\tif (_coreInstrumentationLifetimeService != null)\n\t\t\t{\n\t\t\t\t// Run synchronously\n\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\tassembly: typeof(ScmHttpApplication).Assembly,\n\t\t\t\t\tconfigureTracer: tracerProviderBuilder =>\n\t\t\t\t\t{\n\t\t\t\t\t\t_ = tracerProviderBuilder\n\t\t\t\t\t\t// [ATL-90561] Adding HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION to traces for NetFramework\n\t\t\t\t\t\t.AddAspNetInstrumentation(options =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\toptions.EnrichWithHttpResponse = (Activity activity, HttpResponse response) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tactivity.SetTag(OtelSemanticConventions.AttributeHttpResponseRedirectUrl, response?.Headers[\"Location\"]);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\toptions.EnrichWithHttpRequest = (Activity activity, HttpRequest request) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tactivity.SetTag(OtelSemanticConventions.AttributeHttpReferer, request?.Headers[\"Referer\"]);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t})\n\t\t\t\t\t.AddSource(typeof(RedisSessionStateProviderWrapper).FullName);\n\t\t\t\t\t},\n\t\t\t\t\tconfigureMeter: o => o.AddAspNetInstrumentation(options => options.Enrich = (HttpContext context, ref TagList tags) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!tags.Any(t => t.Key == \"http.route\") &&\n\t\t\t\t\t\t\tcontext.Request != null &&\n\t\t\t\t\t\t\t(context.Request.Url.AbsolutePath.EndsWith(\"aspx\", StringComparison.OrdinalIgnoreCase) ||\n\t\t\t\t\t\t\t context.Request.Url.AbsolutePath.EndsWith(\"asmx\", StringComparison.OrdinalIgnoreCase) ||\n\t\t\t\t\t\t\t context.Request.Url.AbsolutePath.EndsWith(\"ashx\", StringComparison.OrdinalIgnoreCase)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttags.Add(\"url.path\", context.Request.Url.AbsolutePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t}))).GetAwaiter().GetResult();\n\t\t\t}\n\t\t}\n\n\t\tif (!ConfigWrapper.UseOneConfig)\n\t\t{\n\t\t\tBootstrap();\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// This one stays the standard Application_End(), as no derive class overrides it.\n\t/// </summary>\n\tprotected virtual void Application_End()\n\t{\n\t\ttry\n\t\t{\n\t\t\tLogManager.Shutdown();\n\t\t}\n\t\tcatch { }\n\n\t\tUninitializeFeatureFlags();\n\n\t\tif (_coreInstrumentationLifetimeService != null)\n\t\t{\n\t\t\t// Run synchronously\n\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StopAsync()).GetAwaiter().GetResult();\n\t\t}\n\n\t\tKazmonMonitoring.ShutdownKazmon();\n\t}\n\n\t/// <summary>\n\t/// This method is called once during application startup to initialize feature flags.\n\t/// </summary>\n\tprotected virtual void InitializeFeatureFlags()\n\t{\n\t\tif (ApplicationSettings.EnableFeatureFlags)\n\t\t{\n\t\t\tFeatureFlagsBootstrap.Init(ApplicationSettings.Site);\n\t\t}\n\t\telse if (ApplicationSettings.EnableFeatureFlagsContext)\n\t\t{\n\t\t\tFeatureFlagsBootstrap.InitializeContextOnly();\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// This method is called once during application shutdown to uninitialize feature flags.\n\t/// </summary>\n\tprotected virtual void UninitializeFeatureFlags()\n\t{\n\t\tif (ApplicationSettings.EnableFeatureFlags || ApplicationSettings.EnableFeatureFlagsContext)\n\t\t{\n\t\t\tFeatureFlagsBootstrap.UnInitialize();\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// This method is called once during application startup to bootstrap the dependency injection container.\n\t/// </summary>\n\tprotected virtual void Bootstrap()\n\t{\n\t}\n}\n\n#endif\n",
            "relevance_score": 90,
            "reasoning": "Matches 3 keywords: HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION, OpenTelemetry"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
            "content": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Web.Mvc;\nusing System.Web.SessionState;\nusing ADEXS.Core.Domain.Model;\nusing ADEXS.Core.Domain.Repository.DocumentRepository;\nusing ADEXS.Web.Common;\nusing ADEXS.Web.DocExplorer.Models.PanelModels;\nusing ADEXS.Web.MVC;\nusing ADEXS.Core.Domain.Persistence.Model;\nusing ADEXS.Core.Domain.Repository.MetadataRepository;\nusing ADEXS.Core.Types;\nusing ADEXS.Web.Common.Helpers;\nusing ADEXS.Core.Util.Text;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Exceptions;\nusing ADEXS.Core.Domain.FeatureFlags;\nusing ADEXS.Core.Domain.Repository.User;\nusing ADEXS.Core.Domain.Translation.Utilities;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.SqlCorePersistence;\nusing ADEXS.Web.AtlasUrl;\nusing ADEXS.Web.MVC.Filters;\nusing Newtonsoft.Json;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.Web.Addressbook.Controls.ContactChooser;\nusing static ADEXS.Core.Types.Constants;\nusing Newtonsoft.Json.Linq;\nusing ADEXS.Web.Addressbook.MVC.Models;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Web.Telemetry;\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\n\nnamespace ADEXS.Web.DocExplorer.Controllers.PanelControllers\n{\n\t[RequireAuthentication(true, true, Enums.Privileges.HasGuestRights)]\n\t[SessionState(SessionStateBehavior.ReadOnly)]\n\tpublic class AttributesController : AtlasController\n\t{\n\t\t#region Properties and Variables\n\n\t\tprotected static readonly IDiscreetLogger _log = DiscreetLogger.GetLogger(typeof(AttributesController));\n\n\t\tprivate readonly IDocumentRepository _documentRepository;\n\t\tprivate readonly IFolderRepository _folderRepository;\n\t\tprivate readonly IMetadataRepository _metadataRepository;\n\t\tprivate readonly IMetadataGroupRepository _metadataGroupRepository;\n\t\tprivate readonly IServiceInstrumentation _serviceInstrumentation;\n\n\t\tprivate IRetrieveTranslationUtility _translationUtility;\n\t\tprivate IRetrieveTranslationUtility TranslationUtility\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (_translationUtility == null)\n\t\t\t\t{\n\t\t\t\t\t_translationUtility = ServiceLocator.GetInstance<IRetrieveTranslationUtility>();\n\t\t\t\t\t_translationUtility.SetDefaultNamespace(Enums.TranslationNamespace.Attributes);\n\t\t\t\t}\n\t\t\t\treturn _translationUtility;\n\t\t\t}\n\t\t}\n\n\t\tprivate Metadatas _persistedDocMetadatas;  // make this a private variable so that it doesn't have to be passed around\n\t\tprivate HashSet<Guid> _visibleGroupUids;\n\n\t\tprivate Dictionary<string, List<string>> keys = new Dictionary<string, List<string>>();\n\n\t\t#endregion\n\n\t\t#region Constructor\n\n\t\tpublic AttributesController(\n\t\t\tIDocumentRepository documentRepository,\n\t\t\tIFolderRepository folderRepository,\n\t\t\tIMetadataRepository metadataRepository,\n\t\t\tIMetadataGroupRepository metadataGroupRepository,\n\t\t\tIServiceInstrumentation serviceInstrumentation)\n\t\t{\n\t\t\t_documentRepository = documentRepository;\n\t\t\t_folderRepository = folderRepository;\n\t\t\t_metadataRepository = metadataRepository;\n\t\t\t_metadataGroupRepository = metadataGroupRepository;\n\t\t\t_serviceInstrumentation = serviceInstrumentation;\n\t\t}\n\n\t\t#endregion\n\n\t\tpublic ActionResult Index(string id, Guid docUid, Guid folderUid, int priority = 0)\n\t\t{\n\t\t\tLoadAndValidateDocument(docUid);\n\t\t\tLoadAndValidateFolder(folderUid);\n\n\t\t\tvar currentUser = SessionData.CurrentUser;\n\n\t\t\t// don't load up the whole view model here, angular will lazy load it because the Attributes panel is not the first visible panel on the page\n\t\t\tAttributesViewModel vm = new AttributesViewModel\n\t\t\t{\n\t\t\t\tAccountId = currentUser.AccountId,\n\t\t\t\tId = id,\n\t\t\t\tdocUid = docUid,\n\t\t\t\tfolderUid = folderUid,\n\t\t\t\tPriority = priority,\n\t\t\t\tGroupType = Enums.ToStringIntDictionary<Enums.GroupType>(),\n\t\t\t\tChooserUrl = WebUrl.AddressBook.GetContacts,\n\t\t\t\tCanViewAttributes =  currentUser.Account.Settings.AllowAttributes && HasSufficientRightsToView(),\n\t\t\t\tShowDocumentDetails = ShouldShowDocumentDetails(currentUser)\n\t\t\t};\n\n\t\t\treturn PartialView(\"~/Views/DocExplorer/PanelViews/_AttributesPanel.cshtml\", vm);\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult SaveAttributes(string attrvm)\n\t\t{\n\t\t\tusing var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tattrvm = WebUtility.HtmlDecode(attrvm);\n\t\t\t\tvar attributes = attrvm.ToObject<AttributesViewModel>();\n\t\t\t\tsaveActivity?.SetTag(\"docusign.document.id\", attributes.docUid);\n\n\t\t\t\tvar document = LoadAndValidateDocument(attributes.docUid);\n\n\t\t\t\tif (AttributesShouldBeReadOnly(document))\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"Attributes failed to save, document is read only.\");\n\t\t\t\t}\n\n\t\t\t\t_persistedDocMetadatas = _metadataRepository.Load(SessionData.CurrentUser, document.Type, document.Uid);\n\t\t\t\tsaveActivity?.AddEvent(new ActivityEvent(\"Preparing the save\", saveActivity.StartTimeUtc.Add(stopwatch.Elapsed)));\n\n\t\t\t\t// Perform setup work before saving, compare attributes that already exist on the document vs the attributes coming in from the client.\n\t\t\t\t// If a change is found, ensure the new values are validated and then build the Metadata objects that the MetadataRepository expects for saving.\n\t\t\t\tvar result = FindMetadatasThatNeedUpdating(attributes, document);\n\t\t\t\tsaveActivity?.AddEvent(new ActivityEvent(nameof(FindMetadatasThatNeedUpdating), saveActivity.StartTimeUtc.Add(stopwatch.Elapsed)));\n\n\t\t\t\tif (result.ErrorMessages != null && result.ErrorMessages.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tstatusMessages.AddErrorMessages(result.ErrorMessages);\n\t\t\t\t}\n\t\t\t\telse if (result.UpdatingMetadatas.Count == 0 && result.DeletingMetadatas.Count == 0 && result.DeletingGroups.Count == 0)\n\t\t\t\t{\n\t\t\t\t\tstatusMessages.AddInfoMessage(Resources.Admin.DocExplorer_NoChangesNothingSaved);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tusing (new DatabaseConnectionSwitch(SessionData.CurrentUser))\n\t\t\t\t\t{\n\t\t\t\t\t\tusing (DatabaseTransaction transaction = DatabaseConnection.ThreadConnection.BeginTransaction())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar errors = new List<string>();\n\t\t\t\t\t\t\tif (result.UpdatingMetadatas.Count > 0 || result.DeletingMetadatas.Count > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t/////***** Perform the Metedata SAVE here *****/////\n\t\t\t\t\t\t\t\terrors.AddRange(_metadataRepository.Save(SessionData.CurrentUser, result.UpdatingMetadatas, document, result.DeletingMetadatas));\n\n\t\t\t\t\t\t\t\tif (errors.Count == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tServiceLocator.GetInstance<IUserActionRepository>().LogUserAction(SessionData.CurrentUser, Enums.ActionType.MetadataChanged);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (errors.Count == 0 && result.DeletingGroups.Count > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t/////***** Perform the Group SAVE here *****/////\n\t\t\t\t\t\t\t\terrors.AddRange(SaveDeletedGroups(result.DeletingGroups, document));\n\n\t\t\t\t\t\t\t\tif (errors.Count == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar _userAccount = SessionData.CurrentUser;\n\t\t\t\t\t\t\t\t\tstring groups = string.Join(Resources.Atlas.js_CommaSpace, result.DeletingGroups.Select(c => c.Name));\n\t\t\t\t\t\t\t\t\tJObject dataBag = new DocumentHistoryData(_userAccount).ToJObject();\n\t\t\t\t\t\t\t\t\tdataBag.Add(Constants.HistoryData.GROUPS, new JValue(groups));\n\t\t\t\t\t\t\t\t\tServiceLocator.GetInstance<IObjectHistoryUtility>().LogDocumentAction(_userAccount, document, Enums.ActionType.MetadataChanged, dataBag, Enums.HistoryMessageIdentifiers.Deleted);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsaveActivity?.AddEvent(new ActivityEvent(nameof(SaveAttributes), saveActivity.StartTimeUtc.Add(stopwatch.Elapsed)));\n\t\t\t\t\t\t\tif (errors.Count > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatusMessages.AddErrorMessages(errors);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttransaction.Commit();\n\n\t\t\t\t\t\t\t\tif (SessionData.CurrentUser.Settings.EnableABACSecurity && _documentRepository.GetUpdatedDocumentSecurity(SessionData.CurrentUser, document) < Enums.Security.Write)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSessionData.Messages.AddSuccessMessage(Resources.Admin.AttributesSaved);\n\t\t\t\t\t\t\t\t\tsaveActivity?.SetStatus(ActivityStatusCode.Ok);\n\n\t\t\t\t\t\t\t\t\treturn new JsonResult\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tData = new { success = true, ReloadRequired = true }\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tstatusMessages.AddSuccessMessage(Resources.Admin.AttributesSaved);\n\n\t\t\t\t\t\t\t\tAttributesViewModel vm = null;\n\t\t\t\t\t\t\t\tif (SessionData.CurrentUser.Account.Settings.EnableCreateAttributeViewModelForDocExplorer)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvm = CreateAttributesViewModel(document);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsaveActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\t\t\t\t\treturn new JsonResult\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tData = new { success = true, messages = statusMessages, vm = vm },\n\t\t\t\t\t\t\t\t\tMaxJsonLength = int.MaxValue\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsaveActivity?.SetStatus(ActivityStatusCode.Ok);\n\n\t\t\t\treturn Json(new { success = true, messages = statusMessages });\n\t\t\t}\n\t\t\tcatch(AdexsDisplayException ex)\n\t\t\t{\n\t\t\t\tstatusMessages.AddWarningMessage(ex.Message);\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult LoadAttributes(Guid docUid, Guid folderUid)\n\t\t{\n\t\t\tusing var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\tif (!HasSufficientRightsToView())\n\t\t\t{\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Atlas.error_YouDoNotHaveTheRequiredSecurityToAccessThisPage);\n\t\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAttributesViewModel viewModel;\n\t\t\t\tif (docUid != Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tvar document = LoadAndValidateDocument(docUid);\n\t\t\t\t\tviewModel = CreateAttributesViewModel(document);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar folder = LoadAndValidateFolder(folderUid);\n\t\t\t\t\tviewModel = CreateAttributesViewModel(folder);\n\t\t\t\t}\n\n\t\t\t\tloadActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\treturn new JsonResult\n\t\t\t\t{\n\t\t\t\t\tData = new { success = true, messages = statusMessages, vm = viewModel },\n\t\t\t\t\tMaxJsonLength = int.MaxValue\n\t\t\t\t};\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult LoadGroupSchema(Guid groupUid, Guid docUid, Guid folderUid)\n\t\t{\n\t\t\tusing var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (groupUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Group Uid must be provided\");\n\t\t\t\t}\n\n\t\t\t\tvar group = _metadataGroupRepository.LoadByUid(groupUid);\n\t\t\t\tif (group == null)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException($\"Group {groupUid} not found\");\n\t\t\t\t}\n\n\t\t\t\tgroup.SetTranslationUtility(TranslationUtility);\n\n\t\t\t\tLoadAndValidateDocument(docUid);\n\t\t\t\tLoadAndValidateFolder(folderUid);\n\t\t\t\t_persistedDocMetadatas = new Metadatas();  // Important! to get the groups schema only, we fake having NO metadata info\n\t\t\t\tvar groupViewModel = CreateGroupViewModelWithoutMetadata(new Dictionary<Guid, MetadataGroup> { [groupUid] = group }, folderUid, docUid, false).First();\n\n\t\t\t\tloadGroupSchemaActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\treturn Json(new { success = true, messages = statusMessages, gvm = groupViewModel });\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\tpublic JsonResult Refresh(Guid docUid)\n\t\t{\n\t\t\tusing var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\n\t\t\tif (!HasSufficientRightsToView())\n\t\t\t{\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Atlas.error_YouDoNotHaveTheRequiredSecurityToAccessThisPage);\n\t\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAttributesViewModel viewModel;\n\t\t\t\tif (docUid != Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tvar document = LoadAndValidateDocument(docUid);\n\t\t\t\t\tviewModel = CreateAttributesViewModel(document);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception();\n\t\t\t\t}\n\n\t\t\t\trefreshActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\treturn new JsonResult\n\t\t\t\t{\n\t\t\t\t\tData = new { success = true, messages = statusMessages, viewModel = viewModel.ToJson() },\n\t\t\t\t\tMaxJsonLength = int.MaxValue\n\t\t\t\t};\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult LoadCascadingDropdownOptions(Guid metadataFieldUid, Guid metadataSetUid, Guid docUid, string keyPath)\n\t\t{\n\t\t\tusing var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (metadataFieldUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(@\"Parameter cannot be an empty guid.\", nameof(metadataFieldUid));\n\t\t\t\t}\n\n\t\t\t\tif (metadataSetUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(@\"Parameter cannot be an empty guid.\", nameof(metadataSetUid));\n\t\t\t\t}\n\n\t\t\t\tif (docUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tstatusMessages.AddInfoMessage(Resources.Documents.YouMustSaveThisDocumentBeforeCascadingDropdownsCanBeLoaded);\n\t\t\t\t\treturn Json(new { success = false, messages = statusMessages});\n\t\t\t\t}\n\t\t\t\tvar keyPathList = keyPath == null ? new List<string>() : keyPath.ToObject<List<string>>();\n\n\t\t\t\tLoadAndValidateDocument(docUid);\n\n\t\t\t\tvar options = _metadataRepository.GetCascadingTypeAheadValues(metadataSetUid, metadataFieldUid, keyPathList, SessionData.CurrentAccountId);\n\n\t\t\t\tloadCascadingDropdownOptionsActivity?.SetStatus(ActivityStatusCode.Ok);\n\n\t\t\t\treturn Json(new { success = true, messages = statusMessages, options = options.Values });\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t#region Private functions\n\n\t\tpublic Document LoadAndValidateDocument(Guid docUid)\n\t\t{\n\t\t\tDocument document = null;\n\t\t\tif (docUid != Guid.Empty)\n\t\t\t{\n\t\t\t\tdocument = _documentRepository.LoadByUid(SessionData.CurrentUser, docUid);\n\t\t\t\tif (document == null)\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"Document does not exist or current user does not have permissions to view this document.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn document;\n\t\t}\n\t\tpublic Folder LoadAndValidateFolder(Guid folderUid)\n\t\t{\n\t\t\tFolder folder = null;\n\t\t\tif (folderUid != Guid.Empty)\n\t\t\t{\n\t\t\t\tfolder = _folderRepository.LoadByUid(SessionData.CurrentUser, folderUid);\n\t\t\t\tif (folder == null)\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"Folder does not exist or current user does not have access to this folder.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn folder;\n\t\t}\n\n\t\tprivate bool AttributesShouldBeReadOnly(Document document)\n\t\t{\n\t\t\tif(document == null)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (document.IsViewOnly(SessionData.CurrentUser))  // checked out / locked status\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (!document.HasSecurity(Enums.Security.Write))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (_documentRepository.IsTrashed(SessionData.CurrentUser, document))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate bool IsGroupAvailable(MetadataGroup metadataGroup, Guid folderUid)\n\t\t{\n\t\t\tif(_visibleGroupUids == null)\n\t\t\t{\n\t\t\t\t_visibleGroupUids = _metadataGroupRepository.LoadDisplayByAccountIdAndFolderUid(SessionData.CurrentAccountId, folderUid) ?? new HashSet<Guid>();\n\t\t\t}\n\n\t\t\tif (_visibleGroupUids.Count > 0 && !_visibleGroupUids.Contains(metadataGroup.Uid))\n\t\t\t{\n\t\t\t\treturn false;  // this group is not available because the parent folder is hiding this attribute group\n\t\t\t}\n\n\t\t\treturn !metadataGroup.Hidden;\n\t\t}\n\n\t\tprivate bool HasSufficientRightsToView()\n\t\t{\n\t\t\treturn SessionData.CurrentUser.Role <= SessionData.CurrentUser.Account.Settings.AllowToViewAttributesRole;\n\t\t}\n\n\t\t// Methods used for LOADING metadata\n\t\tprivate AttributesViewModel CreateAttributesViewModel(Folder folder)\n\t\t{\n\t\t\tMetadataGroups allGroups = _metadataGroupRepository.LoadByAccountId(SessionData.CurrentAccountId);\n\t\t\t_persistedDocMetadatas = new Metadatas(); // there is no document, so there are no metadatas\n\n\t\t\t//Start building the view model for the attributes page\n\t\t\tAttributesViewModel vm = new AttributesViewModel();\n\t\t\tvm.folderUid = folder.Uid;\n\t\t\tvm.docUid = Guid.Empty;\n\t\t\tvm.ReadOnly = false; // todo: should we check if the user has permissions to create a document in this folder?\n\t\t\tvm.CanViewAttributes = HasSufficientRightsToView();\n\t\t\tvm.ShowDocumentDetails = ShouldShowDocumentDetails(SessionData.CurrentUser);\n\t\t\tvm.groups = CreateGroupViewModelWithoutMetadata(allGroups.ToDictionary(x => x.Uid, x => x), folder.Uid, Guid.Empty, vm.ReadOnly);\n\t\t\t\n\t\t\treturn vm;\n\t\t}\n\t\tprivate AttributesViewModel CreateAttributesViewModel(Document document)\n\t\t{\n\t\t\tMetadataGroups allGroups = _metadataGroupRepository.LoadByAccountId(SessionData.CurrentAccountId);\n\t\t\t_persistedDocMetadatas = _metadataRepository.Load(SessionData.CurrentUser, document.Type, document.Uid);\n\n\t\t\t//Start building the view model for the attributes page\n\t\t\tAttributesViewModel vm = new AttributesViewModel();\n\t\t\tvm.folderUid = document.FolderUid;\n\t\t\tvm.docUid = document.Uid;\n\t\t\tvm.ReadOnly = AttributesShouldBeReadOnly(document);\n\t\t\tvm.groups = CreateGroupsViewModelWithMetadata(allGroups, document.FolderUid, document.Uid, vm.ReadOnly).ToList();\n\t\t\tvm.EnableCreateAttributeViewModelForDocExplorer =\n\t\t\t\tShouldEnableCreateAttributeViewModel(SessionData.CurrentUser);\n\n\t\t\treturn vm;\n\t\t}\n\n\t\tprivate IEnumerable<AttributeGroupViewModel> CreateGroupsViewModelWithMetadata(MetadataGroups allGroups, Guid folderUid, Guid documentUid, bool docIsReadOnly)\n\t\t{\n\t\t\tvar groupsRemaining = allGroups.ToDictionary(x => x.Uid, x => x);\n\t\t\tbool isLoadingAllAttributeGroupFieldOptions =\n\t\t\t\tDocumentAttributesFeatureFlags.EnableLoadingAllAttributeGroupFieldOptions;\n\t\t\tvar groups = ProcessMetadataIntoModels(\n\t\t\t\tmetadatas: _persistedDocMetadatas,\n\t\t\t\tgroupsRemaining: groupsRemaining,\n\t\t\t\tisAttached: true,\n\t\t\t\tdocumentUid: documentUid,\n\t\t\t\tdocIsReadOnly: docIsReadOnly,\n\t\t\t\tgroupFields: new Dictionary<Guid, MetadataFields>(),\n\t\t\t\tshouldLoadAllMetadataFieldOptions: isLoadingAllAttributeGroupFieldOptions);\n\n\t\t\tgroups.AddRange(CreateGroupViewModelWithoutMetadata(groupsRemaining, folderUid, documentUid, docIsReadOnly, isLoadingAllAttributeGroupFieldOptions));\n\n\t\t\treturn groups.OrderBy(x => x.position);\n\t\t}\n\n\t\tprivate List<AttributeGroupViewModel> CreateGroupViewModelWithoutMetadata(Dictionary<Guid, MetadataGroup> allGroups, Guid folderUid, Guid documentUid, bool docIsReadOnly, bool shouldLoadAllMetadataFieldOptions = true)\n\t\t{\n\t\t\tMetadatas groupMetadatas = new Metadatas();\n\t\t\tDictionary<Guid, MetadataFields> groupFields = new Dictionary<Guid, MetadataFields>();\n\t\t\tforeach (MetadataGroup metadataGroup in allGroups.Values.Where(x => IsGroupAvailable(x, folderUid)))\n\t\t\t{\n\t\t\t\t// the group is not attached, so lets create a Metadata object that acts as a template for a field\n\t\t\t\tgroupFields[metadataGroup.Uid] =\n\t\t\t\t\t_metadataRepository.GetMetadataFieldsByMetadataGroupUid(SessionData.CurrentAccountId,\n\t\t\t\t\t\tmetadataGroup.Uid);\n\t\t\t\tforeach (MetadataField metadataField in groupFields[metadataGroup.Uid])\n\t\t\t\t{\n\t\t\t\t\tMetadata metadataTemplate = new Metadata(SessionData.CurrentAccountId, metadataField,\n\t\t\t\t\t\tmetadataField.MetadataSetNumber, Enums.ObjectType.Document, Guid.Empty, null);\n\t\t\t\t\tgroupMetadatas.Add(metadataTemplate);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ProcessMetadataIntoModels(groupMetadatas, allGroups, false, documentUid, docIsReadOnly, groupFields, shouldLoadAllMetadataFieldOptions);\n\t\t}\n\n\t\tprivate List<AttributeGroupViewModel> ProcessMetadataIntoModels(Metadatas metadatas, Dictionary<Guid, MetadataGroup> groupsRemaining, bool isAttached, Guid documentUid, bool docIsReadOnly, Dictionary<Guid, MetadataFields> groupFields, bool shouldLoadAllMetadataFieldOptions = true)\n\t\t{\n\t\t\tList<AttributeGroupViewModel> groups = new List<AttributeGroupViewModel>();\n\t\t\t//_metadataRepository.LoadByDocumentUid shall be called only when allowAllAttributes == FALSE , in case of TRUE documentMetadataUids will not be used. Avoiding unnecessary in case of TRUE \n\t\t\tvar documentMetadataUids = shouldLoadAllMetadataFieldOptions ? new HashSet<Guid>() : _metadataRepository.LoadByDocumentUid(SessionData.CurrentAccountId, documentUid).Select(m => m.MetadataFieldUid).ToHashSet();\n\t\t\tGuid currentGroupUid = Guid.Empty;\n\t\t\tAttributeGroupViewModel currentGroupModel = null;\n\t\t\tAttributeGroupItemViewModel currentGroupItemModel = new AttributeGroupItemViewModel();\n\t\t\t// first process any groups that are already attached to the document\n\t\t\tforeach (Metadata metadata in metadatas)\n\t\t\t{\n\t\t\t\t// filter out protected AOM system metadata groups because these are made editable on the panel via DocumentDetailsController\n\t\t\t\t// metadata groups are retained on the folders/documents for use in search and reporting\n\t\t\t\tif (metadata.MetadataGroupName == SystemMetadataGroupNames.CLM_PARTY || metadata.MetadataGroupName == SystemMetadataGroupNames.CLM_AGREEMENT_DETAILS)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmetadata.SetTranslationUtility(TranslationUtility);\n\t\t\t\t// metadata is loaded ordered by group position and than name so all rows from the same group are naturally clustered together and when we see a new groupUid, we know we can are done with the previous group and can start processing the new one\n\t\t\t\tif (metadata.MetadataGroupUid != currentGroupUid)\n\t\t\t\t{\n\t\t\t\t\tcurrentGroupUid = metadata.MetadataGroupUid;\n\t\t\t\t\tcurrentGroupModel = new AttributeGroupViewModel\n\t\t\t\t\t{\n\t\t\t\t\t\tid = currentGroupUid.ToString(),\n\t\t\t\t\t\tname = metadata.LocalizedGroupName,\n\t\t\t\t\t\tposition = metadata.MetadataGroupPosition,\n\t\t\t\t\t\titems = new List<AttributeGroupItemViewModel>(),\n\t\t\t\t\t\tattached = isAttached,\n\t\t\t\t\t\tdefinitionHash = groupFields.ContainsKey(currentGroupUid) ? HashObject(Transform(groupFields[currentGroupUid])) : CreateMetadataGroupHash(currentGroupUid),\n\t\t\t\t\t\tisSystem = groupsRemaining[currentGroupUid].System\n\t\t\t\t\t};\n\t\t\t\t\tgroups.Add(currentGroupModel);\n\t\t\t\t\tgroupsRemaining.Remove(currentGroupUid);\n\t\t\t\t}\n\n\t\t\t\t// metadata loaded is further ordered by metadata set number and name which ensures that all metadata from the same set is clustered together\n\t\t\t\tif (metadata.MetadataSetUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tcurrentGroupItemModel = CreateAttributeGroupItemViewModelFromField(metadata);\n\t\t\t\t\tcurrentGroupModel.items.Add(currentGroupItemModel);\n\t\t\t\t}\n\t\t\t\telse if (metadata.MetadataSetUid.ToString() != currentGroupItemModel.setid || metadata.MetadataSetPosition != currentGroupItemModel.position || (metadata.MetadataSetRepeating ? metadata.MetadataSetNumber : 0) != currentGroupItemModel.number)\n\t\t\t\t{\n\t\t\t\t\tcurrentGroupItemModel = CreateSetAttributeGroupItemViewModelFromSet(metadata);\n\t\t\t\t\tcurrentGroupModel.items.Add(currentGroupItemModel);\n\t\t\t\t}\n\t\t\t\tbool populateOptions = shouldLoadAllMetadataFieldOptions || documentMetadataUids.Contains(metadata.MetadataFieldUid);\n\t\t\t\tcurrentGroupItemModel.fields.Add(CreateAttributeFieldViewModel(metadata, documentUid, docIsReadOnly, populateOptions));\n\t\t\t}\n\n\t\t\treturn groups;\n\t\t}\n\n\t\tprivate AttributeGroupItemViewModel CreateAttributeGroupItemViewModelFromField(Metadata docMetadata)\n\t\t{\n\t\t\tAttributeGroupItemViewModel groupItemVm = new AttributeGroupItemViewModel();\n\t\t\tgroupItemVm.type = \"field\";\n\t\t\tgroupItemVm.id = Guid.NewGuid().ToString();\n\t\t\tgroupItemVm.fieldid = docMetadata.MetadataFieldUid.ToString();\n\t\t\tgroupItemVm.groupid = docMetadata.MetadataGroupUid.ToString();\n\t\t\tgroupItemVm.position = docMetadata.MetadataFieldPosition;\n\t\t\tgroupItemVm.name = docMetadata.LocalizedName;\n\t\t\tgroupItemVm.number = docMetadata.Repeating ? docMetadata.MetadataSetNumber : 0;\n\t\t\tgroupItemVm.repeating = docMetadata.Repeating;\n\t\t\tgroupItemVm.fields = new List<AttributeFieldViewModel>();\n\t\t\treturn groupItemVm;\n\t\t}\n\t\tprivate AttributeGroupItemViewModel CreateSetAttributeGroupItemViewModelFromSet(Metadata docMetadata)\n\t\t{\n\t\t\tAttributeGroupItemViewModel groupItemVm = new AttributeGroupItemViewModel();\n\t\t\tgroupItemVm.type = \"set\";\n\t\t\tgroupItemVm.id = Guid.NewGuid().ToString();\n\t\t\tgroupItemVm.setid = docMetadata.MetadataSetUid.ToString();\n\t\t\tgroupItemVm.groupid = docMetadata.MetadataGroupUid.ToString();\n\t\t\tgroupItemVm.position = docMetadata.MetadataSetPosition;\n\t\t\tgroupItemVm.name = docMetadata.LocalizedSetName;\n\t\t\tgroupItemVm.number = docMetadata.MetadataSetRepeating ? docMetadata.MetadataSetNumber : 0;\n\t\t\tgroupItemVm.repeating = docMetadata.MetadataSetRepeating;\n\t\t\tgroupItemVm.fields = new List<AttributeFieldViewModel>();\n\t\t\treturn groupItemVm;\n\t\t}\n\t\tprivate AttributeFieldViewModel CreateAttributeFieldViewModel(\n\t\t\tMetadata docMetadata,\n\t\t\tGuid documentUid,\n\t\t\tbool docIsReadonly,\n\t\t\tbool populateOptions = true)\n\t\t{\n\t\t\tvar fieldvm = new AttributeFieldViewModel();\n\t\t\tfieldvm.id = Guid.NewGuid().ToString();\n\t\t\tfieldvm.metadataid = docMetadata.Uid.ToString();\n\t\t\tfieldvm.fieldid = docMetadata.MetadataFieldUid.ToString();\n\t\t\tfieldvm.name = docMetadata.LocalizedName;\n\t\t\tfieldvm.dataType = (int)docMetadata.DataType;\n\t\t\tfieldvm.value = MetadataRepository.FormatMetaValue(docMetadata.LocalizedValue, docMetadata.DataType, SessionData.CurrentCulture);\n\t\t\tfieldvm.required = docMetadata.IsRequiredAttribute;\n\t\t\tfieldvm.readOnly = docIsReadonly || docMetadata.ReadOnly;\n\t\t\tfieldvm.customErrorMessage = docMetadata.LocalizedCustomValidationErrMsg;\n\t\t\tfieldvm.validationRegEx = docMetadata.LocalizedCustomValidation;\n\t\t\tfieldvm.position = docMetadata.MetadataFieldPosition;\n\t\t\t//String datatype and isLink check\n\t\t\tfieldvm.isLink = docMetadata.DataType == Enums.DataType.String && Uri.IsWellFormedUriString(fieldvm.value, UriKind.Absolute);\n\t\t\t//docMetadata.Definition  // what is this?\n\t\t\tif (docMetadata.DataType == Enums.DataType.Number || docMetadata.DataType == Enums.DataType.Decimal)\n\t\t\t{\n\t\t\t\tfieldvm.decimalChar = SessionData.CurrentCulture.NumberFormat.NumberDecimalSeparator;\n\t\t\t\tfieldvm.groupingChar = SessionData.CurrentCulture.NumberFormat.NumberGroupSeparator;\n\t\t\t}\n\t\t\t//Special casing for various data types\n\t\t\tif (docMetadata.DataType == Enums.DataType.Date)\n\t\t\t{\n\t\t\t\tfieldvm.value = Regex.Replace(fieldvm.value, Constants.SpecialDateTimeFormatCharactersRegexPattern, string.Empty);\n\t\t\t\tfieldvm.dateFormat = \"M/d/yyyy\"; // default value\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfieldvm.dateFormat = SessionData.CurrentCulture.DateTimeFormat.ShortDatePattern;\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\t_log.InfoNoPII(\"Unable to retrieve users date pattern\", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (docMetadata.DataType == Enums.DataType.DropDown || docMetadata.DataType == Enums.DataType.MagicDropDown)\n\t\t\t{\n\t\t\t\tvar options = new List<string>();\n\t\t\t\tif (populateOptions)\n\t\t\t\t{\n\t\t\t\t\toptions.AddRange(docMetadata.LocalizedAllowedDropDownValues().Distinct());\n\t\t\t\t}\n\t\t\t\t// if the value is not in the allowed values (e.g., set via workflow), add that value to the list so the field populates\n\t\t\t\tif (!string.IsNullOrEmpty(fieldvm.value) && !options.Contains(fieldvm.value))\n\t\t\t\t{\n\t\t\t\t\toptions.Add(fieldvm.value);\n\t\t\t\t}\n\n\t\t\t\tfieldvm.options = options;\n\t\t\t}\n\t\t\tif (docMetadata.DataType == Enums.DataType.Cascade)\n\t\t\t{\n\t\t\t\tstring myKey = $\"{docMetadata.MetadataSetUid}-{docMetadata.MetadataSetNumber}\";\n\t\t\t\tif (!keys.ContainsKey(myKey))\n\t\t\t\t{\n\t\t\t\t\tkeys.Add(myKey, new List<string>());\n\t\t\t\t}\n\n\t\t\t\tvar keyPath = keys[myKey];\n\t\t\t\tif (populateOptions && (keyPath.Count <= 0 || !string.IsNullOrEmpty(keyPath.Last())))\n\t\t\t\t{\n\t\t\t\t\tbool enableCascadingAttributesCacheOptimization =\n\t\t\t\t\t\tDocumentAttributesFeatureFlags.EnableCascadingAttributesCacheOptimization;\n\t\t\t\t\tSortedList<string, string> options = new SortedList<string, string>();\n\t\t\t\t\tif (enableCascadingAttributesCacheOptimization)\n\t\t\t\t\t{\n\t\t\t\t\t\toptions = _metadataRepository.GetCascadingTypeAheadValues(docMetadata.MetadataSetUid, docMetadata.MetadataFieldUid, keyPath, docMetadata.AccountId, new Dictionary<Guid, CascadingFieldSet>());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\toptions = _metadataRepository.GetCascadingTypeAheadValues(docMetadata.MetadataSetUid, docMetadata.MetadataFieldUid, keyPath, docMetadata.AccountId);\n\t\t\t\t\t}\n\n\t\t\t\t\tfieldvm.options = options.Values.ToList();\n\t\t\t\t\t\n\t\t\t\t\tif(!string.IsNullOrEmpty(fieldvm.value))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (options.ContainsKey(fieldvm.value))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldvm.value = options[fieldvm.value];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!options.ContainsValue(fieldvm.value))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldvm.options.Add(fieldvm.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfieldvm.options = new List<string>();\n\t\t\t\t}\n\n\t\t\t\tif(docMetadata.Value == null)\n\t\t\t\t{\n\t\t\t\t\t_log.InfoNoPII($\"DocMetadata value was null and added to keypath which may result in a null reference exception.\" +\n\t\t\t\t\t\t$\" DocMetadata Field Id: {docMetadata.MetadataFieldUid}, DocMetadata Field's Group Uid: {docMetadata.MetadataGroupUid}.\");\n\t\t\t\t}\n\t\t\t\tkeyPath.Add(docMetadata.Value);\n\t\t\t}\n\t\t\tif (docMetadata.DataType == Enums.DataType.Actor)\n\t\t\t{\n\t\t\t\tfieldvm.chooserDataSource = EntityDataSource.GetActorEntityDataSource(ActorAttributeRestriction.LoadFromMetadata(docMetadata.Definition, docMetadata.AccountId, docMetadata.MetadataFieldUid));\n\t\t\t}\n\t\t\treturn fieldvm;\n\t\t}\n\n\n\t\t// Methods used for SAVING metadata\n\n\t\tprivate List<string> SaveDeletedGroups(MetadataGroups deletingGroups, Document document)\n\t\t{\n\t\t\tList<string> errorMessages = new List<string>();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tforeach (MetadataGroup mg in deletingGroups)\n\t\t\t\t{\n\t\t\t\t\t_metadataRepository.DeleteByMetadataGroupUid(SessionData.CurrentAccountId, mg.Uid, document.Type, document.Uid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII($\"Failed to delete attributes from document '{document.Uid}' with group uids {string.Join(\", \", deletingGroups.Select(c => c.Uid).ToList())}.\", ex);\n\t\t\t\terrorMessages.Add(Resources.Admin.AttributesSaveGroupsFailed);\n\t\t\t}\n\t\t\treturn errorMessages;\n\t\t}\n\n\t\tprivate ChangedMetadatasResult FindMetadatasThatNeedUpdating(AttributesViewModel attributes, Document document)\n\t\t{\n\t\t\tMetadatas updateMetadatas = new Metadatas();\n\t\t\tMetadatas deleteMetadatas = new Metadatas();\n\t\t\tMetadataGroups deletingGroups = new MetadataGroups();\n\t\t\tList<string> errorMessages = new List<string>();\n\t\t\tDictionary<string, List<AttributeGroupItemViewModel>> repeatingItems = new Dictionary<string, List<AttributeGroupItemViewModel>>();\n\t\t\tforeach (AttributeGroupViewModel group in attributes.groups)\n\t\t\t{\n\t\t\t\tif (IsSystemGroup(group))\n\t\t\t\t{\n\t\t\t\t\tcontinue;  // system level groups can not get modified by end users\n\t\t\t\t}\n\n\t\t\t\tswitch (GetGroupDocState(group))\n\t\t\t\t{\n\t\t\t\t\tcase GroupDocState.GroupContinueBeingDetached:\n\t\t\t\t\t\tcontinue; // no need to process this groups items, this group is NOT attached to this document\n\t\t\t\t\tcase GroupDocState.GroupDetaching:\n\t\t\t\t\t\tdeletingGroups.Add(new MetadataGroup { Uid = Guid.Parse(group.id), Name = group.name });\n\t\t\t\t\t\tcontinue; // no need to process this groups items, they will all get deleted\n\t\t\t\t\tcase GroupDocState.GroupAttaching:\n\t\t\t\t\t\tupdateMetadatas.Add(CreateMetadataPlaceHolderForGroup(group, document));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GroupDocState.GroupContinueBeingAttached:\n\t\t\t\t\t\t// nothing special here, process items below to check for updates \n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tValidateGroup(group);\n\n\t\t\t\tforeach (AttributeGroupItemViewModel item in group.items)\n\t\t\t\t{\n\t\t\t\t\t// HANDLE REPEATING ITEMS (collect repeating fields, and process them later)\n\t\t\t\t\tif (item.repeating)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring itemTypeId = item.type == \"field\" ? item.fieldid : item.setid;\n\t\t\t\t\t\tif (!repeatingItems.ContainsKey(itemTypeId))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trepeatingItems.Add(itemTypeId, new List<AttributeGroupItemViewModel>());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trepeatingItems[itemTypeId].Add(item);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// HANDLE NON-REPEATING ITEMS\n\t\t\t\t\tforeach (AttributeFieldViewModel field in item.fields)\n\t\t\t\t\t{\n\t\t\t\t\t\tGuid metadataUid = Guid.Parse(field.metadataid);\n\t\t\t\t\t\tMetadata persistedMetadata = metadataUid == Guid.Empty\n\t\t\t\t\t\t\t? _persistedDocMetadatas.FirstOrDefault(c => c.MetadataFieldUid == Guid.Parse(field.fieldid))\n\t\t\t\t\t\t\t: _persistedDocMetadatas.SingleOrDefault(c => c.Uid == metadataUid);\n\t\t\t\t\t\tif (persistedMetadata == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// this is a field from a GROUP that is being added to the document, retrieve the MetadataField to create a Metadata object\n\t\t\t\t\t\t\tMetadataField metaField = _metadataRepository.GetMetadataField(SessionData.CurrentAccountId, Guid.Parse(field.fieldid));\n\t\t\t\t\t\t\tmetaField.SetTranslationUtility(TranslationUtility);\n\t\t\t\t\t\t\tpersistedMetadata = new Metadata(SessionData.CurrentAccountId, metaField, document.Type, document.Uid, null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tMetadataFieldResult result;\n\t\t\t\t\t\tif (IsFieldMarkedForDelete(field, item, group))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = DeleteMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (metadataUid == Guid.Empty)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = CreateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = UpdateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result.Proceed && result.ResultType == MetadataFieldResultType.Update)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tupdateMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (result.Proceed && result.ResultType == MetadataFieldResultType.Delete)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleteMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!string.IsNullOrEmpty(result.ErrorMessage))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terrorMessages.Add(result.ErrorMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach (KeyValuePair<string, List<AttributeGroupItemViewModel>> repeatedItem in repeatingItems)\n\t\t\t{\n\t\t\t\tList<AttributeGroupItemViewModel> items = repeatedItem.Value; // items is a list of all instances of a repeated item or set\n\n\t\t\t\t// retrieve the existing persisted metadatas on the document for the repeating items\n\t\t\t\t// this does not include synthesized rows(aka fake/non-actual rows), also these values come back in a SPECIFIC ORDER)\n\t\t\t\tList<Metadata> persistedMetadatas = GetPersistedMetadatasForRepeatableItem(items[0]);\n\n\t\t\t\tAttributeGroupViewModel group = attributes.groups.First(c => c.id == items[0].groupid);\n\n\t\t\t\tint currentMaxSetNumber = persistedMetadatas.Count == 0 ? 0 : persistedMetadatas.Max(c => c.MetadataSetNumber);\n\n\t\t\t\t// handle deleting items first! Important: remove them from the persistedMetadatas collection\n\t\t\t\tMetadataFieldResult result;\n\t\t\t\tforeach (AttributeGroupItemViewModel item in items)\n\t\t\t\t{\n\t\t\t\t\tif (!IsItemMarkedForDelete( item, group))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach (AttributeFieldViewModel field in item.fields)\n\t\t\t\t\t{\n\t\t\t\t\t\tGuid metadataUid = Guid.Parse(field.metadataid);\n\t\t\t\t\t\tif (metadataUid != Guid.Empty) // empty guid would indicate that this is a field that has yet to be created (therefore do nothing, because there is nothing to delete)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMetadata persistedMetadata = persistedMetadatas.Single(c => c.Uid == metadataUid); // this has to be here, or there is nothing to delete\n\t\t\t\t\t\t\tresult = DeleteMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t\tif (result.Proceed)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdeleteMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (!string.IsNullOrEmpty(result.ErrorMessage))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\terrorMessages.Add(result.ErrorMessage);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpersistedMetadatas.Remove(persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// handle non-deleting items, existing metadatas will be used first so that we can preserve the clients order of the repeatable fields\n\t\t\t\tQueue<int> metadataSetNumbersQueue = new Queue<int>(persistedMetadatas.Select(c => c.MetadataSetNumber).Distinct().OrderBy(c => c));\n\t\t\t\tforeach (AttributeGroupItemViewModel item in items)\n\t\t\t\t{\n\t\t\t\t\tif (IsItemMarkedForDelete(item, group))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tint metadataSetNumberToUse = metadataSetNumbersQueue.Count > 0 ? metadataSetNumbersQueue.Dequeue() : (currentMaxSetNumber += 1);\n\n\t\t\t\t\tforeach (AttributeFieldViewModel field in item.fields)\n\t\t\t\t\t{\n\t\t\t\t\t\t// DO NOT retrieve by metadatauid, we use the metadatasetnumber to preserve the ORDER the client wants\n\t\t\t\t\t\tMetadata persistedMetadata = persistedMetadatas.FirstOrDefault(c => c.MetadataSetNumber == metadataSetNumberToUse && (int)c.DataType == field.dataType && c.MetadataFieldUid == Guid.Parse(field.fieldid));\n\n\t\t\t\t\t\tif (persistedMetadata != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpersistedMetadatas.Remove(persistedMetadata);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (persistedMetadata == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpersistedMetadata = _persistedDocMetadatas.FirstOrDefault(c => c.MetadataFieldUid == Guid.Parse(field.fieldid) && c.Uid == Guid.Empty);\n\t\t\t\t\t\t\tif (persistedMetadata == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// this is a field from a GROUP that is being added to the document, retrieve the MetadataField to create a Metadata object\n\t\t\t\t\t\t\t\tMetadataField metaField = _metadataRepository.GetMetadataField(SessionData.CurrentAccountId, Guid.Parse(field.fieldid));\n\t\t\t\t\t\t\t\tmetaField.SetTranslationUtility(TranslationUtility);\n\t\t\t\t\t\t\t\tpersistedMetadata = new Metadata(SessionData.CurrentAccountId, metaField, document.Type, document.Uid, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpersistedMetadata.MetadataSetNumber = metadataSetNumberToUse;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (IsFieldMarkedForDelete(field, item, group))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = DeleteMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (persistedMetadata.Uid == Guid.Empty)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = CreateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = UpdateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result.Proceed && result.ResultType == MetadataFieldResultType.Update)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tupdateMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (result.Proceed && result.ResultType == MetadataFieldResultType.Delete)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleteMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!string.IsNullOrEmpty(result.ErrorMessage))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terrorMessages.Add(result.ErrorMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new ChangedMetadatasResult\n\t\t\t{\n\t\t\t\tUpdatingMetadatas = updateMetadatas,\n\t\t\t\tDeletingMetadatas = deleteMetadatas,\n\t\t\t\tDeletingGroups = deletingGroups,\n\t\t\t\tErrorMessages = errorMessages\n\t\t\t};\n\t\t}\n\n\t\tprivate Metadata CreateMetadataPlaceHolderForGroup(AttributeGroupViewModel groupvm, Document document)\n\t\t{\n\t\t\treturn new Metadata(SessionData.CurrentAccountId, Guid.Parse(groupvm.id), Guid.Empty, document.Type, document.Uid, null) {MetadataGroupName = groupvm.name};\n\t\t}\n\n\t\tprivate GroupDocState GetGroupDocState(AttributeGroupViewModel groupvm)\n\t\t{\n\t\t\t// group is marked as attached to doc, and there are NO existing metadatas on the document\n\t\t\tGuid groupUid = Guid.Parse(groupvm.id);\n\t\t\tbool hasExistingMetadatas = _persistedDocMetadatas.Any(c => c.MetadataGroupUid == groupUid);\n\t\t\tif (groupvm.attached)\n\t\t\t{\n\t\t\t\treturn hasExistingMetadatas ? GroupDocState.GroupContinueBeingAttached : GroupDocState.GroupAttaching;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn hasExistingMetadatas ? GroupDocState.GroupDetaching : GroupDocState.GroupContinueBeingDetached;\n\t\t\t}\n\t\t}\n\n\t\tpublic enum GroupDocState\n\t\t{\n\t\t\tGroupAttaching,\n\t\t\tGroupDetaching,\n\t\t\tGroupContinueBeingAttached,\n\t\t\tGroupContinueBeingDetached\n\t\t}\n\n\t\tpublic class ChangedMetadatasResult\n\t\t{\n\t\t\tpublic Metadatas UpdatingMetadatas { get; set; }\n\t\t\tpublic Metadatas DeletingMetadatas { get; set; }\n\t\t\tpublic MetadataGroups DeletingGroups { get; set; }\n\t\t\tpublic List<string> ErrorMessages { get; set; }\n\t\t}\n\n\t\tprivate MetadataFieldResult UpdateMetadataField(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group, Metadata persistedMetadata)\n\t\t{\n\t\t\tstring outMessage;\n\t\t\tstring value = field.value;\n\t\t\tbool isValid = MetadataRepository.ValidateTypeAndFormat(ref value, persistedMetadata, SessionData.CurrentCulture, out outMessage);\n\n\t\t\tMetadataFieldResult rslt = new MetadataFieldResult { Proceed = true, ResultType = MetadataFieldResultType.Update};\n\n\t\t\t// is the metadata allowed to change?\n\t\t\tif (persistedMetadata.ReadOnly && !persistedMetadata.IsCalculatedDataType())\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\tif (persistedMetadata.System)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\t// did anything actually change? if metadata value and order are the same, do nothing\n\t\t\tif (value == persistedMetadata.Value)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\t// are metadata changes valid?\n\t\t\tif (rslt.Proceed && string.IsNullOrEmpty(value))\n\t\t\t{\n\t\t\t\t// this 'if' condition should be impossible, empty/null field values get marked for delete, therefore they should be going to a different code path, this is just in case\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\t\t\tif (rslt.Proceed && value.Length > Metadata.LENGTH_OBJECTMETADATAVALUES_VALUE)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t\trslt.ErrorMessage = string.Format(Resources.Admin.error_AttributeTooLong, persistedMetadata.Name, Metadata.LENGTH_OBJECTMETADATAVALUES_VALUE);\n\t\t\t}\n\t\t\tif (rslt.Proceed && !isValid)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t\trslt.ErrorMessage = outMessage;\n\t\t\t}\n\t\t\t\n\n\t\t\t// if everything is good, create the updated metadata object\n\t\t\tif (rslt.Proceed) {\n\t\t\t\trslt.ResultMetadata = new Metadata(persistedMetadata, persistedMetadata.MetadataSetNumber, value) { Uid = persistedMetadata.Uid };\n\t\t\t}\n\n\t\t\treturn rslt;\n\t\t}\n\t\tprivate MetadataFieldResult CreateMetadataField(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group, Metadata persistedMetadata)\n\t\t{\n\t\t\tpersistedMetadata.Uid = Guid.Empty;\n\t\t\tpersistedMetadata.Value = null;\n\t\t\treturn UpdateMetadataField(field, item, group, persistedMetadata);\n\t\t}\n\t\tprivate MetadataFieldResult DeleteMetadataField(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group, Metadata persistedMetadata)\n\t\t{\n\t\t\tMetadataFieldResult rslt = new MetadataFieldResult {Proceed = true, ResultType = MetadataFieldResultType.Delete};\n\t\t\tif (persistedMetadata.IsRequiredAttribute && !persistedMetadata.Repeating && !persistedMetadata.MetadataSetRepeating && !persistedMetadata.ReadOnly)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t\trslt.ErrorMessage = $\"Attribute {persistedMetadata.Name} is required\";\n\t\t\t}\n\t\t\tif (persistedMetadata.ReadOnly && !persistedMetadata.IsCalculatedDataType())\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\tif (rslt.Proceed && persistedMetadata.Uid == Guid.Empty)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\t// everything is good, set the deletable metadata object\n\t\t\tif (rslt.Proceed)\n\t\t\t{\n\t\t\t\trslt.ResultMetadata = persistedMetadata;\n\t\t\t}\n\n\t\t\treturn rslt;\n\t\t}\n\n\t\tpublic class MetadataFieldResult\n\t\t{\n\t\t\tpublic bool Proceed { get; set; }\n\t\t\tpublic Metadata ResultMetadata { get; set; }\n\t\t\tpublic MetadataFieldResultType ResultType { get; set; }\n\t\t\tpublic string ErrorMessage { get; set; }\n\t\t}\n\n\t\tpublic enum MetadataFieldResultType\n\t\t{\n\t\t\tUpdate = 0,\n\t\t\tDelete = 1\n\t\t}\n\n\t\tprivate List<Metadata> GetPersistedMetadatasForRepeatableItem(AttributeGroupItemViewModel item)\n\t\t{\n\t\t\tList<Metadata> persistedMetadatas = new List<Metadata>();\n\t\t\tif (item.type == \"field\")\n\t\t\t{\n\t\t\t\tpersistedMetadatas = _persistedDocMetadatas.Where(c => c.Repeating && c.MetadataFieldUid == Guid.Parse(item.fieldid) && c.Uid != Guid.Empty).OrderBy(c => c.MetadataSetNumber).ToList();\n\t\t\t}\n\t\t\telse if (item.type == \"set\")\n\t\t\t{\n\t\t\t\tpersistedMetadatas = _persistedDocMetadatas.Where(c => c.MetadataSetRepeating && c.MetadataSetUid == Guid.Parse(item.setid) && c.Uid != Guid.Empty).ToList();\n\t\t\t}\n\n\t\t\treturn persistedMetadatas;\n\t\t}\n\n\t\tprivate bool IsItemMarkedForDelete(AttributeGroupItemViewModel item, AttributeGroupViewModel group)\n\t\t{\n\t\t\tif (!group.attached)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (item.isDeleting)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (item.fields.Count == item.fields.Count(f => string.IsNullOrEmpty(f.value) && f.dataType != (int)Enums.DataType.AutoNumber))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate bool IsFieldMarkedForDelete(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group)\n\t\t{\n\t\t\tif (!group.attached)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (item.isDeleting)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (string.IsNullOrEmpty(field.value) && field.dataType != (int)Enums.DataType.AutoNumber)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate void ValidateGroup(AttributeGroupViewModel groupvm)\n\t\t{\n\t\t\tMetadataFields groupFields = _metadataRepository.GetMetadataFieldsByMetadataGroupUid(SessionData.CurrentAccountId, Guid.Parse(groupvm.id));\n\t\t\tstring latestDefinitionHash = HashObject(Transform(groupFields));\n#pragma warning disable CA1309 // Use ordinal stringcomparison\n\t\t\tif (!string.Equals(groupvm.definitionHash, latestDefinitionHash))\n\t\t\t{\n\t\t\t\t_log.InfoNoPII(\"Attributes were modified by a different process\");\n\t\t\t\tthrow new AdexsDisplayException(Resources.Admin.AttributesConfigurationModifiedMessage);\n\t\t\t}\n#pragma warning restore CA1309 // Use ordinal stringcomparison\n\t\t}\n\n\t\tprivate bool IsSystemGroup(AttributeGroupViewModel groupvm)\n\t\t{\n\t\t\tif (groupvm.isSystem)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// can't trust the groupvm because it can be modified from the client side, have to check the db to know for sure\n\t\t\tMetadataGroup group = _metadataGroupRepository.LoadByUid(SessionData.CurrentAccountId, Guid.Parse(groupvm.id));\n\t\t\treturn group != null && group.System;\n\t\t}\n\n\t\tprivate string CreateMetadataGroupHash(Guid groupUid)\n\t\t{\n\t\t\tMetadataFields groupFields = _metadataRepository.GetMetadataFieldsByMetadataGroupUid(SessionData.CurrentAccountId, groupUid);\n\t\t\treturn HashObject(Transform(groupFields));\n\t\t}\n\n\t\tprivate static IEnumerable<object> Transform(MetadataFields groupFields)\n\t\t{\n\t\t\tforeach (MetadataField f in groupFields)\n\t\t\t{\n\t\t\t\tvar transformed = new { f.Uid, f.Name, f.Position, f.DataType, f.IsRequiredAttribute, f.ReadOnly, f.Repeating, f.CustomValidationErrMsg, f.CustomValidation, f.AllowedValues };\n\t\t\t\tyield return transformed;\n\t\t\t}\n\t\t}\n\n\t\tprivate bool ShouldShowDocumentDetails(UserAccount userAccount)\n\t\t{\n\t\t\tvar accountSettings = userAccount.Account.Settings;\n\t\t\treturn (accountSettings.EnableCounterpartyManagement || !accountSettings.ShowPartyFieldsOnDocInfoPanel)\n\t\t\t\t|| accountSettings.ShowKeywords\n\t\t\t\t|| accountSettings.ShowFileNameAndFolder;\n\t\t}\n\t\tprivate bool ShouldEnableCreateAttributeViewModel(UserAccount userAccount)\n\t\t{\n\t\t\treturn userAccount.Account.Settings.EnableCreateAttributeViewModelForDocExplorer;\n\t\t}\n\n\t\t#endregion\n\n\t\tpublic string HashObject<T>(T objectToHash)\n\t\t{\n\t\t\tif (objectToHash == null)\n\t\t\t{\n\t\t\t\treturn string.Empty;\n\t\t\t}\n\n\t\t\tstring serializedObject = JsonConvert.SerializeObject(objectToHash);\n\t\t\tbyte[] serializedObjectBytes = Encoding.UTF8.GetBytes(serializedObject);\n\t\t\tbyte[] serializedObjectHashBytes = Hash.SHA1Hash(serializedObjectBytes);\n\t\t\t// Use BitConverter to convert the raw hash bytes to a hex string. We use a hex string because it is a much easier string to work with (because it has a limited character set a-f0-9); \n\t\t\t// if we had decoded the raw hash bytes using UTF8 or something like that we could end up with bizarre or non printable characters, which are more difficult to work with.\n\t\t\tstring serializedObjectHashString = BitConverter.ToString(serializedObjectHashBytes).Replace(\"-\", \"\").ToLower();  \n\t\t\treturn serializedObjectHashString;\n\t\t}\n\t}\n}\n",
            "relevance_score": 90,
            "reasoning": "Matches 2 keywords: SetAttribute, OpenTelemetry"
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/CoreDomainRegistry.cs",
            "content": "\ufeffusing System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Reflection;\nusing System.Threading;\n\nusing ADEXS.Caching;\nusing ADEXS.Core.Domain.ABAC;\nusing ADEXS.Core.Domain.Adm;\nusing ADEXS.Core.Domain.Adm.Mapping;\nusing ADEXS.Core.Domain.AIConfiguration;\nusing ADEXS.Core.Domain.Aom;\nusing ADEXS.Core.Domain.Approval;\nusing ADEXS.Core.Domain.Attributes;\nusing ADEXS.Core.Domain.Authentication;\nusing ADEXS.Core.Domain.CacheObjects;\nusing ADEXS.Core.Domain.CLMAccountConversion.AccountMigrationChanges;\nusing ADEXS.Core.Domain.CLMAccountConversion.AccountMigrationSettings;\nusing ADEXS.Core.Domain.CLMAccountConversion.AccountMigrationStatus;\nusing ADEXS.Core.Domain.CLMAccountConversion.GroupManagement;\nusing ADEXS.Core.Domain.CLMAccountConversion.Helper;\nusing ADEXS.Core.Domain.CLMAccountConversion.MixedMode;\nusing ADEXS.Core.Domain.CLMAccountConversion.Services;\nusing ADEXS.Core.Domain.CLMAccountConversion.Snapshot.Helper;\nusing ADEXS.Core.Domain.CLMAccountConversion.Snapshot.Service;\nusing ADEXS.Core.Domain.CLMAccountConversion.Snapshot.Utility;\nusing ADEXS.Core.Domain.CLMAccountConversion.Validation;\nusing ADEXS.Core.Domain.ConfigurationFactory;\nusing ADEXS.Core.Domain.DataPlacement;\nusing ADEXS.Core.Domain.DataReview;\nusing ADEXS.Core.Domain.DataReview.Extensions;\nusing ADEXS.Core.Domain.DocTracking.Services;\nusing ADEXS.Core.Domain.DocTracking.Utilities;\nusing ADEXS.Core.Domain.DocumentCreation;\nusing ADEXS.Core.Domain.DocumentCreation.MergeType;\nusing ADEXS.Core.Domain.DocumentCreation.Repository;\nusing ADEXS.Core.Domain.DocumentCreation.Services;\nusing ADEXS.Core.Domain.DocumentStorage;\nusing ADEXS.Core.Domain.DocuSignSync.ProfileNotificationSync.Logging;\nusing ADEXS.Core.Domain.Ems;\nusing ADEXS.Core.Domain.EOS;\nusing ADEXS.Core.Domain.ExpressionService.Internal;\nusing ADEXS.Core.Domain.FeatureFlags;\nusing ADEXS.Core.Domain.FileOperations.Pdf.PdfOperators;\nusing ADEXS.Core.Domain.FileOperations.PDF;\nusing ADEXS.Core.Domain.FileOperations.PDF.Interfaces;\nusing ADEXS.Core.Domain.FileOperations.PDF.PdfOperations;\nusing ADEXS.Core.Domain.FileOperations.Watermark;\nusing ADEXS.Core.Domain.GlyphProcessing;\nusing ADEXS.Core.Domain.GlyphProcessing.Persistence;\nusing ADEXS.Core.Domain.GlyphProcessing.Services;\nusing ADEXS.Core.Domain.Javelin;\nusing ADEXS.Core.Domain.Lexion;\nusing ADEXS.Core.Domain.Mapping;\nusing ADEXS.Core.Domain.Messaging;\nusing ADEXS.Core.Domain.Messaging.Framework;\nusing ADEXS.Core.Domain.Messaging.Framework.Core;\nusing ADEXS.Core.Domain.Messaging.Framework.Core.Interfaces;\nusing ADEXS.Core.Domain.Messaging.Framework.Integration;\nusing ADEXS.Core.Domain.Messaging.Framework.Integration.Interfaces;\nusing ADEXS.Core.Domain.Messaging.Framework.Integration.Reformatters;\nusing ADEXS.Core.Domain.MetadataLoader;\nusing ADEXS.Core.Domain.Mixpanel;\nusing ADEXS.Core.Domain.Model.ObjectFilters;\nusing ADEXS.Core.Domain.Model.Seal;\nusing ADEXS.Core.Domain.OfficeWebApps;\nusing ADEXS.Core.Domain.Organization;\nusing ADEXS.Core.Domain.PartyUtility;\nusing ADEXS.Core.Domain.Persistence;\nusing ADEXS.Core.Domain.Persistence.AccountBranding;\nusing ADEXS.Core.Domain.Persistence.Cassandra;\nusing ADEXS.Core.Domain.Persistence.Model;\nusing ADEXS.Core.Domain.Persistence.Model.AccountBranding;\nusing ADEXS.Core.Domain.Persistence.Model.Workflow;\nusing ADEXS.Core.Domain.PhysicalStorage;\nusing ADEXS.Core.Domain.Presto;\nusing ADEXS.Core.Domain.Providers;\nusing ADEXS.Core.Domain.Provisioning;\nusing ADEXS.Core.Domain.QueueHelper;\nusing ADEXS.Core.Domain.Repository;\nusing ADEXS.Core.Domain.Repository.AccountBranding;\nusing ADEXS.Core.Domain.Repository.AccountRepository;\nusing ADEXS.Core.Domain.Repository.AddressBook;\nusing ADEXS.Core.Domain.Repository.AgreementRepository;\nusing ADEXS.Core.Domain.Repository.AIDocument;\nusing ADEXS.Core.Domain.Repository.AIExtractions;\nusing ADEXS.Core.Domain.Repository.AIS;\nusing ADEXS.Core.Domain.Repository.Approval;\nusing ADEXS.Core.Domain.Repository.AsposeImplementations;\nusing ADEXS.Core.Domain.Repository.AsposeImplementations.Interfaces;\nusing ADEXS.Core.Domain.Repository.AutoNumberRepository;\nusing ADEXS.Core.Domain.Repository.Clause;\nusing ADEXS.Core.Domain.Repository.Collaboration;\nusing ADEXS.Core.Domain.Repository.Conversion;\nusing ADEXS.Core.Domain.Repository.Conversion.UserGroup;\nusing ADEXS.Core.Domain.Repository.CounterpartyRepository;\nusing ADEXS.Core.Domain.Repository.CustomRuleRepository;\nusing ADEXS.Core.Domain.Repository.DeliveryRepository;\nusing ADEXS.Core.Domain.Repository.Device;\nusing ADEXS.Core.Domain.Repository.DocLauncherConfig;\nusing ADEXS.Core.Domain.Repository.DocLauncherConfig.Helper;\nusing ADEXS.Core.Domain.Repository.DocumentLauncherData;\nusing ADEXS.Core.Domain.Repository.DocumentRepository;\nusing ADEXS.Core.Domain.Repository.DocumentSelectionRepository;\nusing ADEXS.Core.Domain.Repository.DocumentTypes;\nusing ADEXS.Core.Domain.Repository.EmailRepository;\nusing ADEXS.Core.Domain.Repository.EmbeddedDocumentProperties;\nusing ADEXS.Core.Domain.Repository.EventRepository;\nusing ADEXS.Core.Domain.Repository.ExternalDataMapRepository;\nusing ADEXS.Core.Domain.Repository.ExternalReview;\nusing ADEXS.Core.Domain.Repository.ExternalReview.Helpers;\nusing ADEXS.Core.Domain.Repository.ExternalReview.Helpers.DocumentMatching;\nusing ADEXS.Core.Domain.Repository.ExternalSystemUser;\nusing ADEXS.Core.Domain.Repository.FormRepository;\nusing ADEXS.Core.Domain.Repository.Html;\nusing ADEXS.Core.Domain.Repository.ImageCreation;\nusing ADEXS.Core.Domain.Repository.InboundEmailRepository;\nusing ADEXS.Core.Domain.Repository.InboundFaxRepository;\nusing ADEXS.Core.Domain.Repository.LegacyCustomActionsReportRepository;\nusing ADEXS.Core.Domain.Repository.LWDP;\nusing ADEXS.Core.Domain.Repository.MetadataRepository;\nusing ADEXS.Core.Domain.Repository.Negotiation;\nusing ADEXS.Core.Domain.Repository.NotificationRepository;\nusing ADEXS.Core.Domain.Repository.OAuth;\nusing ADEXS.Core.Domain.Repository.ObjectHistory;\nusing ADEXS.Core.Domain.Repository.ObligationRepository;\nusing ADEXS.Core.Domain.Repository.OfficeWebApps;\nusing ADEXS.Core.Domain.Repository.OutboundHttpRepository;\nusing ADEXS.Core.Domain.Repository.ProvisioningRepository;\nusing ADEXS.Core.Domain.Repository.ReminderTemplateRepository;\nusing ADEXS.Core.Domain.Repository.Reporting;\nusing ADEXS.Core.Domain.Repository.RequestOriginRestrictionRepository;\nusing ADEXS.Core.Domain.Repository.SavedSearchRepository;\nusing ADEXS.Core.Domain.Repository.ScopeEventRepository;\nusing ADEXS.Core.Domain.Repository.Seal;\nusing ADEXS.Core.Domain.Repository.Seal.Helpers;\nusing ADEXS.Core.Domain.Repository.Security;\nusing ADEXS.Core.Domain.Repository.SessionRepository;\nusing ADEXS.Core.Domain.Repository.SettingRepository;\nusing ADEXS.Core.Domain.Repository.SfAuthorization;\nusing ADEXS.Core.Domain.Repository.SFSecurityMappingRepository;\nusing ADEXS.Core.Domain.Repository.Share;\nusing ADEXS.Core.Domain.Repository.Signature;\nusing ADEXS.Core.Domain.Repository.SSO;\nusing ADEXS.Core.Domain.Repository.StructuredDocument;\nusing ADEXS.Core.Domain.Repository.StructuredDocument.Services;\nusing ADEXS.Core.Domain.Repository.StructuredDocument.Services.Writeback;\nusing ADEXS.Core.Domain.Repository.StructuredDocument.Services.Writeback.EqualityComparers;\nusing ADEXS.Core.Domain.Repository.StructuredDocument.Services.Writeback.GetDataProviders;\nusing ADEXS.Core.Domain.Repository.StructuredDocument.Services.Writeback.Helper;\nusing ADEXS.Core.Domain.Repository.StructuredDocument.Services.Writeback.SaveDataProviders;\nusing ADEXS.Core.Domain.Repository.SubscribeAllRepository;\nusing ADEXS.Core.Domain.Repository.Sync;\nusing ADEXS.Core.Domain.Repository.Term;\nusing ADEXS.Core.Domain.Repository.Throttling;\nusing ADEXS.Core.Domain.Repository.TrackedContent;\nusing ADEXS.Core.Domain.Repository.Transaction;\nusing ADEXS.Core.Domain.Repository.TranslationRepository;\nusing ADEXS.Core.Domain.Repository.User;\nusing ADEXS.Core.Domain.Repository.UserConsentRepository;\nusing ADEXS.Core.Domain.Repository.WorkerPoolRepository;\nusing ADEXS.Core.Domain.Repository.Workflow;\nusing ADEXS.Core.Domain.Repository.Workflow.Client;\nusing ADEXS.Core.Domain.Repository.Workflow.Converters;\nusing ADEXS.Core.Domain.Repository.Workflow.Helper;\nusing ADEXS.Core.Domain.Repository.Workflow.Interfaces;\nusing ADEXS.Core.Domain.Repository.Workflow.Loaders;\nusing ADEXS.Core.Domain.Repository.Workflow.Mappers;\nusing ADEXS.Core.Domain.Repository.Workflow.Services;\nusing ADEXS.Core.Domain.Search;\nusing ADEXS.Core.Domain.Search.Telemetry;\nusing ADEXS.Core.Domain.SearchablePdf;\nusing ADEXS.Core.Domain.SecurityFiltering;\nusing ADEXS.Core.Domain.SharedStorage;\nusing ADEXS.Core.Domain.SmartAgreement;\nusing ADEXS.Core.Domain.SmartAgreement.AIModelManagement;\nusing ADEXS.Core.Domain.SmartAgreement.Helpers;\nusing ADEXS.Core.Domain.SmartAgreement.Persistence;\nusing ADEXS.Core.Domain.SmartAgreement.Repositories;\nusing ADEXS.Core.Domain.Sync;\nusing ADEXS.Core.Domain.SynchronousWork;\nusing ADEXS.Core.Domain.TermSync;\nusing ADEXS.Core.Domain.Translation.Utilities;\nusing ADEXS.Core.Domain.UnifiedRepository;\nusing ADEXS.Core.Domain.UnifiedRepository.AuditService;\nusing ADEXS.Core.Domain.UnifiedRepository.Helpers;\nusing ADEXS.Core.Domain.UnifiedRepository.IngestionService;\nusing ADEXS.Core.Domain.UserSync;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Domain.Validation;\nusing ADEXS.Core.Domain.Wins;\nusing ADEXS.Core.Domain.XmlLocalization;\nusing ADEXS.Core.Util.Config;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.FileIO;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.Core.Workflow.Config;\nusing ADEXS.Core.Workflow.Expressions;\nusing ADEXS.Core.Workflow.Expressions.Interfaces;\nusing ADEXS.Core.Workflow.Utility;\nusing ADEXS.Core.Workflow.Utility.Interfaces;\nusing ADEXS.CqlCorePersistence;\nusing ADEXS.InteractivePreview.Services;\nusing ADEXS.MergeEngine.Base;\nusing ADEXS.MergeEngine.OpenXmlPowerTools;\nusing ADEXS.MergeEngine.Word.TrackedContent;\nusing ADEXS.Salesforce;\nusing ADEXS.SealAPIClient.Interfaces;\nusing ADEXS.SqlCorePersistence;\nusing ADEXS.WINS.Repository;\n\nusing AssignmentApi.Client;\n\nusing Clm.IngestionService.Ingestion.V1;\n\nusing DocuSign.Admi.Transform.V1;\nusing DocuSign.CLM.API.WorkflowExecution.Client.OneConfig;\nusing DocuSign.CLM.API.WorkflowExecution.Client.Wrappers;\nusing DocuSign.CLM.API.WorkflowExecution.Client.Wrappers.Interfaces;\nusing DocuSign.CLM.ContentStorage;\nusing DocuSign.OneConfig.Extensions;\nusing DocuSign.OneConfig.Extensions.StructureMap;\nusing DocuSign.Platform.GrpcClientFactory.DependencyInjection;\n\nusing DSEmailAPIClient.Api;\n\nusing Microsoft.Extensions.DependencyInjection;\n\nusing StructureMap;\n\nusing System.Net;\n\n#if NETFRAMEWORK\nusing ADEXS.Core.Domain.Telemetry;\n#endif\n\nusing CachedTenantConnectionDirectory = DocuSign.CLM.Workflow.Core.Repository.TenantConnectionDirectory.CachedTenantConnectionDirectory;\nusing CertificateLoader = ADEXS.Core.Domain.ExpressionService.Internal.CertificateLoader;\nusing Configuration = DSEmailAPIClient.Client.Configuration;\nusing ExpressionServiceClient = ADEXS.Core.Domain.ExpressionService.ExpressionServiceClient;\nusing HttpClientFactory = ADEXS.Core.Domain.ExpressionService.Internal.HttpClientFactory;\nusing ICachedTenantConnectionDirectory = DocuSign.CLM.Workflow.Core.Repository.TenantConnectionDirectory.Interface.ICachedTenantConnectionDirectory;\nusing ICertificateLoader = ADEXS.Core.Domain.ExpressionService.Internal.ICertificateLoader;\nusing IExpressionServiceClient = ADEXS.Core.Domain.ExpressionService.IExpressionServiceClient;\nusing IHttpClientFactory = ADEXS.Core.Domain.ExpressionService.Internal.IHttpClientFactory;\nusing ITenantConnectionDirectory = DocuSign.CLM.Workflow.Core.Repository.TenantConnectionDirectory.Interface.ITenantConnectionDirectory;\nusing IWorkflowSettingRepository = ADEXS.Core.Workflow.Repository.Interfaces.IWorkflowSettingRepository;\nusing IWorkflowDesignRepository = ADEXS.Atlas.Workflow.Client.Interface.IWorkflowDesignRepository;\nusing TenantConnectionDirectory = DocuSign.CLM.Workflow.Core.Repository.TenantConnectionDirectory.TenantConnectionDirectory;\nusing WorkflowSettingRepository = ADEXS.Core.Workflow.Repository.WorkflowSettingRepository;\nusing WorkflowDesignRepository = ADEXS.Atlas.Workflow.Client.WorkflowDesignRepository;\n\nusing ADEXS.Core.Domain.UnifiedRepository.DotService;\nusing ADEXS.Core.Workflow.Infrastructure.IoC;\nusing ADEXS.Core.Domain.Lookup;\nusing ADEXS.Core.Domain.Persistence.Model.Reindexing;\nusing ADEXS.Core.Domain.Repository.Reindexing;\nusing ADEXS.Core.Domain.RateLimit;\nusing ADEXS.Core.Domain.Repository.CustomRule;\nusing ADEXS.Core.Domain.Serialization;\n\nusing Microsoft.Extensions.DependencyInjection.Extensions;\n\nusing ADEXS.Core.Domain.DevXIam;\nusing ADEXS.Core.Domain.UnifiedRepository.Repositories;\n\nusing Audit.Server.Events.V1;\n\nusing ADEXS.Core.Domain.GrpcClient;\n\nusing DocuSign.PlatformRouting.DataPlacement.V1alpha1;\nusing DocuSign.RateLimit.V1;\n\nusing Docusign.Schemas.Dcf.Core;\nusing Docusign.Apr.Service.V1;\nusing ADEXS.Core.Domain.Repository.ADMStoreAgreementRepository;\nusing ADEXS.Core.Domain.ADMStore.Client;\nusing ADEXS.Core.Domain.ADMStore;\n\nnamespace ADEXS.Core.Domain\n{\n\tpublic class CoreDomainRegistry : ServiceRegistry\n\t{\n\t\tinternal const string StorageHttpClientName = \"storageHttpClient\";\n\t\tinternal const string DmsMetadataHttpClientName = \"dmsMetadataHttpClient\";\n\t\tprivate readonly string _oneConfigPath;\n\n\t\tpublic CoreDomainRegistry()\n\t\t{\n\t\t\t_oneConfigPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n\t\t}\n\n\t\tpublic CoreDomainRegistry(string oneConfigPath)\n\t\t{\n\t\t\t_oneConfigPath = oneConfigPath;\n\t\t}\n\n\t\tprotected override void PopulateRegistry(Registry registry)\n\t\t{\n\t\t\tPopulatePersistenceRegistries(registry);\n\t\t\tPopulateRepositoryRegistries(registry);\n\t\t\tPopulateOtherRegistries(registry);\n\t\t\tPopulateOneConfigRegistry(registry, _oneConfigPath);\n\t\t}\n\n\t\tprotected override void PopulateServiceRegistry(IServiceCollection services)\n\t\t{\n\t\t\tservices.TryAddSingleton(TimeProvider.System);\n\t\t\tservices.AddHttpClient();\n\t\t\tservices.AddHttpClient(DmsMetadataHttpClientName)\n\t\t\t\t\t.ConfigurePrimaryHttpMessageHandler(() => new HttpClientHandler\n\t\t\t\t\t{\n\t\t\t\t\t\tAutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate\n\t\t\t\t\t});\n\n\t\t\t// Add storage http client\n\t\t\tservices.AddHttpClient(StorageHttpClientName,\n\t\t\t\tclient =>\n\t\t\t\t{\n\t\t\t\t\tclient.Timeout = Timeout.InfiniteTimeSpan;\n\t\t\t\t})\n\t\t\t\t.SetHandlerLifetime(TimeSpan.FromMinutes(5));\n\n\t\t\t// Add workflow v1 grpc client\n\t\t\tservices.AddHttpClient<WorkflowV1GrpcClient>()\n#if NETFRAMEWORK\n\t\t\t\t// Enable trace propagation for .net 4.8, which is using WinHttpHandler\n\t\t\t\t.AddHttpMessageHandler<OpenTelemetryDelegatingHandler>()\n#endif\n\t\t\t\t.ConfigurePrimaryHttpMessageHandler(\n\t\t\t\t\t_ =>\n\t\t\t\t\t{\n#if NET\n\t\t\t\t\t\tif (SocketsHttpHandler.IsSupported)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn new SocketsHttpHandler { EnableMultipleHttp2Connections = true };\n\t\t\t\t\t\t}\n#endif\n#if NETFRAMEWORK\n\t\t\t\t\t\treturn new WinHttpHandler { EnableMultipleHttp2Connections = true };\n#else\n\t\t\t\t\t\treturn new HttpClientHandler();\n#endif\n\t\t\t\t\t});\n\n\t\t\tservices.AddTransient<IWorkflowV1GrpcMapper, WorkflowV1GrpcMapper>();\n\t\t\tservices.AddSingleton<IWorkflowV1GrpcClientFactory, WorkflowV1GrpcClientFactory>();\n\t\t\tADEXS.Core.Domain.ComponentsInstrumentationRegistrationExtensions.AddComponentsInstrumentation(services);\n\n\t\t\tservices.AddTransient<ICompressedJsonSerializer, CompressedJsonSerializer>();\n\n\t\t\tservices.AddTransient<WorkflowConversionJsonSerializer>();\n\t\t\tservices.AddTransient<WorkflowConversionBinarySerializer>();\n\t\t\tservices.AddTransient<IWorkflowConversionSerializerFactory>(\n\t\t\t\tsp => new WorkflowConversionSerializerFactory(\n\t\t\t\t\tsp.GetRequiredService<WorkflowConversionJsonSerializer>(),\n\t\t\t\t\tsp.GetRequiredService<WorkflowConversionBinarySerializer>(),\n\t\t\t\t\tsp.GetRequiredService<IWatchedSingletonConfig<IWorkflowConversionInvariantConfig>>()));\n\n\t\t\tnew ContentStorageRegistry().ConfigureServiceCollection(services);\n\t\t\tnew AccountBrandingRegistry(_oneConfigPath).ConfigureServiceCollection(services);\n\t\t\tnew CoreServiceRegistry(_oneConfigPath).ConfigureServiceCollection(services);\n\n\t\t\tservices.AddTransient<IInboundEmailPersistence, InboundEmailPersistence>();\n\n\t\t\tservices.AddCoreGrpcClientFactoryOptions<GrpcClientFactoryOptions>();\n\t\t\tservices.AddCoreGrpcCallContextPropogator<GrpcCallContextPropagator>();\n\t\t\tservices.AddCoreGrpcClientFactory<GrpcClientFactoryMicroserviceOptions>();\n\t\t\tPopulateGrpcClientActivatorDependencies(services);\n\t\t}\n\n\t\tprivate void PopulateGrpcClientActivatorDependencies(IServiceCollection services)\n\t\t{\n\t\t\tservices.AddGenericClientActivator<CheckAlive.CheckAliveClient>();\n\t\t\tservices.AddGenericClientActivator<ClmDocumentUploadService.ClmDocumentUploadServiceClient>();\n\t\t\tservices.AddGenericClientActivator<ClmProcessingStatusService.ClmProcessingStatusServiceClient>();\n\t\t\tservices.AddGenericClientActivator<DataPlacementService.DataPlacementServiceClient>();\n\t\t\tservices.AddGenericClientActivator<DcfFeedbackService.DcfFeedbackServiceClient>();\n\t\t\tservices.AddGenericClientActivator<EventService.EventServiceClient>();\n\t\t\tservices.AddGenericClientActivator<ExtractionTypesService.ExtractionTypesServiceClient>();\n\t\t\tservices.AddGenericClientActivator<RateLimitService.RateLimitServiceClient>();\n\t\t\tservices.AddGenericClientActivator<TransformService.TransformServiceClient>();\n\t\t\tservices.AddGenericClientActivator<IngestionService.IngestionServiceClient>();\n\t\t}\n\n\t\tprivate void PopulateOtherRegistries(Registry registry)\n\t\t{\n\t\t\tregistry.For<IPartySyncTaskUtility>().Use<PartySyncTaskUtility>();\n\t\t\tregistry.For<IAttributeDefinitionsCopyUtility>().Use<AttributeDefinitionsCopyUtility>();\n\t\t\tregistry.For<ITranslationTaskUtility>().Use<TranslationTaskUtility>();\n\t\t\tregistry.For<IRetrieveTranslationUtility>().Use<RetrieveTranslationUtility>();\n\t\t\tregistry.For<IExternalObjectsStorage>().Use<ExternalObjectsStorage>();\n\t\t\tregistry.For<IRuleStack>().Use<RuleStack>();\n\t\t\tregistry.For<ISyncRuleFactory>().Use<SyncRuleFactory>();\n\t\t\tregistry.For<ILogicalFileSystem>().Use<LogicalFileSystem>();\n\t\t\tregistry.For<ILogicalFileSystemParseResultFactory>().Use<LogicalFileSystemParseResultFactory>();\n\t\t\tregistry.For<IXDocumentReader>().Use<XDocumentReader>();\n\t\t\tregistry.For<ILogicalDocumentReader>().Use<LogicalDocumentReader>();\n\t\t\tregistry.For<IGenericEmails>().Use<GenericEmailSender>();\n\t\t\tregistry.For<IEventRepository>().Singleton().Use<EventRepository>();\n\t\t\tregistry.For<IApprovalWorkflowSnapshot>().Use<ApprovalWorkflowSnapshot>();\n\t\t\tregistry.For<ICoverSheetGeneration>().Use<CoverSheetGeneration>();\n\t\t\tregistry.For<IMergeTypeFactory>().Use<MergeTypeFactory>();\n\t\t\tregistry.For<IDocumentBuilder>().Use<DocxDocumentBuilder>();\n\t\t\tregistry.For<IMerge>().Use<Merge>();\n\t\t\tregistry.For<ISfMerge>().Use<SfMerge>();\n\t\t\tregistry.For<IAuthenticationResponseGenerator>().Use<SamlResponseGenerator>();\n\t\t\tregistry.For<IPdfOperatorFactory>().Singleton().Use<PdfOperatorFactory>();\n\t\t\tregistry.For<IAtlasPdfOperations>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<IFieldExportProcessorPdf>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<IFileSplitterPdf>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<IImagePdfOperationsPdf>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<IPdfEmbeddedDocumentProperties>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<ITesseractExtractorPdf>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<ITikaExtractorPdf>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<IWatermarkServicePdf>().Use<AtlasPdfOperations>();\n\t\t\tregistry.For<IAuthentication>().Use<Authentication.Authentication>();\n\t\t\tregistry.For<IFileUtilWrapper>().Use<FileUtilWrapper>();\n\t\t\tregistry.For<IPageCountOnDemand>().Use<PageCountOnDemand>();\n\t\t\tregistry.For<IApplicationSettings>().Singleton().Use<ApplicationSettingsWrapper>();\n\t\t\tregistry.For<IMailMessageComposer>().Use<MailMessageComposer>();\n\t\t\tregistry.For<IMailMessageValidator>().Use<MailMessageValidator>();\n\t\t\tregistry.For<ISmtpClient>().Use<SmtpClientWrapper>();\n\t\t\tregistry.For<IEmailService>().Use<EmailService>();\n\t\t\tregistry.For<IEmailPayloadValidator>().Use<EmailPayloadValidator>();\n\t\t\tregistry.For<IClauseSmartContractService>().Use<ClauseSmartContractService>();\n\t\t\tregistry.For<IClauseContractsService>().Use<ClauseContractsService>();\n\t\t\tregistry.For<IClauseFlowsService>().Use<ClauseFlowsService>();\n\t\t\tregistry.For<IClauseSmartContractMetadataService>().Use<ClauseSmartContractMetadataService>();\n\t\t\tregistry.For<IEmailTemplateNameManager>().Use<EmailTemplateNameManager>();\n\t\t\tregistry.For<IEmailBodyComposer>().Use<EmailBodyComposer>();\n\t\t\tregistry.For<IBuildAttachments>().Use<AttachmentsBuilder>();\n\t\t\tregistry.For<ISendTask>().Singleton().Use<TaskSender>();\n\t\t\tregistry.For<IPreProcessPayload>().Use<PayloadPreProcessor>();\n\t\t\tregistry.For<IEmailPayloadBuilderFactory>().Use<EmailPayloadBuilderFactory>();\n\t\t\tregistry.For<IEmailDistributor>().Use<EmailDistributor>();\n\t\t\tregistry.For<INotifySender>().Use<NotifySender>();\n\t\t\tregistry.For<IPostProcessor>().Use<PostProcessor>();\n\t\t\tregistry.For<ITokenModifier>().Use<TokenModifier>();\n\t\t\tregistry.For<ITokenSerializer>().Use<TokenSerializer>();\n\t\t\tregistry.For<IWorkflowVariableWrap>().Use<WorkflowVariableHtmlWrap>();\n\t\t\tregistry.For<IGetReformatters>().Use<ReformatterService>();\n\t\t\tregistry.For<IUserAccountsSecurityFilterFactory>().Use<UserAccountsSecurityFilterFactory>();\n\t\t\tregistry.ForSingletonOf<IAtlasCassandraCluster>().Use<AtlasCassandraCluster>();\n\t\t\tregistry.For<IEmailSignatureHandler>().Use<EmailSignatureHandler>();\n\t\t\tregistry.For<IEmailShardPayloadBuilderFactory>().Use<EmailShardPayloadBuilderFactory>();\n\t\t\tregistry.For<IClientFactory>().Use<ClientFactory>();\n\t\t\tregistry.For<IDocumentFactory>().Use<DocumentFactory>();\n\t\t\tregistry.For<IBrandingStrategyFactory>().Use<BrandingStrategyFactory>();\n\t\t\tregistry.For<IHexColorManipulator>().Use<HexColorManipulator>();\n\t\t\tregistry.For<ICssDefinitionGenerator>().Use<CssDefinitionGenerator>();\n\t\t\tregistry.For<ILegacyCssDefinitionGenerator>().Use<LegacyCssDefinitionGenerator>();\n\t\t\tregistry.For<ICssThemeBuilder>().Use<CssThemeBuilder>();\n\t\t\tregistry.For<IPhysicalDocumentFilenameLookup>().Use<FileDataFilenameLookup>();\n\t\t\tregistry.For<DocuSign.CLM.ContentStorage.ISettingsProvider>().Singleton().Use<AtlasStorageSettingsProvider>();\n\t\t\tregistry.For<IAtlasPhysicalStorageFactory>().Singleton().Use<AtlasPhysicalStorageFactory>();\n\t\t\tregistry.For<IAtlasSharedStorageFactory>().Singleton().Use<AtlasSharedStorageFactory>();\n\t\t\tregistry.For<IAccountBrandingPersistenceFactory>().Use(context =>\n\t\t\t\tnew AccountBrandingPersistenceFactory(\n\t\t\t\t\tcontext.GetInstance<IWatchedSingletonConfig<IAccountBrandingPersistenceConfig>>(),\n\t\t\t\t\tcontext.GetInstance<IAccountBrandingPersistence>(nameof(AccountBrandingPersistenceLegacy)),\n\t\t\t\t\tcontext.GetInstance<IAccountBrandingPersistence>(nameof(AccountBrandingPersistenceCloud))));\n\t\t\tregistry.For<IMergeTaskDataSourceService>().Use<MergeTaskDataSourceService>();\n\t\t\tregistry.For<ISleepService>().Use<SleepService>();\n\t\t\tregistry.For<IXmlMergeProcessorFactory>().Use<XmlMergeProcessorFactory>();\n\t\t\tregistry.For<IXmlVariableSchemaXsdCreator>().Use<XmlVariableSchemaXsdCreator>();\n\t\t\tregistry.For<IValidationFactory>().Singleton().Use<ValidationFactory>();\n\t\t\tregistry.For<IValidationRepository>().Use<ValidationRepository>();\n\t\t\tregistry.For<IFormatName>().Use<LastNameFirstFormatter>();\n\t\t\tregistry.For<IDocTrackingService>().Use<DocTrackingService>();\n\t\t\tregistry.For<IAuthenticationChecks>().Use<AuthenticationChecks>();\n\t\t\tregistry.For<IContactLoader>().Use<ContactLoader>();\n\t\t\tregistry.For<IExpressionServiceClient>().Use<ExpressionServiceClient>();\n\t\t\tregistry.For<IModelFactory>().Use<ModelFactory>();\n\t\t\tregistry.For<ICertificateLoader>().Use<CertificateLoader>();\n\t\t\tregistry.For<IHttpClientFactory>().Use<HttpClientFactory>();\n\t\t\tregistry.For<IApprovalService>().Use<ApprovalService>();\n\t\t\tregistry.For<ISfAuthorizationRepositoryFactory>().Use<SfAuthorizationRepositoryFactory>();\n\t\t\tregistry.For<ISalesforceContentRepository>().Use<SalesforceContentRepository>();\n\t\t\tregistry.For<IJsonDefinitionConverter>().Use<JsonDefinitionConverter>();\n\t\t\tregistry.For<ICaptchaVerification>().Use<CaptchaVerification>();\n\t\t\tregistry.For<ISynchronousWorkService>().Use<SynchronousWorkService>();\n\t\t\tregistry.For<ITrackedContentService<WmlDocument>>().Use<WmlTrackedContentService>();\n\t\t\tregistry.For<IPrestoRestClient>().Use<PrestoRestClient>();\n\t\t\tregistry.For<IGlyphProcessingService>().Use<GlyphProcessingService>();\n\t\t\tregistry.For<IGlyphReconciliationService>().Use<GlyphReconciliationService>();\n\t\t\tregistry.For<IGlyphReconciliationTaskService>().Use<GlyphReconciliationTaskService>();\n\t\t\tregistry.For<IAsposeHelper>().Use<AsposeHelper>();\n\t\t\tregistry.For<ITrackedContentContextService>().Use<TrackedContentContextService>();\n\t\t\tregistry.For<IMergeDataSanitizer>().Use<MergeDataSanitizer>();\n\t\t\tregistry.For<ITaskMapper>().Singleton().Use<TaskMapper>();\n\t\t\tregistry.For<ISfGenQueryFactoryService>().Use<SfGenQueryFactoryService>();\n\t\t\tregistry.For<IJavelinServiceFactory>().Use<JavelinServiceFactory>();\n\t\t\tregistry.For<IJavelinConfigurationFactory>().Use<JavelinConfigurationFactory>();\n\t\t\tregistry.For<IJITSecurityCalculator>().Use<JITSecurityCalculator>();\n\t\t\tregistry.For<IReplaceTrackedContentService>().Use<ReplaceTrackedContentService>();\n\t\t\tregistry.For<ICompareTrackedContentTaskService>().Use<CompareTrackedContentTaskService>();\n\t\t\tregistry.For<IGetTrackedContentService>().Use<GetTrackedContentService>();\n\t\t\tregistry.For<ITrackedContentExtractionTaskService>().Use<TrackedContentExtractionTaskService>();\n\t\t\tregistry.For<ITaskServiceXmlStorageHelper>().Use<TaskServiceXmlStorageHelper>();\n\t\t\tregistry.For<ISecurityProviderList>().Use<SecurityProviderList>();\n\t\t\tregistry.For<IDocumentDownloadFormatResolver>().Use<DocumentDownloadFormatResolver>();\n\t\t\tregistry.For<IDelegationAccessPersistence>().Use<DelegationAccessPersistence>();\n\t\t\tregistry.For<IAgreementService>().Use<AgreementService>();\n\t\t\tregistry.For<IAIBulkJobContentComposer>().Use<AIBulkJobContentComposer>();\n\t\t\tregistry.For<IAccountUidUtilities>().Use<AccountUidUtilities>();\n\t\t\tregistry.For<IUserAccountUtilities>().Use<UserAccountUtilities>();\n\t\t\tregistry.For<IResponseEventEmitter>().Use<ResponseEventEmitter>();\n\t\t\tregistry.For<IEmbeddedDocumentPropertiesHandlerFactory>().Singleton().Use<EmbeddedDocumentPropertiesHandlerFactory>();\n\t\t\tregistry.For<IExternalReviewEmailAttachmentBuilder>().Use<ExternalReviewEmailAttachmentBuilder>();\n\t\t\tregistry.For<IAsposeLicenseSetterWrapper>().Use<AsposeLicenseSetterWrapper>();\n\t\t\tregistry.For<IExternalReviewDocumentMatchingService>().Use<ExternalReviewDocumentMatchingService>();\n\t\t\tregistry.For<IWorkItemHelper>().Use<WorkItemHelper>();\n\t\t\tregistry.For<IABACPolicyService>().Use<ABACPolicyService>();\n\t\t\tregistry.For<IAdmMapper>().Singleton().Use<AdmMapper>();\n\t\t\tregistry.For<IAdmRestClient>().Use<AdmRestClient>();\n\t\t\tregistry.For<IAomRestClient>().Use<AomRestClient>();\n\t\t\tregistry.For<IEmsRestClient>().Use<EmsRestClient>();\n\t\t\tregistry.For<IADMStoreRestClient>().Use<ADMStoreRestClient>();\n\t\t\tregistry.For<IADMStoreRestClientUtilities>().Use<ADMStoreRestClientUtilities>();\n\t\t\tregistry.For<IADMStoreUtilities>().Use<ADMStoreUtilities>();\n\t\t\tregistry.For<IDevXIamClient>().Use<DevXIamClient>();\n\t\t\tregistry.For<IEmsRestClientUtilities>().Use<EmsRestClientUtilities>();\n\t\t\tregistry.For<IDevXIamClientUtilities>().Use<DevXIamClientUtilities>();\n\t\t\tregistry.For<IMetadataLoaderService>().Use<MetadataLoaderService>();\n\t\t\tregistry.For<IMetadataLoaderFactory>().Use<MetadataLoaderFactory>();\n\t\t\tregistry.For<IMetadataVariablePropertyLoader>().Use<MetadataVariablePropertyLoader>();\n\t\t\tregistry.For<ISettingRepository>().Use<SettingRepository>();\n\t\t\tregistry.For<IAccountConversionValidatorHelper>().Use<AccountConversionValidatorHelper>();\n\t\t\tregistry.For<IAccountConversionAdminValidator>().Use<AccountConversionAdminValidator>();\n\t\t\tregistry.For<IAccountConversionStatusHelper>().Use<AccountConversionStatusHelper>();\n\t\t\tregistry.For<IGroupConversionService>().Use<GroupConversionService>();\n\t\t\tregistry.For<IFeatureValidator>().Use<FeatureValidator>();\n\t\t\tregistry.For<IWorkflowSettingRepository>().Use<WorkflowSettingRepository>();\n\t\t\tregistry.For<IDocumentPublishService>().Use<DocumentPublishService>();\n\t\t\tregistry.For<IDSApiConfigurationService>().Use<DSApiConfigurationService>();\n\t\t\tregistry.For<IGenTemplateApiService>().Use<GenTemplateApiService>();\n\t\t\tregistry.For<IPartyAgreementTreesHelper>().Use<PartyAgreementTreesHelper>();\n\t\t\tregistry.For<IMetadataUnifiedRepositoryHelper>().Use<MetadataUnifiedRepositoryHelper>();\n\t\t\tregistry.For<IUnifiedRepositoryAttributeService>().Use<UnifiedRepositoryAttributeService>();\n\t\t\tregistry.For<IUnifiedRepositoryCompletionService>().Use<UnifiedRepositoryCompletionService>();\n\t\t\tregistry.For<IPeriodParser>().Use<PeriodParser>();\n\t\t\tregistry.For<IAccountMigrationSettingsManager>().Use<AccountMigrationSettingsManager>();\n\t\t\tregistry.For<IEntityChangeManager>().Use<EntityChangeManager>();\n\t\t\tregistry.For<IAccountConversionSnapshotHelper>().Use<AccountConversionSnapshotHelper>();\n\t\t\tregistry.For<IAccountMigrationHealthCheckService>().Use<AccountMigrationHealthCheckService>();\n\t\t\tregistry.For<IUserGroupMigrationService>().Use<UserGroupMigrationService>();\n\t\t\tregistry.For<IAccountMigrationStatusManager>().Use<AccountMigrationStatusManager>();\n\t\t\tregistry.For<IWatermarkHelper>().Use<WatermarkHelper>();\n\t\t\tregistry.For<IWatermarkServiceDoc>().Use<DocxWatermarkService>();\n\t\t\tregistry.For<IAccountDataSnapshotService>().Use<AccountDataSnapshotService>();\n\t\t\tregistry.For<ISendDsEmailService>().Use<SendDsEmailService>();\n\t\t\tregistry.For<IEmailClient>().Use<EmailClient>();\n\t\t\tregistry.For<IAttributesManagementFramework>().Use<AttributesManagementFramework>();\n\t\t\tregistry.For<IWorkflowsClient>().Singleton().Use<WorkflowsClient>();\n\t\t\tregistry.For<IAssignmentClient>().Singleton().Use<AssignmentClient>();\n\t\t\tregistry.For<IWorkflowActivitiesClient>().Singleton().Use<WorkflowActivitiesClient>();\n\t\t\tregistry.For<DocxXmlMergeProcessor>().Use<DocxXmlMergeProcessor>();\n\t\t\tregistry.For<DocxOpenXmlMergeProcessor>().Use<DocxOpenXmlMergeProcessor>();\n\t\t\tregistry.For<IDacDocGenApiMergeProcessor>().Use<DacDocGenApiMergeProcessor>();\n\t\t\tregistry.For<IExpressionApiClientFactory>().Use<ExpressionApiClientFactory>();\n\t\t\tregistry.For<IAccountSettingsWrapper>().Use<AccountSettingsWrapper>();\n\t\t\tregistry.For<IOcrGetSearchablePdfService>().Use<OcrGetSearchablePdfService>();\n\t\t\t//The below registry is added as part of ATL-72353\n\t\t\t//Any instantiations of IXmlMergeProcessor should use the latest merge processor (DocumentAssemblerMergeProcessor)\n\t\t\tregistry.For<IXmlMergeProcessor>().Use<DocumentAssemblerMergeProcessor>();\n\t\t\tregistry.For<IDacDocGenApiService>().Use<DacDocGenApiService>();\n\t\t\tregistry.For<IDacDocGenApiClientExceptionFactoryService>().Use<DacDocGenApiClientExceptionFactoryService>();\n\t\t\tregistry.For<Configuration>().Use(\"Config for OneNotification EmailApi\", (context) =>\n\t\t\t{\n\t\t\t\tvar configService = context.GetInstance<IDSApiConfigurationService>();\n\t\t\t\treturn configService.GetEmailApiConfiguration(ApplicationSettings.GetDocuSignNotificationApiBaseUrl);\n\t\t\t});\n\t\t\tregistry.For<IEmailApi>().Use(ctx => new EmailApi(ctx.GetInstance<Configuration>()));\n\n\t\t\tregistry.For<ISettingProviderFactory>().Use<DefaultSettingProviderFactory>();\n\n\t\t\tSalesforceRegistry.Populate(registry);\n\n\t\t\tPopulateAIDependencies(registry);\n\n\t\t\tPopulateOfficeOnlineDependencies(registry);\n\n\t\t\tnew FeatureFlagsRegistry().Populate(registry);\n\n\t\t\tregistry.IncludeRegistry(new ContentStorageRegistry().GetRegistry());\n\t\t\tregistry.IncludeRegistry(new AccountBrandingRegistry(_oneConfigPath).GetRegistry());\n\n\t\t\tPopulateWorkflowOneConfigRegistry(registry, _oneConfigPath);\n\n\t\t\tregistry.IncludeRegistry(new CoreServiceRegistry(_oneConfigPath).GetRegistry());\n\t\t\tregistry.For<IProfileNotificationSyncLoggingHelper>().Use<ProfileNotificationSyncLoggingHelper>();\n\t\t\tregistry.For<IUrlRepositoryWrapper>().Use<UrlRepositoryWrapper>();\n\t\t\tregistry.For<IObjectHistoryUtility>().Use<ObjectHistoryUtility>();\n\t\t\tregistry.For<IServiceProviderIsService>().Use<StructureMapIsService>();\n\t\t}\n\n\t\tprivate static void PopulateRepositoryRegistries(Registry registry)\n\t\t{\n\t\t\tregistry.For<IAgreementRepository>().Use<AgreementRepository>();\n\t\t\tregistry.For<ICounterpartyRepository>().Use<CounterpartyRepository>();\n\t\t\tregistry.For<IObligationRepository>().Use<ObligationRepository>();\n\t\t\tregistry.For<IDocumentTypesRepository>().Use<DocumentTypesRepository>();\n\t\t\tregistry.For<ITranslationRepository>().Use<TranslationRepository>();\n\t\t\tregistry.For<IAccessControlRepository>().Use<AccessControlRepository>();\n\t\t\tregistry.For<IAccountRepository>().Use<AccountRepository>();\n\t\t\tregistry.For<IAddressBookRepository>().Use<AddressBookRepository>();\n\t\t\tregistry.For<IAutoNumberRepository>().Use<AutoNumberRepository>();\n\t\t\tregistry.For<IOAuthRepository>().Use<OAuthRepository>();\n\t\t\tregistry.For<ICountryRepository>().Use<CountryRepository>();\n\t\t\tregistry.For<IDeviceRepository>().Use<DeviceRepository>();\n\t\t\tregistry.For<IProvinceStateRepository>().Use<ProvinceStateRepository>();\n\t\t\tregistry.For<ISyncRepository>().Use<SyncRepository>();\n\t\t\tregistry.For<IUserAccountRepository>().Use(() => new UserAccountRepository((IAtlasPersistenceFactory)null));\n\t\t\tregistry.For<ILoginRepository>().Use<LoginRepository>();\n\t\t\tregistry.For<IGroupRepository>().Use<GroupRepository>();\n\t\t\tregistry.For<IMetadataRepository>().Use<MetadataRepository>();\n\t\t\tregistry.For<IMetadataFieldService>().Use<MetadataFieldService>();\n\t\t\tregistry.For<IMetadataFieldRepository>().Use<MetadataFieldRepository>();\n\t\t\tregistry.For<IMetadataGroupRepository>().Use<MetadataGroupRepository>();\n\t\t\tregistry.For<IMetadataSetRepository>().Use<MetadataSetRepository>();\n\t\t\tregistry.For<IWorkflowRepository>().Use<WorkflowRepository>();\n\t\t\tregistry.For<IWorkflowDesignRepository>().Use<WorkflowDesignRepository>();\n\t\t\tregistry.For<IFolderRepository>().Singleton().Use<FolderRepository>();\n\t\t\tregistry.For<ISyncRuleRepository>().Use<SyncRuleRepository>();\n\t\t\tregistry.For<IDocumentRepository>().Singleton().Use<DocumentRepository>();\n\t\t\tregistry.For<IDocumentCheckinHandler>().Use<DocumentCheckinHandler>();\n\t\t\tregistry.For<INotificationRepository>().Use<NotificationRepository>();\n\t\t\tregistry.For<ISFSecurityMappingRepository>().Use<SFSecurityMappingRepository>();\n\t\t\tregistry.For<ICustomRuleRepository>().Use<CustomRuleRepository>();\n\t\t\tregistry.AddCaching(useRedis: true);\n\t\t\tregistry.For<IProtobufCachingRepository>().Use<ProtobufCachingRepository>();\n\t\t\tregistry.For<IUploadTokenRepository>().Use<UploadTokenRepository>();\n\t\t\tregistry.For<IShareRepository>().Use<ShareRepository>();\n\t\t\tregistry.For<IDocumentCompareRepository>().Use<DocumentCompareRepository>();\n\t\t\tregistry.For<IQueueItemStateRepository>().Use<QueueItemStateRepository>();\n\t\t\tregistry.For<IOutboundHttpRepository>().Use<OutboundHttpFileRepository>();\n\t\t\tregistry.For<IDuplicateHandlingRepository>().Use<DuplicateHandlingRepository>();\n\t\t\tregistry.For<IDocumentHistoryRepository>().Use<DocumentHistoryRepository>();\n\t\t\tregistry.For<IBarcodeRepository>().Use<BarcodeRepository>();\n\t\t\tregistry.For<IExternalSystemUserRepository>().Use<ExternalSystemUserRepository>();\n\t\t\tregistry.For<IMoveNodeRepository>().Use<MoveNodeRepository>();\n\t\t\tregistry.For<IFormDocumentRepository>().Use<FormDocumentRepository>();\n\t\t\tregistry.For<IEmailRepository>().Use<EmailRepository>();\n\t\t\tregistry.For<IEmailTemplateRepository>().Use<EmailTemplateRepository>().Ctor<ICacheRepository>().Is<InMemoryCache>();\n\t\t\tregistry.For<ITransactionRepository>().Use<TransactionRepository>();\n\t\t\tregistry.For<ISubscribeAllRepository>().Use<SubscribeAllRepository>();\n\t\t\tregistry.For<IContactRepository>().Use<ContactRepository>();\n\t\t\tregistry.For<IInboundEmailRepository>().Use<InboundEmailRepository>();\n\t\t\tregistry.For<IWorkerPoolRepository>().Use<WorkerPoolRepository>();\n\t\t\tregistry.For<IDocumentScopeRepository>().Use<DocumentScopeRepository>();\n\t\t\tregistry.For<IReminderTemplateRepository>().Use<ReminderTemplateRepository>();\n\t\t\tregistry.For<ISecurityRepository>().Use<SecurityRepository>();\n\t\t\tregistry.For<IDocumentReminderRepository>().Use<DocumentReminderRepository>();\n\t\t\tregistry.For<IApiWhiteListedUriRepository>().Use<ApiWhiteListedUriRepository>();\n\t\t\tregistry.For<ISOAPAuthenticationTokenRepository>().Use<SOAPAuthenticationTokenRepository>();\n\t\t\tregistry.For<ICommonRepository>().Use<CommonRepositoryWrapper>();\n\t\t\tregistry.For<IAtlasMixpanelClient>().Singleton().Use<AtlasMixpanelClient>();\n\t\t\tregistry.For<IExternalReviewReporting>().Singleton().Use<ExternalReviewReporting>();\n\t\t\tregistry.For<IExternalReviewRepository>().Singleton().Use<ExternalReviewRepository>();\n\t\t\tregistry.For<ISafeToReplyEmailDomainRepository>().Singleton().Use<SafeToReplyEmailDomainRepository>();\n\t\t\tregistry.For<INegotiationApiClient>().Singleton().Use<NegotiationApiClient>();\n\t\t\tregistry.For<IObjectHistoryRepository>().Use<ObjectHistoryRepository>();\n\t\t\tregistry.For<ITermRepository>().Use<TermRepository>();\n\t\t\tregistry.For<IDocumentLauncherDataRepository>().Use<DocumentLauncherDataRepository>();\n\t\t\tregistry.For<IAccountBrandingRepository>().Use<AccountBrandingRepository>();\n\t\t\tregistry.For<IDocLauncherConfigRepository>().Use<DocLauncherConfigRepository>();\n\t\t\tregistry.For<IVersionRepository>().Use<VersionRepository>();\n\t\t\tregistry.For<IRevisionRepository>().Use<RevisionRepository>();\n\t\t\tregistry.For<IDefinitionRepository>().Use<DefinitionRepository>();\n\t\t\tregistry.For<IFormRepository>().Use<FormRepository>();\n\t\t\tregistry.For<IInstanceRepository>().Use<InstanceRepository>();\n\t\t\tregistry.For<IInstanceVariableRepository>().Use<InstanceVariableRepository>();\n\t\t\tregistry.For<IInstanceActivityRepository>().Use<InstanceActivityRepository>();\n\t\t\tregistry.For<IInstanceHistoryRepository>().Use<InstanceHistoryRepository>();\n\t\t\tregistry.For<IFormConfigurationRepository>().Use<FormConfigurationRepository>();\n\t\t\tregistry.For<ITrackedFieldRepository>().Use<TrackedFieldRepository>();\n\t\t\tregistry.For<ITrackedFieldStatusRepository>().Use<TrackedFieldStatusRepository>();\n\t\t\tregistry.For<IUserActionRepository>().Use<UserActionRepository>();\n\t\t\tregistry.For<IMergeDataRepository>().Use<MergeDataRepository>();\n\t\t\tregistry.For<ITwoFactorRepository>().Use<TwoFactorRepository>();\n\t\t\tregistry.For<IInboundFaxRepository>().Use<InboundFaxRepository>();\n\t\t\tregistry.For<IDocumentSelectionRepository>().Use<DocumentSelectionRepository>();\n\t\t\tregistry.For<IDocumentGlyphsRepository>().Use<DocumentGlyphsRepository>();\n\t\t\tregistry.For<ILegacyCustomActionsReportRepository>().Use<LegacyCustomActionsReportRepository>();\n\t\t\tregistry.For<IWebServiceRepository>().Use<WebServiceRepository>();\n\t\t\tregistry.For<ISSORepository>().Use<SSORepository>();\n\t\t\tregistry.For<IScopeEventRepository>().Use<ScopeEventRepository>();\n\t\t\tregistry.For<IReportConfigurationRepository>().Use<ReportConfigurationRepository>();\n\t\t\tregistry.For<ITermSyncRepository>().Use<TermSyncRepository>();\n\t\t\tregistry.For<ILoginLockRepository>().Use<LoginLockRepository>();\n\t\t\tregistry.For<IDocLauncherCsvRowLookupRepository>().Use<DocLauncherCsvRowLookupRepository>();\n\t\t\tregistry.For<IDocLauncherCsvParseHelper>().Use<DocLauncherCsvParseHelper>();\n\t\t\tregistry.For<ICustomUserRoleRepository>().Use<CustomUserRoleRepository>();\n\t\t\tregistry.For<IApprovalWorkflowRepository>().Use<ApprovalWorkflowRepository>();\n\t\t\tregistry.For<IUserConsentRepository>().Use<UserConsentRepository>();\n\t\t\tregistry.For<IAnalyticsReportRepository>().Use<AnalyticsReportRepository>();\n\t\t\tregistry.For<IReportUserFiltersRepository>().Use<ReportUserFiltersRepository>();\n\t\t\tregistry.For<IReportUserConfigurationRepository>().Use<ReportUserConfigurationRepository>();\n\t\t\tregistry.For<IExternalDataMapRepository>().Use<ExternalDataMapRepository>();\n\t\t\tregistry.For<IFileMetaDataRepository>().Use<FileMetaDataRepository>();\n\t\t\tregistry.For<IOpenXmlRepository>().Use<OpenXmlRepository>();\n\t\t\tregistry.For<IAsposeCompareRepository>().Use<AsposeCompareRepository>();\n\t\t\tregistry.For<IAsposeContentReplacementRepository>().Use<AsposeContentReplacementRepository>();\n\t\t\tregistry.For<IAsposeTrackedContentRepository>().Use<AsposeTrackedContentRepository>();\n\t\t\tregistry.For<IAsposeMailMergeRepository>().Use<AsposeMailMergeRepository>();\n\t\t\tregistry.For<ICombineDocumentRepository>().Use<CombineDocumentRepository>();\n\t\t\tregistry.For<IRequestOriginRestrictionRepository>().Use<RequestOriginRestrictionRepository>();\n\t\t\tregistry.For<IProvisioningAppDataRepository>().Use<ProvisioningAppDataRepository>();\n\t\t\tregistry.For<IAccessTokenManager>().Use<AccessTokenManager>().Singleton();\n\t\t\tregistry.For<IDSAccountsServerRepository>().Use<DSAccountsServerRepository>();\n\t\t\tregistry.For<IDocuSignAuthTokenVerifier>().Singleton().Use<DocuSignAuthTokenVerifier>();\n\t\t\tregistry.For<IDSOrganizationManagementService>().Use<DSOrganizationManagementService>();\n\t\t\tregistry.For<IUserSyncRepository>().Use<UserSyncRepository>();\n\t\t\tregistry.For<ISfAuthorizationRepository>().Use<SfAuthorizationRepository>();\n\t\t\tregistry.For<ISfAuthorizationRepository>().Use<SfScratchOrgAuthorizationRepository>();\n\t\t\tregistry.For<ISignatureRepository>().Use<SignatureRepository>();\n\t\t\tregistry.For<ILoginDelegationRepository>().Use<LoginDelegationRepository>();\n\t\t\tregistry.For<IAccountProvisioningService>().Use<AccountProvisioningService>();\n\t\t\tregistry.For<ILoginDelegateRepository>().Use<LoginDelegateRepository>();\n\t\t\tregistry.For<IDSApiRepository>().Use<DSApiRepository>();\n\t\t\tregistry.For<IHtmlConversionRepository>().Use<HtmlConversionRepository>();\n\t\t\tregistry.For<IDocuSignSyncRepository>().Use<DocuSignSyncRepository>();\n\t\t\tregistry.For<ISealCredentialRepository>().Use<SealCredentialRepository>();\n\t\t\tregistry.For<IAdvancedInsightsConfigurationRepository>().Use<SealConfigurationRepository>();\n\t\t\tregistry.For<ISealExtractionsRepository>().Use<SealExtractionsRepository>();\n\t\t\tregistry.For<ISealScorecardsRepository>().Use<SealScorecardsRepository>();\n\t\t\tregistry.For<ISealApplicationSettingsProvider>().Use<SealApplicationSettingsProvider>();\n\t\t\tregistry.For<IClauseCredentialRepository>().Use<ClauseCredentialRepository>();\n\t\t\tregistry.For<IClauseSmartContractRepository>().Use<ClauseSmartContractRepository>();\n\t\t\tregistry.For<ITrackedContentWritebackService>().Use<TrackedContentWritebackService>();\n\t\t\tregistry.For<IWritebackProcessingService>().Use<WritebackProcessingService>();\n\t\t\tregistry.For<IGetDataProviderFactory>().Use<GetDataProviderFactory>();\n\t\t\tregistry.For<ITrackedFieldHelper>().Use<TrackedFieldHelper>();\n\t\t\tregistry.For<ISaveDataProviderFactory>().Use<SaveDataProviderFactory>();\n\t\t\tregistry.For<IEqualityComparerStrategy>().Use<EqualityComparerStrategy>();\n\t\t\tregistry.For<IEqualityComparer>().Use<TextEqualityComparer>();\n\t\t\tregistry.For<IEqualityComparer>().Use<DateEqualityComparer>();\n\t\t\tregistry.For<IEqualityComparer>().Use<NumberEqualityComparer>();\n\t\t\tregistry.For<IEqualityComparer>().Use<CurrencyEqualityComparer>();\n\t\t\tregistry.For<IEqualityComparer>().Use<HtmlEqualityComparer>();\n\t\t\tregistry.For<IEqualityComparer>().Use<CleanedStringCaseInsensitiveEqualityComparer>();\n\t\t\tregistry.For<IForwardEventRegistrationRepository>().Use<ForwardEventRegistrationRepository>();\n\t\t\tregistry.For<IDataManipulationHelper>().Use<DataManipulationHelper>();\n\t\t\tregistry.For<IDataReviewStandardAttributeHelper>().Use<DataReviewStandardAttributeHelper>();\n\t\t\tregistry.For<ISalesforceHelper>().Use<SalesforceHelper>();\n\t\t\tregistry.For<ITrackedContentExtractionRepository>().Use<TrackedContentExtractionRepository>();\n\t\t\tregistry.For<IAnalyticsReportCacheRepository>().Use<AnalyticsReportCacheRepository>();\n\t\t\tregistry.For<IContentReplacementRepository>().Use<ContentReplacementRepository>();\n\t\t\tregistry.For<IExternalSecurityMapRepository>().Use<ExternalSecurityMapRepository>();\n\t\t\tregistry.For<IAsposeDatabagRepository<ScorecardDatabag>>().Use<AsposeScorecardDatabagRepository>();\n\t\t\tregistry.For<IDelegationAccessRepository>().Use<DelegationAccessRepository>();\n\t\t\tregistry.For<ISessionRepository>().Use<SessionRepository>();\n\t\t\tregistry.For<IAIDocumentBatchRepository>().Use<AIDocumentBatchRepository>();\n\t\t\tregistry.For<IIntellegoExtractionsRepository>().Use<IntellegoExtractionsRepository>();\n\t\t\tregistry.For<ISecurityAccessRuleRepository>().Use<SecurityAccessRuleRepository>();\n\t\t\tregistry.For<IElasticAgreementRepository>().Use<ElasticAgreementRepository>();\n\t\t\tregistry.For<IDocLauncherConfigEventEmitter>().Use<DocLauncherConfigEventEmitter>();\n\t\t\tregistry.For<IAccountConversionStatusRepository>().Use<AccountConversionStatusRepository>();\n\t\t\tregistry.For<IAccountConversionSnapshotRepository>().Use<AccountConversionSnapshotRepository>();\n\t\t\tregistry.For<IUserGroupMigrationStatusRepository>().Use<UserGroupMigrationStatusRepository>();\n\t\t\tregistry.For<ILWDPRepository>().Use<LWDPRepository>();\n\t\t\tregistry.For<IWorkItemRepository>().Use<WorkItemRepository>();\n\t\t\tregistry.For<ISecurityMetadataRepository>().Use<SecurityMetadataRepository>();\n\t\t\tregistry.For<IMixedModeSettingUtility>().Use<MixedModeSettingUtility>();\n\t\t\tregistry.For<ITenantConnectionDirectory>().Use<TenantConnectionDirectory>();\n\t\t\tregistry.For<ICachedTenantConnectionDirectory>().Use<CachedTenantConnectionDirectory>();\n\t\t\tregistry.For<IAnalyticsQueryLogRepository>().Use<AnalyticsQueryLogRepository>();\n\t\t\tregistry.For<IAugmentedMetadataFieldRepository>().Use<AugmentedMetadataFieldRepository>();\n\t\t\tregistry.For<IEmailThrottlingRepository>().Use<EmailThrottlingRepository>();\n\t\t\tregistry.For<ICounterThrottlingRepository>().Use<CounterThrottlingRepository>();\n\t\t\tregistry.For<ICollaborationCacheHandler>().Use<CollaborationCacheHandler>();\n\t\t\tregistry.For<IMetadataRelationRepository>().Use<MetadataRelationRepository>();\n\t\t\tregistry.For<IAccountConversionSnapshotUtility>().Use<AccountConversionSnapshotUtility>();\n\t\t\tregistry.For<IAssignmentClientFactory>().Use<AssignmentClientFactory>().Singleton();\n\t\t\tregistry.For<IReadableConfiguration>().Use<ADEXS.Core.Domain.ConfigurationFactory.AssignmentApiReadableConfiguration>().Singleton();\n\t\t\tregistry.For<IConfigProvider>().Use<ConfigProviderNonAsp>();\n\t\t\tregistry.For<IAssignmentService>().Use<AssignmentService>().Singleton();\n\t\t\tregistry.For<ICustomReportRepository>().Use<CustomReportRepository>();\n\t\t\tregistry.For<ICustomRuleEventEmitter>().Use<CustomRuleEventEmitter>();\n\t\t\tregistry.For<IDocumentSearchQueryFactory>().Use<DocumentSearchQueryFactory>();\n\t\t\tregistry.For<IMetadataParser>().Use<MetadataParser>();\n\t\t\tregistry.For<IAccountMigrationRepository>().Singleton().Use<AccountMigrationRepository>();\n\t\t\tregistry.For<IIndexReconciliationRepository>().Singleton().Use<IndexReconciliationRepository>();\n\t\t\tregistry.For<IADMStoreAgreementRepositoryFactory>().Use<ADMStoreAgreementRepositoryFactory>();\n\t\t}\n\n\t\tprivate static void PopulatePersistenceRegistries(Registry registry)\n\t\t{\n\t\t\tregistry.For<INullValuePersistence>().Singleton().Use<NullValuePersistence>();\n\n\t\t\tregistry.For<IAccountBrandingPersistence>().Use<AccountBrandingPersistenceLegacy>().Named(nameof(AccountBrandingPersistenceLegacy));\n\t\t\tregistry.For<IAccountBrandingPersistence>().Use<AccountBrandingPersistenceCloud>().Named(nameof(AccountBrandingPersistenceCloud));\n\t\t\tregistry.For<IAtlasContextProvider>().Singleton().Use<AtlasContextProvider>().Named(nameof(AtlasContextProvider));\n\t\t\tregistry.For<IAtlasContextProvider>().Singleton().Use<AsyncAtlasContextProvider>().Named(nameof(AsyncAtlasContextProvider));\n\n\t\t\tregistry.For<IAtlasContextProviderConfiguration>().Use<AtlasContextProviderConfiguration>();\n\t\t\tregistry.For<IAtlasContextProviderFactory>().Singleton().Use(context =>\n\t\t\t\tnew AtlasContextProviderFactory(\n\t\t\t\t\t() => context.GetInstance<IAtlasContextProvider>(nameof(AtlasContextProvider)),\n\t\t\t\t\t() => context.GetInstance<IAtlasContextProvider>(nameof(AsyncAtlasContextProvider)),\n\t\t\t\t\tcontext.GetInstance<IAtlasContextProviderConfiguration>()));\n\n\t\t\tregistry.For<IAtlasContextProvider>().Use(context => context.GetInstance<IAtlasContextProviderFactory>().Create());\n\n\t\t\tregistry.For<IAtlasContextWrapper>().Singleton().Use<AtlasContextWrapper>();\n\n\t\t\tregistry.For<IAuthenticationPersistenceFactory>().Singleton().Use<AuthenticationPersistenceFactory>();\n\t\t\tregistry.For<IDefaultPersistenceFactory>().Singleton().Use<DefaultPersistenceFactory>();\n\t\t\tregistry.For<IAtlasPersistenceFactory>().Singleton().Use<AtlasPersistenceFactory>();\n\n\t\t\tregistry.For<IAccessControlPersistence>().Use<AccessControlPersistence>();\n\t\t\tregistry.For<IAccountPersistence>().Use<AccountPersistence>();\n\t\t\tregistry.For<IAccountStatisticPersistence>().Use<AccountStatisticPersistence>();\n\t\t\tregistry.For<IAutoNumberPersistence>().Use<AutoNumberPersistence>();\n\t\t\tregistry.For<ISchedulePersistence>().Use<SchedulePersistence>();\n\t\t\tregistry.For<IFormPersistence>().Use<FormPersistence>();\n\n\t\t\tregistry.For<ICounterpartyPersistence>().Use<CounterpartyPersistence>();\n\t\t\tregistry.For<IAgreementPersistence>().Use<AgreementPersistence>();\n\t\t\tregistry.For<IObligationPersistence>().Use<ObligationPersistence>();\n\t\t\tregistry.For<IDocumentTypesPersistence>().Use<DocumentTypesPersistence>();\n\t\t\tregistry.For<IVersionPersistence>().Use<VersionPersistence>();\n\t\t\tregistry.For<IDefinitionPersistence>().Use<DefinitionPersistence>();\n\t\t\tregistry.For<IAPILicensePersistence>().Use<APILicensePersistence>();\n\t\t\tregistry.For<IDocumentPersistence>().Use<DocumentPersistence>();\n\t\t\tregistry.For<IDevicePersistence>().Use<DevicePersistence>();\n\t\t\tregistry.For<ICommonPersistence>().Use<CommonPersistence>();\n\t\t\tregistry.For<IElasticsearchConnectionInfoPersistence>().Use<ElasticsearchConnectionInfoPersistence>();\n\t\t\tregistry.For<IFolderPersistence>().Use<FolderPersistence>();\n\t\t\tregistry.For<IContactPersistence>().Use<ContactPersistence>();\n\t\t\tregistry.For<IMetadataPersistence>().Use<MetadataPersistence>();\n\t\t\tregistry.For<IMetadataGroupPersistence>().Use<MetadataGroupPersistence>();\n\t\t\tregistry.For<IMetadataFieldPersistence>().Use<MetadataFieldPersistence>();\n\t\t\tregistry.For<IMetadataQueuePersistence>().Use<MetadataQueuePersistence>();\n\t\t\tregistry.For<IMetadataSetPersistence>().Use<MetadataSetPersistence>();\n\t\t\tregistry.For<IMetadataRelationPersistence>().Use<MetadataRelationPersistence>();\n\t\t\tregistry.For<IOAuthKeyPersistence>().Use<OAuthKeyPersistence>();\n\t\t\tregistry.For<IPortalPersistence>().Use<PortalPersistence>();\n\t\t\tregistry.For<ISavedSearchPersistence>().Use<SavedSearchPersistence>();\n\t\t\tregistry.For<ISavedSearchRepository>().Use<SavedSearchRepository>();\n\t\t\tregistry.For<ISearchTelemetry>().Use<SearchTelemetry>();\n\t\t\tregistry.For<ISettingPersistence>().Use<SettingPersistence>();\n\t\t\tregistry.For<ISyncPersistence>().Use<SyncPersistence>();\n\t\t\tregistry.For<IUserAccountPersistence>().Use<UserAccountPersistence>();\n\t\t\tregistry.For<IUserAPIAuthenticationKeyPersistence>().Use<UserAPIAuthenticationKeyPersistence>();\n\t\t\tregistry.For<ILoginLockPersistence>().Use<LoginLockPersistence>();\n\t\t\tregistry.For<ILoginPersistence>().Use<LoginPersistence>();\n\t\t\tregistry.For<ILoginRecentPasswordPersistence>().Use<LoginRecentPasswordPersistence>();\n\t\t\tregistry.For<IUserLoginLogPersistence>().Use<UserLoginLogPersistence>();\n\t\t\tregistry.For<IWorkerPoolPersistence>().Use<WorkerPoolPersistence>();\n\t\t\tregistry.For<IWorkItemPersistence>().Use<WorkItemPersistence>();\n\t\t\tregistry.For<IGroupPersistence>().Use<GroupPersistence>();\n\t\t\tregistry.For<IDocumentCheckInNotificationPersistence>().Use<DocumentCheckinNotificationPersistence>();\n\t\t\tregistry.For<IDashboardTabPersistence>().Use<DashboardTabPersistence>();\n\t\t\tregistry.For<IDashboardTabViewerPersistence>().Use<DashboardTabViewerPersistence>();\n\t\t\tregistry.For<IDashboardWidgetPersistence>().Use<DashboardWidgetPersistence>();\n\t\t\tregistry.For<ICustomRulePersistence>().Use<CustomRulePersistence>();\n\t\t\tregistry.For<IResetPasswordRequestPersistence>().Use<ResetPasswordRequestPersistence>();\n\t\t\tregistry.For<INotificationPersistence>().Use<NotificationPersistence>();\n\t\t\tregistry.For<IRevisionPersistence>().Use<RevisionPersistence>();\n\t\t\tregistry.For<ISFSecurityMappingPersistence>().Use<SFSecurityMappingPersistence>();\n\t\t\tregistry.For<IGroupMemberPersistence>().Use<GroupMemberPersistence>();\n\t\t\tregistry.For<IDeliveryPersistence>().Use<DeliveryPersistence>();\n\t\t\tregistry.For<ITransactionPersistence>().Use<TransactionPersistence>();\n\t\t\tregistry.For<IAlertPersistence>().Use<AlertPersistence>();\n\t\t\tregistry.For<IExternalSystemUserPersistence>().Use<ExternalSystemUserPersistence>();\n\t\t\tregistry.For<IInboundFaxPersistence>().Use<InboundFaxPersistence>();\n\t\t\tregistry.For<IPublicShareLinkPersistence>().Use<PublicShareLinkPersistence>();\n\t\t\tregistry.For<IAPIRegistrationPersistence>().Use<APIRegistrationPersistence>();\n\t\t\tregistry.For<IQueueStatePersistence>().Use<QueueStatePersistence>();\n\t\t\tregistry.For<IFileDataPersistence>().Use<FileDataPersistence>();\n\t\t\tregistry.For<IFileDataContentHashPersistence>().Use<FileDataContentHashPersistence>();\n\t\t\tregistry.For<ISecurityQueuePersistence>().Use<SecurityQueuePersistence>();\n\t\t\tregistry.For<IStorageQueuePersistence>().Use<StorageQueuePersistence>();\n\t\t\tregistry.For<IAccountActivityPersistence>().Use<AccountActivityPersistence>();\n\t\t\tregistry.For<IQueueItemStatePersistence>().Use<QueueItemStatePersistence>();\n\t\t\tregistry.For<ICustomReportPersistence>().Use<CustomReportPersistence>();\n\t\t\tregistry.For<ISignaturePersistence>().Use<SignaturePersistence>();\n\t\t\tregistry.For<IDocumentScopePersistence>().Use<DocumentScopePersistence>();\n\t\t\tregistry.For<IReminderTemplatePersistence>().Use<ReminderTemplatePersistence>();\n\t\t\tregistry.For<IReminderTemplateRecipientPersistence>().Use<ReminderTemplateRecipientPersistence>();\n\t\t\tregistry.For<ISecurityPersistence>().Use<SecurityPersistence>();\n\t\t\tregistry.For<IStaticSecurityPersistence>().Use<StaticSecurityPersistence>();\n\t\t\tregistry.For<IExternalDataMapPersistence>().Use<ExternalDataMapPersistence>();\n\t\t\tregistry.For<IForwardEventRegistrationPersistence>().Use<ForwardEventRegistrationPersistence>();\n\t\t\tregistry.For<IDocumentReminderPersistence>().Use<DocumentReminderPersistence>();\n\t\t\tregistry.For<IDocumentReminderRecipientPersistence>().Use<DocumentReminderRecipientPersistence>();\n\t\t\tregistry.For<IInstanceHistoryPersistence>().Use<InstanceHistoryPersistence>();\n\t\t\tregistry.For<IWatchedDocumentsPersistence>().Use<WatchedDocumentsPersistence>();\n\t\t\tregistry.For<ISAMLTokenPersistence>().Use<SAMLTokenPersistence>();\n\t\t\tregistry.For<IUploadPersistence>().Use<UploadPersistence>();\n\t\t\tregistry.For<ISOAPAuthenticationTokenPersistence>().Use<SOAPAuthenticationTokenPersistence>();\n\t\t\tregistry.For<IResetPasswordRequestPersistence>().Use<ResetPasswordRequestPersistence>();\n\t\t\tregistry.For<IExternalReviewPersistence>().Use<ExternalReviewPersistence>();\n\t\t\tregistry.For<IObjectHistoryPersistence>().Use<ObjectHistoryPersistence>();\n\t\t\tregistry.For<IObjectHistoryBucketedPersistence>().Use<ObjectHistoryBucketedPersistence>();\n\t\t\tregistry.For<IObjectDestructionCertificatePersistence>().Use<ObjectDestructionCertificatePersistence>();\n\t\t\tregistry.For<ISftpPublicKeyPersistence>().Use<SftpPublicKeyPersistence>();\n\t\t\tregistry.For<IDocLauncherConfigPersistence>().Use<DocLauncherConfigPersistence>();\n\t\t\tregistry.For<IInstanceVariablePersistence>().Use<InstanceVariablePersistence>();\n\t\t\tregistry.For<IInstancePersistence>().Use<InstancePersistence>();\n\t\t\tregistry.For<IFormConfigurationPersistence>().Use<FormConfigurationPersistence>();\n\t\t\tregistry.For<ITrackedFieldPersistence>().Use<TrackedFieldPersistence>();\n\t\t\tregistry.For<ITrackedFieldStatusPersistence>().Use<TrackedFieldStatusPersistence>();\n\t\t\tregistry.For<IInstanceActivityPersistence>().Use<InstanceActivityPersistence>();\n\t\t\tregistry.For<IEmailPersistence>().Use<EmailPersistence>();\n\t\t\tregistry.For<IMergeDataPersistence>().Use<MergeDataPersistence>();\n\t\t\tregistry.For<ITwoFactorKeysPersistence>().Use<TwoFactorKeysPersistence>();\n\t\t\tregistry.For<IAccountSecuritySettingsPersistence>().Use<AccountSecuritySettingsPersistence>();\n\t\t\tregistry.For<IInboundFaxPersistence>().Use<InboundFaxPersistence>();\n\t\t\tregistry.For<ICustomMenuItemPersistence>().Use<CustomMenuItemPersistence>();\n\t\t\tregistry.For<ICustomToolbarPersistence>().Use<CustomToolbarPersistence>();\n\t\t\tregistry.For<IWebServicePersistence>().Use<WebServicePersistence>();\n\t\t\tregistry.For<IAnalyticsReportPersistence>().Use<AnalyticsReportPersistence>();\n\t\t\tregistry.For<IScopeEventPersistence>().Use<ScopeEventPersistence>();\n\t\t\tregistry.For<ISForceCredentialRepository>().Use<SForceCredentialRepository>();\n\t\t\tregistry.For<IReportConfigurationPersistence>().Use<ReportConfigurationPersistence>();\n\t\t\tregistry.For<IThrottlingPersistence>().Use<ThrottlingPersistence>();\n\t\t\tregistry.For<ICustomUserRolePersistence>().Use<CustomUserRolePersistence>();\n\t\t\tregistry.For<IUserConsentPersistence>().Use<UserConsentPersistence>();\n\t\t\tregistry.For<IFileMetaDataPersistence>().Use<FileMetaDataPersistence>();\n\t\t\tregistry.For<IRequestOriginRestrictionPersistence>().Use<RequestOriginRestrictionPersistence>();\n\t\t\tregistry.For<IPublicUserAuthorizationPersistence>().Use<PublicUserAuthorizationPersistence>();\n\t\t\tregistry.For<IPublicUserRepository>().Use<PublicUserRepository>();\n\t\t\tregistry.For<IDocumentSelectionPersistence>().Use<DocumentSelectionPersistence>();\n\t\t\tregistry.For<IDocumentGlyphsPersistence>().Use<DocumentGlyphsPersistence>();\n\t\t\tregistry.For<ISearchablePdfGlyphsPersistence>().Use<SearchablePdfGlyphsPersistence>();\n\t\t\tregistry.For<ILoginDelegatePersistence>().Use<LoginDelegatePersistence>();\n\t\t\tregistry.For<ILoginDelegationPersistence>().Use<LoginDelegationPersistence>();\n\t\t\tregistry.For<ISealExtractionsPersistence>().Use<SealExtractionsPersistence>();\n\t\t\tregistry.For<ISealScorecardsPersistence>().Use<SealScorecardsPersistence>();\n\t\t\tregistry.For<IAnalyzerDocumentPersistence>().Use<AnalyzerDocumentPersistence>();\n\t\t\tregistry.For<ITrackedContentPersistence>().Use<TrackedContentPersistence>();\n\t\t\tregistry.For<IAIDocumentBatchPersistence>().Use<AIDocumentBatchPersistence>();\n\t\t\tregistry.For<IAIDocumentTransactionPersistence>().Use<AIDocumentTransactionPersistence>();\n\t\t\tregistry.For<IAnalyticsReportCachePersistence>().Use<AnalyticsReportCachePersistence>();\n\t\t\tregistry.For<IExternalSecurityMapPersistence>().Use<ExternalSecurityMapPersistence>();\n\t\t\tregistry.For<ITranslationPersistence>().Use<TranslationPersistence>();\n\t\t\tregistry.For<IAgreementRelationshipPersistence>().Use<AgreementRelationshipPersistence>();\n\t\t\tregistry.For<IReportUserFiltersPersistence>().Use<ReportUserFiltersPersistence>();\n\t\t\tregistry.For<IReportUserConfigurationPersistence>().Use<ReportUserConfigurationPersistence>();\n\t\t\tregistry.For<IAIRulesEngineMappingPersistence>().Use<AIRulesEngineMappingPersistence>();\n\t\t\tregistry.For<IIntellegoExtractionsPersistence>().Use<IntellegoExtractionsPersistence>();\n\t\t\tregistry.For<IEventRegistrationPersistence>().Use<EventRegistrationPersistence>();\n\t\t\tregistry.For<ISfInvoiceMergeStatusPersistence>().Use<SfInvoiceMergeStatusPersistence>();\n\t\t\tregistry.For<IExternalReviewEmailAttachmentPersistence>().Use<ExternalReviewEmailAttachmentPersistence>();\n\t\t\tregistry.For<IExternalReviewApprovedEmailDomainPersistence>().Use<ExternalReviewApprovedEmailDomainPersistence>();\n\t\t\tregistry.For<ISecurityAccessRulePersistence>().Use<SecurityAccessRulePersistence>();\n\t\t\tregistry.For<IExternalReviewSafeToReplyUrlParamMapPersistence>().Use<ExternalReviewSafeToReplyUrlParamMapPersistence>();\n\t\t\tregistry.For<IExternalReviewSafeDomainGreyListPersistence>().Use<ExternalReviewSafeDomainGreyListPersistence>();\n\t\t\tregistry.For<IAccountConversionStatusPersistence>().Use<AccountConversionStatusPersistence>();\n\t\t\tregistry.For<IAccountConversionSnapshotPersistence>().Use<AccountConversionSnapshotPersistence>();\n\t\t\tregistry.For<IUserGroupMigrationStatusPersistence>().Use<UserGroupMigrationStatusPersistence>();\n\t\t\tregistry.For<IExternalReviewAttachmentRepository>().Use<ExternalReviewAttachmentRepository>();\n\t\t\tregistry.For<IWordToPdfConversionHelper>().Use<WordToPdfConversionHelper>();\n\t\t\tregistry.For<ISecurityMetadataPersistence>().Use<SecurityMetadataPersistence>();\n\t\t\tregistry.For<IInstanceActivityBookmarkPersistence>().Use<InstanceActivityBookmarkPersistence>();\n\t\t\tregistry.For<IAnalyticsQueryLogPersistence>().Use<AnalyticsQueryLogPersistence>();\n\t\t\tregistry.For<IAIDocumentStatisticsPersistence>().Use<AIDocumentStatisticsPersistence>();\n\t\t\tregistry.For<ISlidingWindowPersistence>().Use<SlidingWindowPersistence>();\n\t\t\tregistry.For<ISearchablePdfPersistence>().Use<SearchablePdfPersistence>();\n\t\t\tregistry.For<IDocumentCheckoutDataPersistence>().Use<DocumentCheckoutDataPersistence>();\n\t\t\tregistry.For<IAccountMigrationPersistence>().Use<AccountMigrationPersistence>();\n\t\t\tregistry.For<IIndexReconciliationPersistence>().Use<IndexReconciliationPersistence>();\n\t\t\tregistry.For<IDcfTelemetry>().Use<DcfTelemetry>();\n\t\t\tregistry.For<IIndexQueuePersistence>().Use<IndexQueuePersistence>();\n\t\t}\n\n\t\tprivate static void PopulateAIDependencies(Registry registry)\n\t\t{\n\t\t\tregistry.For<ISealClauseSyncService>().Use<SealClauseSyncService>();\n\t\t\tregistry.For<ISealExtractionsService>().Use<SealExtractionsService>();\n\t\t\tregistry.For<ISealDigitalAppsService>().Use<SealDigitalAppsService>();\n\t\t\tregistry.For<ISealUserViewsService>().Use<SealUserViewsService>();\n\t\t\tregistry.For<ISealScorecardService>().Use<SealScorecardService>();\n\t\t\tregistry.For<ISealGetDatabagService>().Use<SealGetDatabagService>();\n\t\t\tregistry.For<ISealContentTypeHelper>().Use<SealContentTypeHelper>();\n\t\t\tregistry.For<ISealExtractionsHelper>().Use<SealExtractionsHelper>();\n\t\t\tregistry.For<ISealCacheHelper>().Use<SealCacheHelper>();\n\t\t\tregistry.For<ISealRoutingService>().Use<SealRoutingService>();\n\t\t\tregistry.For<IAnalyzerInsightsIngestionService>().Use<AnalyzerInsightsIngestionService>();\n\t\t\tregistry.For<IInsightsMetadataAggregationService>().Use<InsightsMetadataAggregationService>();\n\t\t\tregistry.For<IAIDocumentUploadService>().Use<AIDocumentUploadService>();\n\t\t\tregistry.For<IGetAIExtractionsService>().Use<GetAIExtractionsService>();\n\t\t\tregistry.For<IStartAIBulkAnalysisTransactionsService>().Use<StartAIBulkAnalysisTransactionsService>();\n\t\t\tregistry.For<IAISIngestionService>().Use<AISIngestionService>();\n\t\t\tregistry.For<IAIAutofillPostProcessingService>().Use<AIAutofillPostProcessingService>();\n\t\t\tregistry.For<IAIDocumentTransactionProviderFactory>().Use<AIDocumentTransactionProviderFactory>();\n\t\t\tregistry.For<IAIDocumentTransactionRepository>().Use<AIDocumentTransactionRepository>();\n\t\t\tregistry.For<IAIRulesEngineMappingRepository>().Use<AIRulesEngineMappingRepository>();\n\t\t\tregistry.For<IAIRulesEngineRepository>().Use<AIRulesEngineRepository>();\n\t\t\tregistry.For<IAIRulesEngineApiService>().Use<AIRulesEngineApiService>();\n\t\t\tregistry.For<IConfigurationService>().Use<ConfigurationService>();\n\t\t\tregistry.For<ISmartAgreementExecutionService>().Use<SmartAgreementExecutionService>();\n\t\t\tregistry.For<IStagedMetadataApplicationService>().Use<StagedMetadataApplicationService>();\n\t\t\tregistry.ForConcreteType<SealAIDocumentTransactionProvider>();\n\t\t\tregistry.ForConcreteType<AISAIDocumentTransactionProvider>();\n\t\t\tregistry.ForConcreteType<AIStandardRulesConfigurationRepository>();\n\t\t\tregistry.ForConcreteType<AIRulesEngineRepository>();\n\t\t\tregistry.For<IRulesConfigurationFactory>().Use<RulesConfigurationFactory>();\n\t\t\tregistry.For<IRulesConfigurationHelper>().Use<RulesConfigurationHelper>();\n\t\t\tregistry.For<IRulesConfigurationRepository>().Use<RulesConfigurationRepository>();\n\t\t\tregistry.For<IStandardRulesConfigurationHelper>().Use<StandardRulesConfigurationHelper>();\n\t\t\tregistry.For<IStagedMetadataReviewPersistence>().Use<StagedMetadataReviewPersistence>();\n\t\t\tregistry.For<IBatchHelper>().Use<BatchHelper>();\n\t\t\tregistry.For<IAgreementFieldService>().Use<AgreementFieldService>();\n\t\t\tregistry.For<ITransactionCheckStatusService>().Use<TransactionCheckStatusService>();\n\t\t\tregistry.For<IStagedMetadataRepository>().Use<StagedMetadataRepository>();\n\t\t\tregistry.For<IAIStagedMetadataSyncService>().Use<AIStagedMetadataSyncService>();\n\t\t\tregistry.For<IBatchCleanupService>().Use<BatchCleanupService>();\n\t\t\tregistry.For<IAIMetadataHelper>().Use<AIMetadataHelper>();\n\t\t\tregistry.For<IPartyDocumentUtility>().Use<PartyDocumentUtility>();\n\t\t\tregistry.For<ICacheHelper>().Use<CacheHelper>();\n\t\t\tregistry.For<IAutofillProcessOrchestratorHelper>().Use<AutofillProcessOrchestratorHelper>();\n\t\t\tregistry.For<IAIFeedbackService>().Use<AIFeedbackService>();\n\t\t\tregistry.For<IAIStatusNotificationService>().Use<AIStatusNotificationService>();\n\t\t\tregistry.For<IAIStatusNotificationTaskHelper>().Use<AIStatusNotificationTaskHelper>();\n\t\t\tregistry.For<IBatchReportService>().Use<BatchReportService>();\n\t\t\tregistry.For<IAIXmlHelper>().Use<AIXmlHelper>();\n\t\t\tregistry.For<IAIExtractionValueHelper>().Use<AIExtractionValueHelper>();\n\t\t\tregistry.For<IADMInsightsClient>().Use<ADMInsightsClient>();\n\t\t\tregistry.For<IADMInsightsRepository>().Use<ADMInsightsRepository>();\n\t\t\tregistry.For<IAISuggestionAttributeMatcher>().Use<AISuggestionStandardAttributeMatcher>();\n\t\t\tregistry.For<ISmartAgreementFilterSortPageHelper>().Use<SmartAgreementFilterSortPageHelper>();\n\t\t\tregistry.For<IAISettingsHelper>().Use<AISettingsHelper>();\n\t\t\tPopulateAISDependencies(registry);\n\t\t\tPopulateAPRDependencies(registry);\n\t\t\tPopulateURDependencies(registry);\n\t\t\tPopulateDataplatformDependencies(registry);\n\t\t\tregistry.For<IInitiateAiTransactionFactory>().Singleton().Use<InitiateAiTransactionFactory>();\n\t\t\tregistry.ForConcreteType<AISInitiateTransactionService>();\n\t\t\tregistry.ForConcreteType<SealInitiateTransactionService>();\n\t\t\tregistry.For<IAiModelManagement>().Singleton().Use<AiModelManagement>();\n\t\t\tregistry.For<IAgreementSummaryService>().Use<AgreementSummaryService>();\n\t\t\tregistry.For<IAIAgreementSummaryExtractionService>().Use<AIAgreementSummaryExtractionService>();\n\t\t\tregistry.For<IAIDocumentModelProvider>().Use<SealAIDocumentTransactionProvider>().Named(nameof(SealAIDocumentTransactionProvider));\n\t\t\tregistry.For<IAIDocumentModelProvider>().Use<AISAIDocumentTransactionProvider>().Named(nameof(AISAIDocumentTransactionProvider));\n\t\t\tregistry.For<IAIDocumentModelProvider>().Use<APRAIDocumentTransactionProvider>().Named(nameof(APRAIDocumentTransactionProvider));\n\t\t\tregistry.For<IAIDocumentModelProviderFactory>().Use(context =>\n\t\t\t\tnew AIDocumentModelProviderFactory(\n\t\t\t\t\t() => context.GetInstance<IAIDocumentModelProvider>(nameof(SealAIDocumentTransactionProvider)),\n\t\t\t\t\t() => context.GetInstance<IAIDocumentModelProvider>(nameof(AISAIDocumentTransactionProvider)),\n\t\t\t\t\t() => context.GetInstance<IAIDocumentModelProvider>(nameof(APRAIDocumentTransactionProvider))));\n\t\t\tregistry.For<ILexionFeatureFlags>().Singleton().Use<LexionFeatureFlagsWrapper>();\n\t\t\tregistry.For<IAsposeMetadataService>().Use<AsposeMetadataService>();\n\t\t\tregistry.For<IDSAccountSettingRepository>().Use<DSAccountSettingRepository>();\n\t\t\tregistry.For<ISelectionRuleFactory>().Use<SelectionRuleFactory>();\n\t\t}\n\n\t\tprivate static void PopulateAISDependencies(Registry registry)\n\t\t{\n\t\t\tregistry.For<IAISIngestionService>().Use<AISIngestionService>();\n\t\t\tregistry.For<IAISApiFactory>().Use<AISApiFactory>();\n\t\t\tregistry.For<IAIMockedDataHelper>().Use<AisMockedDataHelper>();\n\t\t\tregistry.For<IAISFeedbackProcessor>().Use<AISAIDocumentTransactionProvider>();\n\t\t\tregistry.AddDataReviewDependencies();\n\t\t}\n\n\t\tprivate static void PopulateURDependencies(Registry registry)\n\t\t{\n\t\t\tregistry.For<IDocManagementServiceClient>().Use<DocManagementServiceClient>();\n\t\t\tregistry.For<IUnifiedRepositoryIngestionService>().Use<UnifiedRepositoryIngestionService>();\n\t\t\tregistry.For<IUnifiedRepositoryAttributeSyncService>().Use<UnifiedRepositoryAttributeSyncService>();\n\t\t\tregistry.For<IUnifiedRepositoryHistorySyncService>().Use<UnifiedRepositoryHistorySyncService>();\n\t\t\tregistry.For<IURIngestionHelper>().Use<URIngestionHelper>();\n\t\t\tregistry.For<IUnifiedRepositoryIngestionStatusRepository>().Use<FileMetaDataRepository>();\n\t\t\tregistry.For<IUnifiedRepositoryDocumentHistoryService>().Use<UnifiedRepositoryDocumentHistoryService>();\n\t\t\tregistry.For<IAuditServiceClient>().Use<AuditServiceClientWrapper>();\n\t\t\tregistry.For<IAuditServiceIngestionRepository>().Use<AuditServiceIngestionRepository>();\n\t\t\tregistry.For<IGrpcHelper>().Use<GrpcHelper>();\n\t\t\tregistry.For<IUnifiedRepositoryPermissionService>().Use<UnifiedRepositoryPermissionService>();\n\t\t\tregistry.For<IURPermissionHelper>().Use<URPermissionHelper>();\n\t\t\tregistry.For<IUnifiedRepositoryStandardAttributeHelper>().Use<UnifiedRepositoryStandardAttributeHelper>();\n\t\t\tregistry.For<IEmsRequestHelper>().Use<EmsRequestHelper>();\n\t\t\tregistry.For<IDotRepository>().Use<DotRepository>();\n\t\t\tregistry.For<IDotBridgeHelper>().Use<DotBridgeHelper>();\n\t\t\tregistry.For<IDotService>().Use<DotService>();\n\t\t\tregistry.For<IUnifiedRepositoryHistoricalDocumentsIngestionService>().Use<UnifiedRepositoryHistoricalDocumentsIngestionService>();\n\t\t\tregistry.For<IHistoricalDocumentsIngestionToIamService>().Use<HistoricalDocumentsIngestionToIamService>();\n\t\t\tregistry.For<IDMSMigrationService>().Use<DMSMigrationService>();\n\t\t\tregistry.For<IDMSMigrationHelper>().Use<DMSMigrationHelper>();\n\t\t\tregistry.For<IDeepCopyMigrationService>().Use<DeepCopyMigrationService>();\n\t\t\tregistry.For<IUnifiedRepositoryDocumentMoveService>().Use<UnifiedRepositoryDocumentMoveService>();\n\t\t\tregistry.For<IUnifiedRepositoryFolderMoveService>().Use<UnifiedRepositoryFolderMoveService>();\n\t\t\tregistry.For<IDMSRuntimeSyncService>().Use<DMSRuntimeSyncService>();\n\t\t\tregistry.For<IDMSRuntimeSyncHelper>().Use<DMSRuntimeSyncHelper>();\n\t\t\tregistry.For<IURIngestionRepository>().Use<URIngestionRepository>();\n\t\t\tregistry.For<IIngestionServiceClientWrapper>().Use<IngestionServiceClientWrapper>();\n\t\t}\n\n\t\tprivate static void PopulateOfficeOnlineDependencies(Registry registry)\n\t\t{\n\t\t\tregistry.For<IWopiDiscoveryService>().Use<WopiDiscoveryService>();\n\t\t\tregistry.For<IOfficeWebAppsLockRepository>().Use<OfficeWebAppsLockRepository>();\n\t\t\tregistry.For<IOfficeWebAppsHistoryRepository>().Use<OfficeWebAppsHistoryRepository>();\n\t\t\tregistry.For<IOfficeWebAppsLockPersistence>().Use<OfficeWebAppsLockPersistence>();\n\t\t\tregistry.For<IOfficeWebAppsHistoryPersistence>().Use<OfficeWebAppsHistoryPersistence>();\n\t\t}\n\n\t\tprivate static void PopulateAPRDependencies(Registry registry)\n\t\t{\n\t\t\tregistry.For<IAPRAIIngestionService>().Use<APRAIIngestionService>();\n\t\t\tregistry.For<IAPRExtractionsRepository>().Use<APRExtractionsRepository>();\n\t\t\tregistry.For<IAPRExtractionsPersistence>().Use<APRExtractionsPersistence>();\n\t\t\tregistry.For<IAPRRepository>().Use<APRRepository>();\n\t\t\tregistry.For<IAPRService>().Use<APRService>();\n\t\t\tregistry.For<IAttributeManagementService>().Use<AttributeManagementService>();\n\t\t\tregistry.ForConcreteType<APRAIDocumentTransactionProvider>();\n\t\t\tregistry.For<IAttributePanelService>().Use<AttributePanelService>();\n\t\t\tregistry.For<IAPRMockedDataHelper>().Use<APRMockedDataHelper>();\n\t\t\tregistry.For<IAPRBridgeHelper>().Use<APRBridgeHelper>();\n\t\t\tregistry.For<IAPRExtractionsRepositoryFactory>().Use<APRExtractionsRepositoryFactory>();\n\t\t\tregistry.For<IAgreementSummaryRepositoryFactory>().Use<AgreementSummaryRepositoryFactory>();\n\t\t\tregistry.For<IAIDocumentStatisticsRepository>().Use<AIDocumentStatisticsRepository>();\n\t\t}\n\n\t\tprivate static void PopulateDataplatformDependencies(Registry registry)\n\t\t{\n\t\t\tregistry.For<IDataPlacementClientService>().Use<DataPlacementClientService>();\n\t\t\tregistry.For<IDataPlacementRepository>().Use<DataPlacementRepository>();\n\t\t\tregistry.For<IMsfShardIdExternalDataMapHelper>().Use<ExternalDataMapRepository>();\n\t\t}\n\n\t\tprivate static void PopulateOneConfigRegistry(Registry registry, string oneConfigPath)\n\t\t{\n\t\t\tvar executableDirectory = oneConfigPath ?? string.Empty;\n\t\t\tvar accessTokenManagerConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"Repository\", \"ProvisioningRepository\", \"AccessTokenManagerConfig.ini\");\n\n\t\t\tif (ConfigWrapper.UseOneConfig)\n\t\t\t{\n\t\t\t\tregistry.AddSingletonConfigType<IAccessTokenManagerConfig>(accessTokenManagerConfigPath);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tregistry.For<IWatchedSingletonConfig<IAccessTokenManagerConfig>>().Use<AccessTokenManagerLegacyConfig>().Singleton();\n\t\t\t}\n\n\t\t\tvar dacDocGenApiConfigConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"DacDocGenApiConfig.ini\");\n\t\t\tregistry.AddSingletonConfigType<IDacDocGenApiConfig>(dacDocGenApiConfigConfigPath);\n\t\t\tvar xmlLocalizationPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"XmlLocalizationConfig.ini\");\n\t\t\tregistry.AddScopedConfigType<IXmlLocalizationConfig>(xmlLocalizationPath);\n\t\t\tvar asposeConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"AsposeConfig.ini\");\n\t\t\tregistry.AddScopedConfigType<IAsposeConfig>(asposeConfigPath);\n\t\t\tvar documentCreationConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"DocumentCreationFeatureFlagsConfig.ini\");\n\t\t\tregistry.AddScopedConfigType<IDocumentCreationServiceFeaturesConfig>(documentCreationConfigPath);\n\t\t\tvar docServicesConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"DocServicesConfig.ini\");\n\t\t\tregistry.AddScopedConfigType<IDocServicesConfig>(docServicesConfigPath);\n\t\t\tvar folderPersistenceConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"Persistence\", \"Model\", \"FolderPersistenceConfig.ini\");\n\t\t\tregistry.AddScopedConfigType<IFolderPersistenceConfig>(folderPersistenceConfigPath);\n\n\t\t\tvar workflowConfigsPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"Repository\", \"Workflow\", \"WorkflowConfigs.ini\");\n\t\t\tregistry.AddSingletonConfigType<IWorkflowV1ClientInvariantConfig>(workflowConfigsPath);\n\t\t\tregistry.AddScopedConfigType<IWorkflowRepositoryConfig>(workflowConfigsPath);\n\t\t\tregistry.AddScopedConfigType<IInstanceHistoryRepositoryConfig>(workflowConfigsPath);\n\t\t\tregistry.AddSingletonConfigType<IWorkflowConversionInvariantConfig>(workflowConfigsPath);\n\n\t\t\tregistry.AddScopedConfigType<IReportingFeatureFlagsConfig>(Path.Combine(executableDirectory, \"Config\", \"Files\", \"ReportingFeatureFlagsConfig.ini\"));\n\n\t\t\tregistry.AddScopedConfigType<ITrackedContentExtractionsFeatureFlagConfig>(Path.Combine(executableDirectory, \"Config\", \"Files\", \"TrackedContentExtractionsFeatureFlagConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IContentReplacementFeatureFlagConfig>(Path.Combine(executableDirectory, \"Config\", \"Files\", \"ContentReplacementFeatureFlagConfig.ini\"));\n\n\t\t\tregistry.AddScopedConfigType<INavigatorAIInCLMFeatureFlagConfig>(Path.Combine(executableDirectory, \"Config\", \"Files\", \"NavigatorAIInCLMFeatureFlagConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IGrpcClientFactoryFeatureFlagsConfig>(Path.Combine(executableDirectory, \"Config\", \"Files\", \"GrpcClientFactoryFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IADMStoreAgreementFeatureFlags>(Path.Combine(executableDirectory, \"Config\", \"Files\", \"ADMStoreAgreementFeatureFlags.ini\"));\n\n\t\t\t// register the legacy configuration for DSS feature flags migrating to OneConfig\n\t\t\tstring DssConfigPath(string filename) => Path.Combine(executableDirectory, \"Config\", \"Files\", \"LegacyDss\", filename);\n\n\t\t\tregistry.AddScopedConfigType<IAccountConversionFeatureFlagsConfig>(DssConfigPath(\"AccountConversionFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAccountProvisioningFeatureFlagsConfig>(DssConfigPath(\"AccountProvisioningFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAgreementAnalysisFeatureFlagsConfig>(DssConfigPath(\"AgreementAnalysisFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAISIntegrationFeatureFlagsConfig>(DssConfigPath(\"AISIntegrationFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAPIContentFeatureFlagsConfig>(DssConfigPath(\"APIContentFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAPIObjectFeatureFlagsConfig>(DssConfigPath(\"APIObjectFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAribaFeatureFlagsConfig>(DssConfigPath(\"AribaFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAshxToControllerMigrationFeatureFlagsConfig>(DssConfigPath(\"AshxToControllerMigrationFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAtlasFeatureFlagsConfig>(DssConfigPath(\"AtlasFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAtlasHybridStorageFeatureFlagsConfig>(DssConfigPath(\"AtlasHybridStorageFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IAuthenticationFeatureFlagsConfig>(DssConfigPath(\"AuthenticationFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ICollaborationCommentsFeatureFlagsConfig>(DssConfigPath(\"CollaborationCommentsFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ICookiesFeatureFlagsConfig>(DssConfigPath(\"CookiesFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDashboardFeatureFlagsConfig>(DssConfigPath(\"DashboardFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDataReconciliationFeatureFlagsConfig>(DssConfigPath(\"DataReconciliationFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentActionsFeatureFlagsConfig>(DssConfigPath(\"DocumentActionsFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentAttributesFeatureFlagsConfig>(DssConfigPath(\"DocumentAttributesFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentCompareFeatureFlagsConfig>(DssConfigPath(\"DocumentCompareFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentCreationFeatureFlagsConfig>(DssConfigPath(\"DocumentCreationFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentIngestionFeatureFlagsConfig>(DssConfigPath(\"DocumentIngestionFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentLauncherFeatureFlagsConfig>(DssConfigPath(\"DocumentLauncherFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentPreviewFeatureFlagsConfig>(DssConfigPath(\"DocumentPreviewFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IDocumentReviewFeatureFlagsConfig>(DssConfigPath(\"DocumentReviewFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IEformsFeatureFlagsConfig>(DssConfigPath(\"EformsFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IElasticFeatureFlagsConfig>(DssConfigPath(\"ElasticFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IABACFeatureFlagsConfig>(DssConfigPath(\"ABACFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IEmailFeatureFlagsConfig>(DssConfigPath(\"EmailFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IEnforceFileSizeLimitsFeatureFlagsConfig>(DssConfigPath(\"EnforceFileSizeLimitsFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IESignatureFeatureFlagsConfig>(DssConfigPath(\"ESignatureFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IEtlFeatureFlagsConfig>(DssConfigPath(\"EtlFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IEventDispatcherFeatureFlagsConfig>(DssConfigPath(\"EventDispatcherFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IEventSubscriberFeatureFlagsConfig>(DssConfigPath(\"EventSubscriberFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IExternalReviewFeatureFlagsConfig>(DssConfigPath(\"ExternalReviewFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IExtractFeatureFlagsConfig>(DssConfigPath(\"ExtractFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IGlobalHeaderFeatureFlagsConfig>(DssConfigPath(\"GlobalHeaderFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IGoogleFeatureFlagsConfig>(DssConfigPath(\"GoogleFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IJavelinFeatureFlagsConfig>(DssConfigPath(\"JavelinFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ILexionFeatureFlagsConfig>(DssConfigPath(\"LexionFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ILogicalFileSystemFeatureFlagsConfig>(DssConfigPath(\"LogicalFileSystemFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IMergeEngineFeatureFlagsConfig>(DssConfigPath(\"MergeEngineFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IModernSearchFeatureFlagsConfig>(DssConfigPath(\"ModernSearchFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IMonitoringFeatureFlagsConfig>(DssConfigPath(\"MonitoringFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IPartiesFeatureFlagsConfig>(DssConfigPath(\"PartiesFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IRebrandFeatureFlagsConfig>(DssConfigPath(\"RebrandFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IRepositoryFeatureFlagsConfig>(DssConfigPath(\"RepositoryFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ISamlResponseSignatureFeatureFlagsConfig>(DssConfigPath(\"SamlResponseSignatureFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ISealIntegrationFeatureFlagsConfig>(DssConfigPath(\"SealIntegrationFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ISForceCoreFeatureFlagsConfig>(DssConfigPath(\"SForceCoreFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ISlackNotificationsFeatureFlagsConfig>(DssConfigPath(\"SlackNotificationsFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ISmartAgreementsFeatureFlagsConfig>(DssConfigPath(\"SmartAgreementsFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ISyncServiceFeatureFlagsConfig>(DssConfigPath(\"SyncServiceFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ITasksManagementFeatureFlagsConfig>(DssConfigPath(\"TasksManagementFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<ITwoFactorRepositoryFeatureFlagsConfig>(DssConfigPath(\"TwoFactorRepositoryFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IURIngestionFeatureFlagsConfig>(DssConfigPath(\"URIngestionFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IWebShareFeatureFlagsConfig>(DssConfigPath(\"WebShareFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IWorkflowActivitiesFeatureFlagsConfig>(DssConfigPath(\"WorkflowActivitiesFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IWorkflowDesignApiFeatureFlagsConfig>(DssConfigPath(\"WorkflowDesignApiFeatureFlagsConfig.ini\"));\n\t\t\tregistry.AddScopedConfigType<IWorkflowFeatureFlagsConfig>(DssConfigPath(\"WorkflowFeatureFlagsConfig.ini\"));\n\t\t}\n\n\t\tprivate static void PopulateWorkflowOneConfigRegistry(Registry registry, string oneConfigPath)\n\t\t{\n\t\t\tvar executableDirectory = oneConfigPath ?? string.Empty;\n\t\t\tvar workflowConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"WorkflowConfig.ini\");\n\n\t\t\tregistry.RegisterWorkflowConfig(executableDirectory);\n\n\t\t\tif (WorkflowUtility.UseOneConfig)\n\t\t\t{\n\t\t\t\tregistry.AddSingletonConfigType<IWorkflowConfig>(workflowConfigPath);\n\n\t\t\t\tvar executionApiConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"ExecutionApiClientConfig.ini\");\n\t\t\t\tregistry.AddSingletonConfigType<IExecutionApiClientConfig>(executionApiConfigPath);\n\n\t\t\t\tvar expressionServiceApiConfigPath = Path.Combine(executableDirectory, \"Config\", \"Files\", \"ExpressionServiceApiConfig.ini\");\n\t\t\t\tregistry.AddSingletonConfigType<IExpressionServiceApiConfig>(expressionServiceApiConfigPath);\n\n\t\t\t\t// Add IExpressionServiceApiConfig to ScopedConfig for backward compatibility with FeatureFlags\n\t\t\t\tregistry.AddScopedConfigType<IExpressionServiceApiConfig>(expressionServiceApiConfigPath);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tregistry.For<IWatchedSingletonConfig<IWorkflowConfig>>().Use<WorkflowLegacyConfig>().Singleton();\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "relevance_score": 75,
            "reasoning": "Matches 1 keywords: OpenTelemetry"
          }
        ]
      },
      "error": null,
      "execution_time": 0.8108720779418945,
      "cache_hit": false
    },
    "validate_solution": {
      "stage_name": "validate_solution",
      "status": "StageStatus.COMPLETED",
      "result": {
        "overall_score": 0.7999999999999999,
        "test_results": [
          {
            "test_name": "Intent Required Fields",
            "test_type": "TestType.UNIT",
            "passed": true,
            "score": 1.0,
            "details": {
              "missing_fields": []
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.001
          },
          {
            "test_name": "Telemetry Operation Validity",
            "test_type": "TestType.UNIT",
            "passed": true,
            "score": 1.0,
            "details": {
              "type": "span",
              "action": "ADD_ATTRIBUTES"
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.001
          },
          {
            "test_name": "Semantic Description Quality",
            "test_type": "TestType.UNIT",
            "passed": true,
            "score": 1.0,
            "details": {
              "description_length": 127,
              "quality_score": 1.0
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.002
          },
          {
            "test_name": "Patch Format Validity",
            "test_type": "TestType.UNIT",
            "passed": false,
            "score": 0.0,
            "details": {
              "patch_length": 58
            },
            "errors": [
              "Invalid unified diff format"
            ],
            "warnings": [],
            "execution_time": 0.001
          },
          {
            "test_name": "Code Style Compliance",
            "test_type": "TestType.UNIT",
            "passed": true,
            "score": 1.0,
            "details": {
              "style_score": 1.0
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.003
          },
          {
            "test_name": "Change Scope Appropriateness",
            "test_type": "TestType.UNIT",
            "passed": true,
            "score": 0.7,
            "details": {
              "scope_score": 0.7
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.002
          },
          {
            "test_name": "Code Compilation",
            "test_type": "TestType.INTEGRATION",
            "passed": false,
            "score": 0.0,
            "details": {
              "files_count": 10
            },
            "errors": [
              "Mismatched parentheses in AttributesController.cs"
            ],
            "warnings": [],
            "execution_time": 2.0
          },
          {
            "test_name": "OpenTelemetry Attribute Naming",
            "test_type": "TestType.COMPLIANCE",
            "passed": false,
            "score": 0.5,
            "details": {
              "attributes_count": 2
            },
            "errors": [
              "Non-compliant attribute names found"
            ],
            "warnings": [],
            "execution_time": 0.001
          },
          {
            "test_name": "Instrumentation Pattern Compliance",
            "test_type": "TestType.COMPLIANCE",
            "passed": true,
            "score": 1.0,
            "details": {
              "pattern_score": 1.0
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.002
          },
          {
            "test_name": "Resource Usage Analysis",
            "test_type": "TestType.PERFORMANCE",
            "passed": true,
            "score": 1.0,
            "details": {
              "score": 1.0,
              "errors": [],
              "warnings": []
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.003
          },
          {
            "test_name": "No Hardcoded Secrets",
            "test_type": "TestType.COMPLIANCE",
            "passed": true,
            "score": 1.0,
            "details": {},
            "errors": [],
            "warnings": [],
            "execution_time": 0.001
          },
          {
            "test_name": "Input Validation",
            "test_type": "TestType.COMPLIANCE",
            "passed": true,
            "score": 1.0,
            "details": {
              "validation_score": 1.0
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.002
          },
          {
            "test_name": "Performance Impact Analysis",
            "test_type": "TestType.PERFORMANCE",
            "passed": true,
            "score": 1.0,
            "details": {
              "risk_level": 1,
              "errors": [],
              "warnings": []
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.005
          },
          {
            "test_name": "Integration Compatibility",
            "test_type": "TestType.INTEGRATION",
            "passed": true,
            "score": 1.0,
            "details": {
              "breaking_changes": []
            },
            "errors": [],
            "warnings": [],
            "execution_time": 0.01
          }
        ],
        "recommendations": [
          "Address failing tests before deployment",
          "Improve implementation for low-scoring areas",
          "Validate telemetry data collection in staging environment"
        ],
        "risk_assessment": "HIGH",
        "compliance_status": {
          "opentelemetry": false,
          "security": true,
          "style": true
        }
      },
      "error": null,
      "execution_time": 0.006255149841308594,
      "cache_hit": false
    }
  }
}