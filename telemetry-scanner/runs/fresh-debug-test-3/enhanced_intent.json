{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION tags to existing HTTP request spans in the CLM web application.",
    "search_keywords": [
      "SetTag",
      "AddTag",
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "ActivitySource",
      "middleware"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": "http-server-span",
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"]"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 3,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "action": "locate_configuration",
        "description": "Identify where HTTP-server Activities are created or enriched in clm-web.",
        "commands_or_checks": [
          "grep -R \"ActivitySource\" src/clm-web/",
          "grep -R \"SetTag(\" src/clm-web/",
          "Look in Startup.cs / Program.cs / WebApplicationBuilder for AddOpenTelemetry()."
        ],
        "expected_files": [
          "Startup.cs or Program.cs",
          "Telemetry/TracingExtensions.cs",
          "Middleware/*Telemetry*.cs"
        ],
        "output": "Exact file & method names that own Activity enrichment",
        "validation_criteria": "At least one location found where Activity.SetTag is already called for incoming HTTP requests"
      },
      {
        "order": 2,
        "action": "design_middleware_or_enricher",
        "description": "Decide whether to extend existing OTel enrichment delegate or create new ASP.NET Core middleware. The code must run:\n1. After the request headers are available (Referer header exists)\n2. Before Activity.Stop() is executed so that tags are recorded on the same span\n3. After the response headers have been set (to capture Location for 3xx).",
        "dependencies": [
          1
        ],
        "output": "Selected pattern (enrichment delegate vs. custom middleware) with code skeleton",
        "validation_criteria": "Chosen approach can read both request and response objects and has access to Activity.Current"
      },
      {
        "order": 3,
        "action": "implement_changes",
        "description": "Add code to capture both attributes.\nPseudocode:\n```\npublic class RedirectEnrichmentMiddleware {\n   private readonly RequestDelegate _next;\n   public RedirectEnrichmentMiddleware(RequestDelegate next) => _next = next;\n\n   public async Task InvokeAsync(HttpContext ctx) {\n       var activity = Activity.Current;\n       if (activity != null) {\n           var referer = ctx.Request.Headers[\"Referer\"].FirstOrDefault();\n           if (!string.IsNullOrEmpty(referer))\n               activity.SetTag(\"HTTP_REFERER\", referer);\n       }\n\n       await _next(ctx);   // Continue down the pipeline\n\n       if (activity != null) {\n           var status = ctx.Response.StatusCode;\n           if (status >= 300 && status < 400 && ctx.Response.Headers.TryGetValue(\"Location\", out var loc)) {\n               var locationValue = loc.ToString();\n               if (!string.IsNullOrEmpty(locationValue))\n                   activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue);\n           }\n       }\n   }\n}\n```\nWire-up in Startup/Program:\n```\napp.UseMiddleware<RedirectEnrichmentMiddleware>();\n```",
        "dependencies": [
          2
        ],
        "files_updated": [
          "Middleware/RedirectEnrichmentMiddleware.cs",
          "Startup.cs or Program.cs"
        ],
        "risk_mitigation": [
          "Check Activity.Current for null to avoid NullReference",
          "Do not allocate strings when headers are missing",
          "Use TryGetValue on headers to avoid exception"
        ],
        "validation_criteria": "Code builds and compiles; no additional allocations in hot path when headers are missing"
      },
      {
        "order": 4,
        "action": "unit_and_integration_tests",
        "description": "Create/extend tests using TestServer to verify that:\n1. A request with a Referer header produces HTTP_REFERER tag.\n2. A 302 response sets HTTP_RESPONSE_REDIRECT_LOCATION tag.",
        "dependencies": [
          3
        ],
        "files_updated": [
          "tests/RedirectEnrichmentMiddlewareTests.cs"
        ],
        "validation_criteria": "All new tests pass locally and in CI"
      },
      {
        "order": 5,
        "action": "manual_validation_in_dev_env",
        "description": "Run clm-web locally with Demo configuration, invoke affected pages, and inspect Activity export (console or Zipkin) to confirm new tags.",
        "dependencies": [
          3
        ],
        "validation_criteria": "HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION visible in exported spans"
      },
      {
        "order": 6,
        "action": "deploy_to_demo",
        "description": "Promote build to Demo environment.",
        "dependencies": [
          5
        ],
        "post_deploy_validation": [
          "Execute Kusto query provided in ticket",
          "Confirm new columns populated for /clm/Documents/BrowseDocuments.aspx and SSOEndpoint.ashx requests"
        ],
        "validation_criteria": "Query returns >=1 row with non-empty HTTP_REFERER and/or HTTP_RESPONSE_REDIRECT_LOCATION"
      },
      {
        "order": 7,
        "action": "performance_and_security_review",
        "description": "1. Run load test on Demo to compare latency & memory before/after.\n2. Confirm Referer header does not leak sensitive PII; if so, add redaction.",
        "dependencies": [
          6
        ],
        "validation_criteria": "No >1% latency regression at P95; security review signed off"
      },
      {
        "order": 8,
        "action": "production_rollout",
        "description": "Release to Prod using standard blue/green deployment after Demo sign-off.",
        "dependencies": [
          7
        ],
        "validation_criteria": "Same Kusto query in Prod shows attributes without elevated error rate"
      },
      {
        "order": 9,
        "action": "documentation_and_knowledge_share",
        "description": "Update internal wiki/OpenTelemetry guidelines with new attribute names and sample queries. Notify #clm-observability Slack channel.",
        "dependencies": [
          8
        ],
        "validation_criteria": "Docs updated; announcement posted"
      }
    ],
    "contextual_hints": [
      "Locating or creating the correct ASP.NET Core middleware that owns the HTTP server Activity so tags are attached to the right span",
      "Ensuring the response Location header is available (for 302/3xx) before Activity.Stop() is called in automatic instrumentation"
    ]
  }
}