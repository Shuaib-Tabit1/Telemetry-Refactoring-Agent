[
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['ActivitySource', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: ActivitySource', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', 'Pattern: Metrics', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['_serviceInstrumentation?.ActivitySource\\n\\t\\t\\t?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.DetectTypeName)', '?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.DetectTypeName)\\n\\t\\t\\t?.SetQueueTaskTags(Task)', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.DetectTypeName)\\n\\t\\t\\t?.SetQueueTaskTags(Task)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);', '?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.DetectTypeName)\\n\\t\\t\\t?.SetQueueTaskTags(Task)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);\\n}\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['ActivitySource', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: ActivitySource', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', 'Pattern: Metrics', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['_serviceInstrumentation?.ActivitySource\\n\\t\\t\\t?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.VideoInfoName)', '?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.VideoInfoName)\\n\\t\\t\\t?.SetQueueTaskTags(Task)', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.VideoInfoName)\\n\\t\\t\\t?.SetQueueTaskTags(Task)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);', '?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.VideoInfoName)\\n\\t\\t\\t?.SetQueueTaskTags(Task)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);\\n}\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)\", matching_patterns=['SetTag'], context_snippets=['Logger.InfoNoPII(Task.LastErrorMessage);\\n\\t\\t\\t\\t\\tresult.TaskResult = TaskResult.Success;\\n\\t\\t\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, mimeType);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch (Exception e)\\n\\t\\t\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (2 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics; Contains method call: SetTag (2 times); Matches 4 keywords: HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION, SetTag, OpenTelemetry; Matches 4 keywords: HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION, SetTag, OpenTelemetry\", matching_patterns=['Import: OpenTelemetry.Trace', 'Import: DocuSign.CLM.Monitoring', 'Import: OpenTelemetry.Metrics', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: UseOpenTelemetry', 'Pattern: Monitoring', 'HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION', 'Pattern: Metrics', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['{\\n\\t\\t\\t\\t\\t\\t\\toptions.EnrichWithHttpResponse = (Activity activity, HttpResponse response) =>\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tactivity.SetTag(OtelSemanticConventions.AttributeHttpResponseRedirectUrl, response?.Headers[\"Location\"]);\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t\\toptions.EnrichWithHttpRequest = (Activity activity, HttpRequest request) =>\\n\\t\\t\\t\\t\\t\\t\\t{', '};\\n\\t\\t\\t\\t\\t\\t\\toptions.EnrichWithHttpRequest = (Activity activity, HttpRequest request) =>\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tactivity.SetTag(OtelSemanticConventions.AttributeHttpReferer, request?.Headers[\"Referer\"]);\\n\\t\\t\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t\\t\\t})\\n\\t\\t\\t\\t\\t.AddSource(typeof(RedisSessionStateProviderWrapper).FullName);'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (3 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['Import: DocuSign.CLM.Monitoring', 'ActivitySource', 'Import: var activity = StartActivity(task, corrToken)', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: ActivitySource', 'Pattern: Monitoring', 'Import: DocuSign.Monitoring', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['ActivityKind.Consumer,\\n\\t\\t\\t\\t\\tparentContext: correlationToken.ToActivityContext())\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\\n\\t\\t\\t\\t?.SetQueueTaskTags(task);', 'parentContext: correlationToken.ToActivityContext())\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\\n\\t\\t\\t\\t?.SetQueueTaskTags(task);\\n\\t}', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\\n\\t\\t\\t\\t?.SetQueueTaskTags(task);\\n\\t}\\n}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (9 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var span = StartActivity()\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid), Import: var span = StartActivity()\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid); Contains method call: SetTag (9 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['ActivitySource', 'Import: var span = StartActivity()\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid)', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Import: var span = StartActivity()\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid)', 'Pattern: ActivitySource', 'Import: var span = StartActivity()', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['LastProcessDate = DateTime.UtcNow;\\n\\n\\t\\t\\tusing var span = StartActivity()\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid);\\n\\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\\n            if (activity == null) throw new ApplicationException(string.Format(\"Cannot find expected activity {0} in workflow map for instanceUid {1}\", instanceActivity.ActivityTypeName, Uid));', 'LastProcessDate = DateTime.UtcNow;\\n\\n\\t\\t\\tusing var span = StartActivity()\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid);\\n\\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\\n            if (activity == null) return;', 'private Activity StartActivity([CallerMemberName] string name = \"\") => ServiceInstrumentation?.ActivitySource\\n\\t\\t\\t?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)', '?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)', '.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);', '.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);', '.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\\n\\n\\t\\tprivate void CheckAndHandleInstanceStateChanges()', '.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\\n\\n\\t\\tprivate void CheckAndHandleInstanceStateChanges()\\n\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['OpenTelemetry', 'SetTag', 'ActivitySource'], context_snippets=['private Activity? StartActivity([CallerMemberName] string name = \"\") => _serviceInstrumentation?.ActivitySource\\n                ?.StartActivity($\"{nameof(WinsService)}.{name}\")\\n                ?.SetStatus(ActivityStatusCode.Error)\\n                ?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\\n}\\n\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Trace, Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId); Contains method call: SetTag (54 times); Matches 2 keywords: SetTag, OpenTelemetry; Matches 2 keywords: SetTag, OpenTelemetry\", matching_patterns=['Import: OpenTelemetry.Trace', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)', 'SetTag', 'Pattern: OpenTelemetry', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)', 'OpenTelemetry', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid)', 'Pattern: Instrumentation', 'Pattern: StartActivity', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid)', 'Pattern: AddTag'], context_snippets=['ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ServerCallContext context)\\n\\t{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);', '{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\\n\\n\\t\\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\\n\\n\\t\\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'request.XmlParam);\\n\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\t\\t\\treturn Task.FromResult(new StartWorkflowResponse {InstanceUid = instanceUid.ToString()});\\n\\t\\t}\\n\\t\\tcatch (ArgumentException argEx)', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.StartParameters?.Submitter);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))\\n\\t\\t{', 'request.XmlParam);\\n\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\t\\t\\treturn Task.FromResult(new StartRoutingApprovalWorkflowResponse {InstanceUid = instanceUid.ToString()});\\n\\t\\t}\\n\\t\\tcatch (ArgumentException argEx)', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'request.XmlParam);\\n\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\n\\t\\t\\treturn Task.FromResult(new SendStartWorkflowResponse {InstanceUid = instanceUid.ToString()});\\n\\t\\t}', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ServerCallContext context)\\n\\t{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);', '{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)\", matching_patterns=['SetTag'], context_snippets=['private void OnPostRequestHandlerExecute(object sender, EventArgs e)\\n\\t\\t{\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\\n\\t\\t\\tLogSessionSize(HttpContext.Current?.Session);\\n\\t\\t\\t_performanceLog.SetSession(HttpContext.Current?.Session);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)\", matching_patterns=['SetTag'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n\\t\\t}\\n\\t\\tcatch (Exception ex)\\n\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (1 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['Import: OpenTelemetry.Trace', 'Import: OpenTelemetry.Instrumentation.AspNet', 'Import: DocuSign.CLM.Monitoring', 'ActivitySource', 'Import: DocuSign.Monitoring', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Import: var activity = StartActivity()\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Ok)', 'Pattern: ActivitySource', 'Pattern: Monitoring', 'Import: var activity = StartActivity()', 'Import: OpenTelemetry.Context.Propagation', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['private Activity StartActivity([CallerMemberName] string name = \"\") =>\\n\\t\\t\\tSessionStateProviderActivitySource\\n\\t\\t\\t\\t.StartActivity($\"{nameof(RedisSessionStateProviderWrapper)}.{name}\")\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\\n\\n\\t\\t#endregion\\n\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorWindows.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['ActivitySource', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: ActivitySource', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', 'Import: var activity = StartActivity()', 'Pattern: Metrics', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['{\\n\\t\\t\\tvar result = MimeLookup.GetMimeType(filePath);\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t\\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))', '_serviceInstrumentation?.ActivitySource\\n\\t\\t\\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.MimeDetector);', '?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.MimeDetector);\\n\\n\\tstatic class MimeLookup'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorCrossPlatform.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['ActivitySource', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: ActivitySource', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', 'Import: var activity = StartActivity()', 'Pattern: Metrics', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['using var stream = File.OpenRead(filePath);\\n\\t\\t\\tvar result = MimeGuesser.GuessMimeType(stream);\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t\\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))', '_serviceInstrumentation?.ActivitySource\\n\\t\\t\\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.MimeDetector);\\n}', '?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\\n\\t\\t\\t?.SetMetricName(InstrumentationNames.MimeDetector);\\n}\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (5 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (5 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry; Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['ActivitySource', 'Pattern: StartActivity', 'OpenTelemetry', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: ActivitySource', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', 'Import: var activity = StartActivity()', 'Pattern: Metrics', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['_serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity($\"{InstrumentationNames.MediaInfo}.{name}\")\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\\n\\t\\t\\t\\t?.SetMetricName(InstrumentationNames.MediaInfo);\\n\\n\\t\\tprivate Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>', 'private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\\n\\t\\t\\tactivity\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);', 'private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\\n\\t\\t\\tactivity\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\\n\\t}', 'activity\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\\n\\t}\\n}', '?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\\n\\t}\\n}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Extensions/Telemetry/ActivityExtensions.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)\", matching_patterns=['SetTag'], context_snippets=['where T : IQueueTask\\n\\t\\t=>\\n\\t\\tactivity\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);', '=>\\n\\t\\tactivity\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);', 'activity\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\\n\\n\\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)', '?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\\n\\n\\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)\\n\\t\\twhere T : IQueueTask', 'where T : IQueueTask\\n\\t\\t=>\\n\\t\\t\\tactivity\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\\n}\\n#nullable restore', '=>\\n\\t\\t\\tactivity\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\\n}\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions\", matching_patterns=['Import: DocuSign.Monitoring', 'SetTag', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: Activity.Current', 'Import: DocuSign.CLM.Monitoring.HttpModules', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)\", matching_patterns=['SetTag'], context_snippets=['try\\n\\t\\t\\t{\\n#if NETFRAMEWORK\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n#endif', '#if NETFRAMEWORK\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n#endif\\n\\n\\t\\t\\t\\tif (!string.IsNullOrEmpty(context.Request[Constants.QueryStringParameters.SAMLResponse]))'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning='Direct match for \\'SetTag\\' (15 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var saveActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(SaveAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes)), Import: var loadActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid); Contains method call: SetTag (15 times)', matching_patterns=['Import: var saveActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(SaveAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes))', 'Import: var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(LoadGroupSchema))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid)', 'Pattern: StartActivity', 'SetTag', 'Import: var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid)', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: ActivitySource', 'Import: var loadActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid)', 'Import: var refreshActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(Refresh))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid)', 'Pattern: SetAttribute', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['using var saveActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(SaveAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\\n\\t\\t\\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar stopwatch = Stopwatch.StartNew();', '?.StartActivity(nameof(SaveAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\\n\\t\\t\\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar stopwatch = Stopwatch.StartNew();\\n\\t\\t\\tvar statusMessages = new Messages();', '{\\n\\t\\t\\t\\tattrvm = WebUtility.HtmlDecode(attrvm);\\n\\t\\t\\t\\tvar attributes = attrvm.ToObject<AttributesViewModel>();\\n\\t\\t\\t\\tsaveActivity?.SetTag(\"docusign.document.id\", attributes.docUid);\\n\\n\\t\\t\\t\\tvar document = LoadAndValidateDocument(attributes.docUid);', 'using var loadActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);', '?.StartActivity(nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();\\n\\t\\t\\tif (!HasSufficientRightsToView())', 'using var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(LoadGroupSchema))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);', '?.StartActivity(nameof(LoadGroupSchema))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();\\n\\t\\t\\ttry', 'using var refreshActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(Refresh))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);', '?.StartActivity(nameof(Refresh))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();', 'using var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\\n\\t\\t\\t\\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);', '?.StartActivity(nameof(LoadCascadingDropdownOptions))\\n\\t\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\\n\\t\\t\\t\\t?.SetTag(\"docusign.document.id\", docUid);\\n\\t\\t\\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\\n\\n\\t\\t\\tvar statusMessages = new Messages();\\n\\t\\t\\ttry'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)\", matching_patterns=['SetTag'], context_snippets=['try\\n\\t\\t\\t{\\n#if NETFRAMEWORK\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n#endif', '#if NETFRAMEWORK\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n#endif\\n\\n\\t\\t\\t\\tFileUploadInfo fileUploadInfo = null;'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['public virtual void BeginRequest(HttpContext httpContext)\\n\\t\\t{\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext);\\n\\n\\t\\t\\tif (httpContext.Handler is MvcHandler)\\n\\t\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)\", matching_patterns=['SetTag'], context_snippets=['AttemptEventSource.Emit(counterInstanceName);\\n\\n#if NETFRAMEWORK\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext);\\n#endif', '#if NETFRAMEWORK\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext);\\n#endif\\n\\n\\t\\t\\tStopwatch sw = Stopwatch.StartNew();'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Controls/FormExtensions.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (10 occurrences); Contains method call: SetTag (10 times)\", matching_patterns=['SetTag'], context_snippets=['{\\n               tag.MergeAttribute(\"id\", id);\\n           }\\n           SetTagContent(tag, text);\\n       }\\n\\n       private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)', 'private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)\\n       {\\n           tag.MergeAttributes(attributes);\\n           SetTagContent(tag, text);\\n       }\\n\\n       private static void ConfigureAtlasImageTag(TTagBuilder tag, string spriteClassName, string additionalClassName)', '{\\n           tag.ApplyHtmlAttributes(htmlAttributes);\\n           tag.AddCssClass(\"LinkButton\");\\n           SetTagContent(tag, string.IsNullOrWhiteSpace(text) ? WebCommonUI.Resources.Common.Close : text);\\n           if (!tag.Attributes.ContainsKey(\"onclick\"))\\n           {\\n               tag.Attributes.Add(\"onclick\", \"CloseWindoid();return false;\");', '}\\n           }, TTagRenderMode.SelfClosing);\\n\\n           SetTagContent(tag, imageHtml);\\n       }\\n\\n       private static THtml BuildAtlasMetadataField(THtmlHelper html, string name, Enums.DataType fieldType, List<string> allowedValues, string value, CultureInfo culture)', 'div.ApplyHtmlAttributes(htmlAttributes);\\n           div.AddCssClass(\"atlasfield\");\\n           div.Attributes.Add(\"id\", $\"{member.Member.Name}Field\");\\n           SetTagContent(div, labelHtml, controlHtml);\\n       }\\n\\n       private static void ConfigureFaUxFieldFor<TModel, TValue>(TTagBuilder div, Expression<Func<TModel, TValue>> expression, object htmlAttributes, THtml labelHtml, THtml controlHtml)', 't.AddCssClass(\"theme_primary-dark_background-color\");\\n           });\\n\\n           SetTagContent(div, icon, controlHtml, labelHtml, spanLine);\\n       }\\n\\n       private static TTagBuilder BuildLabel(string name, string displayName)', 'var tag = new TTagBuilder(\"label\");\\n           tag.Attributes[\"for\"] = name;\\n           tag.AddCssClass(AtlasLabelName);\\n           SetTagContent(tag, displayName);\\n           return tag;\\n       }', '/// <summary>\\n       /// Abstraction for setting tag content to handle framework differences.\\n       /// </summary>\\n       private static void SetTagContent(TTagBuilder tag, string content)\\n       {\\n#if NETFRAMEWORK\\n           tag.SetInnerText(content);', '/// <summary>\\n       /// Abstraction for setting tag content to handle framework differences.\\n       /// </summary>\\n       private static void SetTagContent(TTagBuilder tag, THtml htmlContent)\\n       {\\n#if NETFRAMEWORK\\n           tag.InnerHtml = htmlContent.ToHtmlString();', '/// <summary>\\n       /// Abstraction for setting tag content to handle framework differences.\\n       /// </summary>\\n       private static void SetTagContent(TTagBuilder tag, params THtml[] htmlContents)\\n       {\\n#if NETFRAMEWORK\\n           using (var writer = new StringWriter())'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['private static void OnPostRequestHandlerExecute(HttpContext context)\\n\\t{\\n\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n\\t\\tif (HasSession(context))\\n\\t\\t{\\n\\t\\t\\tLogSessionSize(context.Session);'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowScopeEvents/WorkflowScopeEventsController.Trace.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)\", matching_patterns=['SetTag'], context_snippets=['.StartActivity($\"{GetType().Name}.{name}\")\\n\\t\\t\\t.SetMetricName(InstrumentationNames.ActivitySourceName)\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)', '.SetMetricName(InstrumentationNames.ActivitySourceName)\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);', '?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}\\n}', '?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}\\n}\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowActivities/WorkflowActivitiesController.Trace.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)\", matching_patterns=['SetTag'], context_snippets=['.StartActivity($\"{GetType().Name}.{name}\")\\n\\t\\t\\t.SetMetricName(InstrumentationNames.ActivitySourceName)\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)', '.SetMetricName(InstrumentationNames.ActivitySourceName)\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);', '?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}\\n}', '?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\\n\\t\\t\\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}\\n}\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowDefinition/WorkflowDefinitionController.Trace.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (4 occurrences); Contains method call: SetTag (4 times)\", matching_patterns=['SetTag'], context_snippets=['.StartActivity($\"{GetType().Name}.{name}\")\\n\\t\\t\\t.SetMetricName(InstrumentationNames.ActivitySourceName)\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);', '.SetMetricName(InstrumentationNames.ActivitySourceName)\\n\\t\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}', '?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}\\n}', '?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\\n\\t\\t\\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\\n\\t}\\n}\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/OpenXmlExtensions.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['return sdtElement.SdtProperties.GetFirstChild<Tag>().Val.Value;\\n        }\\n\\n        public static void SetTag(this SdtElement sdtElement, string tag)\\n        {\\n            if (sdtElement == null) return;\\n            if (sdtElement.SdtProperties == null) sdtElement.SdtProperties = new SdtProperties();'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (7 occurrences); Contains method call: SetTag (7 times)\", matching_patterns=['SetTag'], context_snippets=['namespace ADEXS.Core.Domain.Utilities;\\npublic static class ActivityEnricher\\n{\\n\\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\\n\\t{\\n\\t\\tif (activity == null)\\n\\t\\t{', '{\\n\\t\\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\\n\\t\\t{\\n\\t\\t\\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\\n\\t\\t\\treturn;\\n\\t\\t}', 'var account = dataPointCollection.FirstOrDefault();\\n\\t\\t\\tif (!string.IsNullOrEmpty(account))\\n\\t\\t\\t{\\n\\t\\t\\t\\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}', '{\\n\\t\\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\\n\\t\\t{\\n\\t\\t\\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\\n\\t\\t\\treturn;\\n\\t\\t}', 'var userId = dataPointCollection.FirstOrDefault();\\n\\t\\t\\tif (!string.IsNullOrEmpty(userId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}', '{\\n\\t\\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\\n\\t\\t{\\n\\t\\t\\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\\n\\t\\t}\\n\\t}\\n#else', 'var session = context == null ? null : GetSession(context);\\n\\t\\tif (!string.IsNullOrEmpty(session?.Id))\\n\\t\\t{\\n\\t\\t\\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\\n\\t\\t}\\n\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/MergeType/RepeatingSectionMergeType.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['mergeType.Merge();\\n                }\\n\\n                newSection.SetTag(string.Empty);\\n            }\\n\\n            _sdtElement.Remove();'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/Workflow/Client/WorkflowV1GrpcClient.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (54 times)\", matching_patterns=['Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)', 'Import: OpenTelemetry.Trace', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\\n\\t\\t\\t\\trevisionUid.ToString())', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\\n\\t\\t\\t\\tactivityUid.ToString())', 'SetTag', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid)', 'Pattern: OpenTelemetry', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\\n\\t\\t\\t\\trevisionUid.ToString())', 'Pattern: Monitoring', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\\n\\t\\t\\t\\trevision.DefinitionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\\n\\t\\t\\t\\tsourceInstanceUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\\n\\t\\t\\t\\tsourceActivityUid)', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\\n\\t\\t\\t\\tversion.DefinitionUid)', 'Pattern: Instrumentation', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid)', 'Import: DocuSign.CLM.Monitoring', 'Pattern: StartActivity', 'Pattern: ActivitySource', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())', 'Import: DocuSign.Monitoring'], context_snippets=['}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', 'headers: GetHeaders(request.User.AccountId),\\n\\t\\t\\t\\t\\t\\t\\t\\tcancellationToken: cancellationToken)));\\n\\n\\t\\t\\t\\tactivity?.SetTag(\\n\\t\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\\n\\t\\t\\t\\t\\tresponse.Definition.Uid);', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\\n\\n\\t\\treturn ExecuteWithResults(', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\\n\\n\\t\\treturn ExecuteWithResults(', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', \"}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\n\\t\\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.\", \"using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\n\\t\\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.\\n\\t\\tvar serviceClient = GetWinsServiceClient(user.AccountId, instanceUid);\", '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', 'object? callbackData = null)\\n\\t{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())', '{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())\\n\\t\\t\\t.SetTag(', '.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\\n\\t\\t\\t\\tactivityUid.ToString());', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString());', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())\\n\\t\\t\\t.SetTag(', '.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\\n\\t\\t\\t\\tinstanceUid.ToString())\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\\n\\t\\t\\t\\trevisionUid.ToString());', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\\n\\t\\t\\t\\trevisionUid.ToString());', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\\n\\t\\t\\t\\trevisionUid.ToString());', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\\n\\n\\t\\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\\n\\n\\t\\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\\n\\t\\t\\t\\tversion.DefinitionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\\n\\t\\t\\t\\tversion.DefinitionUid);', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\\n\\t\\t\\t.SetTag(', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\\n\\t\\t\\t\\trevision.DefinitionUid);', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\\n\\t\\t\\t\\trevision.DefinitionUid);', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\\n\\t\\t\\t\\tsourceInstanceUid)', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\\n\\t\\t\\t\\tsourceInstanceUid)\\n\\t\\t\\t.SetTag(', '.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\\n\\t\\t\\t\\tsourceInstanceUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\\n\\t\\t\\t\\tsourceActivityUid);', '}\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\\n\\t\\t\\t\\tsourceInstanceUid)', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\\n\\t\\t\\t\\tsourceInstanceUid)\\n\\t\\t\\t.SetTag(', '.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\\n\\t\\t\\t\\tsourceInstanceUid)\\n\\t\\t\\t.SetTag(\\n\\t\\t\\t\\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\\n\\t\\t\\t\\tsourceActivityUid);', 'int activityExecutionCount)\\n\\t{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);', '{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\\n\\n\\t\\treturn ExecuteWithResults(', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\\n\\t\\t\\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\\n\\n\\t\\treturn ExecuteWithResults(\\n\\t\\t\\tactivity,', 'private Activity? StartActivity([CallerMemberName] string name = \"\") => _instrumentation?.ActivitySource\\n\\t\\t?.StartActivity($\"{nameof(WorkflowV1GrpcClient)}.{name}\", ActivityKind.Client)\\n\\t\\t?.SetStatus(ActivityStatusCode.Error)\\n\\t\\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\\n\\n\\tprivate WinsService.WinsServiceClient GetWinsServiceClientByWorkItem(int accountId, Guid workItemUid)\\n\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Import: OpenTelemetry.Metrics', matching_patterns=['Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics', 'Import: OpenTelemetry.Metrics', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Metrics', 'Config file: program.cs'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', matching_patterns=['Import: ADEXS.Caching.OpenTelemetry.Extensions', 'Import: ADEXS.CqlCorePersistence.OpenTelemetry', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', 'Import: DocuSign.Msf.AspNet.OpenTelemetry', 'Import: OpenTelemetry.Exporter', 'Import: OpenTelemetry.Metrics', 'Import: OpenTelemetry.Trace', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Metrics', 'Pattern: ConfigureServices', 'Config file: startup.cs'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/ICoreInstrumentationLifetimeService.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace, Pattern: OpenTelemetry', matching_patterns=['Import: OpenTelemetry.Metrics', 'Import: OpenTelemetry.Trace', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Metrics', 'Pattern: TracerProvider', 'Pattern: MeterProvider', 'Config file: icoreinstrumentationlifetimeservice.cs'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/CoreInstrumentationLifetimeService.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace', matching_patterns=['Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions', 'Import: OpenTelemetry.Metrics', 'Import: OpenTelemetry.Trace', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Metrics', 'Pattern: TracerProvider', 'Pattern: MeterProvider', 'Config file: coreinstrumentationlifetimeservice.cs'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: OpenTelemetry.Metrics', 'Import: OpenTelemetry.Trace', 'Pattern: Activity.Current', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: Metrics', 'Pattern: UseOpenTelemetry'], context_snippets=['exception = allError[allError.Length - 1];\\n\\t\\t\\t}\\n\\t\\t\\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\\n\\t\\t\\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\\n\\t\\t\\t_log.ErrorNoPII(message, exception);'], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WINSManager.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=95, reasoning='Telemetry infrastructure: Import: Monitoring = DocuSign.Monitoring, Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName), Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)', matching_patterns=['Import: Monitoring = DocuSign.Monitoring', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName)', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\ttry\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tvar result = WINSClientLibrary.LoadWorkItem(user, workItemUid)', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t_log.InfoNoPII(string.Format(\"SubmitWorkItem: WorkItemUid {0}, output {1}\", workItemUid, PII.Encode(output)))', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IVersionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, version.Uid)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IRevisionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, revision.Uid)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar result = new Legacy2Designer(new DefinitionReaderLegacy(oldDesign)).Convert(user)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tstring jwtToken = null', 'Import: (CreateFeatureFlagsRemoteCallWrapper(userAccount.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(userAccount.AccountId, sourceInstanceUid))\\n\\t\\t\\t{\\n\\t\\t\\t\\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\\n\\t\\t\\t{\\n\\t\\t\\t\\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tvar result = WINSClientLibrary.ExportWorkflowDefinition(user, workflowName, versionNumber, revisionNumber)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tvar result = WINSClientLibrary.VersionWorkflow(user, workflowName, sourceVersionNumber, sourceRevisionNumber, newVersionNumber, comment)', 'Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tvar result = WINSClientLibrary.VersionWorkflow(user, sourceVersionUid, sourceRevisionNumber, newVersionNumber, comment)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\\n\\t\\t\\t{\\n\\t\\t\\t\\tbool isActivityExecutionLimitReached = Governor.IsActivityExecutionLimitReached(accountId, instanceUid, revisionUid, revisionCreatedDate, activityExecutionCount, out _)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tStartParameters startParameters = new StartParameters(user, xmlParam, sourceType, sourceId)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tGuid result = WorkflowRepository.SendStartWorkflow(user, workflowName, sourceType, sourceId, xmlParam)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\tGuid result = _StartWorkflow(user.AccountId, user.Uid, workflowName, xmlParam, sourceType, sourceId, instanceUid)', 'Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\\n\\t\\t\\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tGuid result = _StartWorkflow(user.AccountId, revisionUid, startParameters, instanceUid)', 'Pattern: Monitoring'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Controllers/WorkflowActivitiesController.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=95, reasoning='Telemetry infrastructure: Import: DocuSign.Monitoring, Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid), Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)', matching_patterns=['Import: DocuSign.Monitoring', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope(\"AccountId: {AccountId}, UserAccountUid: {UserAccountUid}\", accountId, userAccountUid))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid,\\n\\t\\t\\t\\t\\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid,\\n\\t\\t\\t\\t\\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: StartActivity'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Program.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=90, reasoning='Telemetry infrastructure: Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry', matching_patterns=['Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Metrics', 'Config file: program.cs'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService/Program.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=90, reasoning='Telemetry infrastructure: Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry', matching_patterns=['Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Metrics', 'Config file: program.cs'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService/Telemetry/MetricsEmitters/AdvancedInsightsMetricsEmitter.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=90, reasoning='Matches 2 keywords: ActivitySource, OpenTelemetry; Matches 2 keywords: ActivitySource, OpenTelemetry', matching_patterns=['OpenTelemetry', 'ActivitySource'], context_snippets=[], confidence=0.6)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/MimeDetectorMetricsEmitter.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=90, reasoning='Matches 2 keywords: ActivitySource, OpenTelemetry', matching_patterns=['ActivitySource', 'OpenTelemetry'], context_snippets=[], confidence=0.6)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/AbstractServicedComponent.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=85, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: service invocation to start process,\\n\\t\\t\\t\\t\\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\\n\\t\\t\\t\\t\\t// using GetType().Assembly instead, which would provide correct release version.\\n\\t\\t\\t\\t\\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\\n\\t\\t\\t\\t\\t\\tassembly: this.GetType().Assembly))\\n\\t\\t\\t\\t\\t\\t\\t.GetAwaiter().GetResult()', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: DocuSign.Monitoring', 'Import: service invocation to start process,\\n\\t\\t\\t\\t\\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\\n\\t\\t\\t\\t\\t// using GetType().Assembly instead, which would provide correct release version.\\n\\t\\t\\t\\t\\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\\n\\t\\t\\t\\t\\t\\tassembly: this.GetType().Assembly))\\n\\t\\t\\t\\t\\t\\t\\t.GetAwaiter().GetResult()', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: UseOpenTelemetry'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Ems/EmsRestClient.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=85, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnameof(SaveDocumentIngestPayload),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: DocuSign.Monitoring', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnameof(SaveDocumentIngestPayload),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnameof(SaveCustomAttributeDefinition),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n                                                                nameof(FinalizeCustomAttributeDefinition),\\n                                                                new ClmTimingPhase(nameof(EmsRestClient)))', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\tnameof(UpdateDocumentIdOfAgreementDocument),\\n\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', 'Pattern: Monitoring'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/UnifiedRepository/UnifiedRepositoryIngestionService.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=85, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.InfoNoPII($\"Processing Document Permissions\")', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: DocuSign.Monitoring', 'Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.InfoNoPII($\"Processing Document Permissions\")', 'Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessAttributes, CounterInstanceDetails.DocumentIngestionTiming))\\n\\t\\t{\\n\\t\\t\\tLog.InfoNoPII($\"Processing Document Attributes\")', 'Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.AttributeSyncUsingIngestionService, CounterInstanceDetails.DocumentIngestionTiming))\\n\\t\\t{\\n\\t\\t\\tLog.InfoNoPII($\"Processing Document Attributes\")', 'Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessHistory, CounterInstanceDetails.DocumentIngestionTiming))\\n\\t\\t\\t{\\n\\t\\t\\t\\tLog.InfoNoPII($\"Processing Document History\")', 'Pattern: Monitoring'], context_snippets=[], confidence=0.85)"
]