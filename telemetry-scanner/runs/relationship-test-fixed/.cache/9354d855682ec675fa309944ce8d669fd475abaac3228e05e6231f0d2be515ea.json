[
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 2 keywords: SetTag, middleware\", matching_patterns=['SetTag', 'middleware'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)\", matching_patterns=['SetTag'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n\\t\\t}\\n\\t\\tcatch (Exception ex)\\n\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)\", matching_patterns=['SetTag'], context_snippets=['private void OnPostRequestHandlerExecute(object sender, EventArgs e)\\n\\t\\t{\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\\n\\t\\t\\tLogSessionSize(HttpContext.Current?.Session);\\n\\t\\t\\t_performanceLog.SetSession(HttpContext.Current?.Session);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Trace, Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId); Contains method call: SetTag (54 times); Matches 2 keywords: SetTag, OpenTelemetry\", matching_patterns=['SetTag', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid)', 'OpenTelemetry', 'Pattern: OpenTelemetry', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)', 'Pattern: Instrumentation', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)', 'Pattern: AddTag', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid)', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)', 'Import: OpenTelemetry.Trace', 'Pattern: StartActivity', 'Import: var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid)'], context_snippets=['ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ServerCallContext context)\\n\\t{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);', '{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\\n\\n\\t\\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\\n\\n\\t\\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'request.XmlParam);\\n\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\t\\t\\treturn Task.FromResult(new StartWorkflowResponse {InstanceUid = instanceUid.ToString()});\\n\\t\\t}\\n\\t\\tcatch (ArgumentException argEx)', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.StartParameters?.Submitter);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))\\n\\t\\t{', 'request.XmlParam);\\n\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\t\\t\\treturn Task.FromResult(new StartRoutingApprovalWorkflowResponse {InstanceUid = instanceUid.ToString()});\\n\\t\\t}\\n\\t\\tcatch (ArgumentException argEx)', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateWorkflowName(request!.WorkflowName);\\n\\t\\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);', 'request.XmlParam);\\n\\n\\t\\t\\tactivity?.SetStatus(ActivityStatusCode.Ok)\\n\\t\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\\n\\n\\t\\t\\treturn Task.FromResult(new SendStartWorkflowResponse {InstanceUid = instanceUid.ToString()});\\n\\t\\t}', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))\\n\\t\\t{', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ValidateUser(request?.User);\\n\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', '?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\\n\\t\\t\\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\\n\\n\\t\\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);', 'ServerCallContext context)\\n\\t{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);', '{\\n\\t\\tusing var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))', 'using var activity = StartActivity()\\n\\t\\t\\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\\n\\t\\t\\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\\n\\n\\t\\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\\n\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry\", matching_patterns=['SetTag', 'ActivitySource', 'OpenTelemetry'], context_snippets=['private Activity? StartActivity([CallerMemberName] string name = \"\") => _serviceInstrumentation?.ActivitySource\\n                ?.StartActivity($\"{nameof(WinsService)}.{name}\")\\n                ?.SetStatus(ActivityStatusCode.Error)\\n                ?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\\n}\\n\\n#nullable restore'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Matches 3 keywords: SetTag, OpenTelemetry, middleware\", matching_patterns=['SetTag', 'Import: DocuSign.Monitoring', 'middleware', 'Import: DocuSign.CLM.Monitoring.HttpModules', 'Pattern: Instrumentation', 'Pattern: Activity.Current', 'OpenTelemetry', 'Pattern: Monitoring', 'Pattern: OpenTelemetry', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware\", matching_patterns=['SetTag', 'middleware'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware\", matching_patterns=['SetTag', 'middleware'], context_snippets=['try\\n\\t\\t{\\n\\t\\t\\tcontext.AddKazMonServerVariables();\\n\\t\\t\\tactivity?.SetTagsWithCommonFields(context);\\n\\t\\t\\tawait base.Invoke(context);\\n\\t\\t\\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n\\t\\t}'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware\", matching_patterns=['SetTag', 'middleware'], context_snippets=['private static void OnPostRequestHandlerExecute(HttpContext context)\\n\\t{\\n\\t\\tActivity.Current?.SetTagsWithCommonFields(context);\\n\\t\\tif (HasSession(context))\\n\\t\\t{\\n\\t\\t\\tLogSessionSize(context.Session);'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)\", matching_patterns=['SetTag'], context_snippets=['AttemptEventSource.Emit(counterInstanceName);\\n\\n#if NETFRAMEWORK\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext);\\n#endif', '#if NETFRAMEWORK\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\\n#else\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext);\\n#endif\\n\\n\\t\\t\\tStopwatch sw = Stopwatch.StartNew();'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs'), strategy=<SearchStrategy.KEYWORD: 'keyword'>, relevance_score=100, reasoning=\"Direct match for 'SetTag' (1 occurrences)\", matching_patterns=['SetTag'], context_snippets=['public virtual void BeginRequest(HttpContext httpContext)\\n\\t\\t{\\n\\t\\t\\tActivity.Current?.SetTagsWithCommonFields(httpContext);\\n\\n\\t\\t\\tif (httpContext.Handler is MvcHandler)\\n\\t\\t\\t{'], confidence=0.95)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions', 'Import: OpenTelemetry.Metrics', 'Import: OpenTelemetry.Trace', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: Metrics', 'Pattern: UseOpenTelemetry'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: OpenTelemetry.Metrics', 'Import: OpenTelemetry.Trace', 'Pattern: Activity.Current', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: Metrics', 'Pattern: UseOpenTelemetry'], context_snippets=['exception = allError[allError.Length - 1];\\n\\t\\t\\t}\\n\\t\\t\\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\\n\\t\\t\\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\\n\\t\\t\\t_log.ErrorNoPII(message, exception);'], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=100, reasoning='Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', matching_patterns=['Import: ADEXS.Caching.OpenTelemetry.Extensions', 'Import: ADEXS.CqlCorePersistence.OpenTelemetry', 'Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions', 'Import: DocuSign.Msf.AspNet.OpenTelemetry', 'Import: OpenTelemetry.Exporter', 'Import: OpenTelemetry.Metrics', 'Import: OpenTelemetry.Trace', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Metrics', 'Pattern: ConfigureServices', 'Config file: startup.cs'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Controllers/WorkflowActivitiesController.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=95, reasoning='Telemetry infrastructure: Import: DocuSign.Monitoring, Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid), Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)', matching_patterns=['Import: DocuSign.Monitoring', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope(\"AccountId: {AccountId}, UserAccountUid: {UserAccountUid}\", accountId, userAccountUid))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid,\\n\\t\\t\\t\\t\\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid,\\n\\t\\t\\t\\t\\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\\n\\t\\t{\\n\\t\\t\\ttry\\n\\t\\t\\t{\\n\\t\\t\\t\\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: StartActivity'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Ems/EmsRestClient.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=85, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnameof(SaveDocumentIngestPayload),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: DocuSign.Monitoring', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnameof(SaveDocumentIngestPayload),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnameof(SaveCustomAttributeDefinition),\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n                                                                nameof(FinalizeCustomAttributeDefinition),\\n                                                                new ClmTimingPhase(nameof(EmsRestClient)))', 'Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\\n\\t\\t\\tnameof(UpdateDocumentIdOfAgreementDocument),\\n\\t\\t\\tnew ClmTimingPhase(nameof(EmsRestClient)))', 'Pattern: Monitoring'], context_snippets=[], confidence=0.85)",
  "SearchResult(file_path=PosixPath('/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/AbstractServicedComponent.cs'), strategy=<SearchStrategy.PATTERN: 'pattern'>, relevance_score=85, reasoning='Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: service invocation to start process,\\n\\t\\t\\t\\t\\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\\n\\t\\t\\t\\t\\t// using GetType().Assembly instead, which would provide correct release version.\\n\\t\\t\\t\\t\\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\\n\\t\\t\\t\\t\\t\\tassembly: this.GetType().Assembly))\\n\\t\\t\\t\\t\\t\\t\\t.GetAwaiter().GetResult()', matching_patterns=['Import: DocuSign.CLM.Monitoring', 'Import: DocuSign.Monitoring', 'Import: service invocation to start process,\\n\\t\\t\\t\\t\\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\\n\\t\\t\\t\\t\\t// using GetType().Assembly instead, which would provide correct release version.\\n\\t\\t\\t\\t\\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\\n\\t\\t\\t\\t\\t\\tassembly: this.GetType().Assembly))\\n\\t\\t\\t\\t\\t\\t\\t.GetAwaiter().GetResult()', 'Pattern: OpenTelemetry', 'Pattern: Instrumentation', 'Pattern: Monitoring', 'Pattern: UseOpenTelemetry'], context_snippets=[], confidence=0.85)"
]