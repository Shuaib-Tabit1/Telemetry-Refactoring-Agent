{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION tags to existing CLM web application HTTP request spans.",
    "search_keywords": [
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "SetTag",
      "ActivitySource",
      "OpenTelemetry",
      "middleware"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": "HTTP Request",
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"]"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 3,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "name": "Locate OpenTelemetry configuration & Activity source code",
        "action": "locate_configuration",
        "description": "Search the CLM solution for OpenTelemetry setup and any ActivitySource/SetTag calls.",
        "tasks": [
          "grep / ripgrep for \"AddOpenTelemetry\", \"AddOtlpExporter\", \"ActivitySource\", \"SetTag\" in clm-web repo",
          "Open files such as Startup.cs, Program.cs, TelemetryExtensions.cs or any *Telemetry.cs",
          "Confirm which library (OpenTelemetry.Instrumentation.AspNetCore, System.Diagnostics.DiagnosticListener, etc.) creates the HTTP server spans"
        ],
        "expected_files": [
          "Startup.cs (or Program.cs for .NET 6+)",
          "TelemetryConfigurationExtensions.cs",
          "Any custom middleware already tagging HTTP spans"
        ],
        "validation_criteria": "Exact location of existing OpenTelemetry pipeline and HTTP server span creation confirmed"
      },
      {
        "order": 2,
        "name": "Design enrichment mechanism",
        "action": "design",
        "description": "Choose the minimal, cross-cutting technique that will always execute within the server request span. Prefer ASP.NET middleware registered immediately after the built-in routing middleware.",
        "options_considered": [
          "Telemetry Enrichment callback in AddAspNetCoreInstrumentation",
          "Standalone custom middleware (chosen for clarity and flexibility)"
        ],
        "decision": "Use custom middleware so we can read both Request and Response objects and handle OnStarting for final Location header",
        "validation_criteria": "Middleware design doc approved in code review"
      },
      {
        "order": 3,
        "name": "Create middleware skeleton",
        "action": "implement_changes",
        "dependencies": [
          1,
          2
        ],
        "description": "Add a new file `HttpRedirectEnrichmentMiddleware.cs`",
        "code_snippet": "public class HttpRedirectEnrichmentMiddleware\n{\n    private readonly RequestDelegate _next;\n    public HttpRedirectEnrichmentMiddleware(RequestDelegate next) => _next = next;\n\n    public async Task Invoke(HttpContext context)\n    {\n        var activity = Activity.Current;\n        // Capture Referer early (request already read)\n        var referer = context.Request.Headers[\"Referer\"].FirstOrDefault();\n        if (!string.IsNullOrEmpty(referer))\n            activity?.SetTag(\"HTTP_REFERER\", referer);\n\n        // Capture redirect location after response completed\n        context.Response.OnStarting(state =>\n        {\n            var httpContext = (HttpContext)state!;\n            if (httpContext.Response.StatusCode >= 300 && httpContext.Response.StatusCode <= 399)\n            {\n                var location = httpContext.Response.Headers[\"Location\"].FirstOrDefault();\n                if (!string.IsNullOrEmpty(location))\n                    Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location);\n            }\n            return Task.CompletedTask;\n        }, context);\n\n        await _next(context);\n    }\n}",
        "validation_criteria": "Middleware compiles, unit tests pass"
      },
      {
        "order": 4,
        "name": "Register middleware in pipeline",
        "action": "implement_changes",
        "dependencies": [
          3
        ],
        "description": "In Startup.cs (Configure method) or Program.cs (for minimal hosting), insert `app.UseMiddleware<HttpRedirectEnrichmentMiddleware>();` immediately after existing `UseRouting()` (and before `UseEndpoints()`).",
        "validation_criteria": "Application starts locally with middleware registered exactly once (no duplicate spans)"
      },
      {
        "order": 5,
        "name": "Update unit & integration tests",
        "action": "tests",
        "dependencies": [
          3,
          4
        ],
        "description": "1. Add unit test for middleware to verify tags set when headers present.\n2. Extend existing integration/functional test harness to assert spans contain the two new attributes when hitting a redirect endpoint.",
        "validation_criteria": "New tests pass in CI"
      },
      {
        "order": 6,
        "name": "Local manual validation (Developer machine)",
        "action": "manual_validation",
        "dependencies": [
          4
        ],
        "description": "Run application, issue requests with and without Referer header and to endpoints that return 302.\nInspect Activity via debugger or in-memory exporter to confirm tags.",
        "validation_criteria": "Referer and redirect Location visible on Activity objects"
      },
      {
        "order": 7,
        "name": "Deploy to Dev / Feature environment",
        "action": "deploy_dev",
        "dependencies": [
          6
        ],
        "description": "Merge PR to develop branch, let CI build and deploy to DEV environment.\nEnable OTLP console or in-memory exporter if needed.",
        "validation_criteria": "Kusto query in DEV environment returns columns HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION with expected values"
      },
      {
        "order": 8,
        "name": "Performance & safety check",
        "action": "performance_testing",
        "dependencies": [
          7
        ],
        "description": "Run perf/load test (existing artillery or JMeter suite) to confirm no noticeable latency or CPU regression (target <1% overhead).",
        "validation_criteria": "P95 latency change < 3 ms; no memory leaks"
      },
      {
        "order": 9,
        "name": "Roll-out to Demo \u2192 Stage \u2192 Prod",
        "action": "progressive_deployment",
        "dependencies": [
          8
        ],
        "description": "Use blue/green or canary strategy already in place:\n1. Demo (10% traffic, 30 min)\n2. Stage (25% traffic, 1 h)\n3. Prod (incremental 10/50/100).",
        "validation_criteria": "Kusto dashboard shows attributes on live traffic; error/latency rates unchanged"
      },
      {
        "order": 10,
        "name": "Post-deployment monitoring & documentation",
        "action": "monitoring",
        "dependencies": [
          9
        ],
        "description": "1. Add new Kusto sample queries to runbooks / wiki.\n2. Create Grafana/Loki panel showing top redirect destinations.\n3. Close Jira ticket when metrics stable for 24 h.",
        "validation_criteria": "Queries & dashboards reviewed by SRE; ticket closed"
      }
    ],
    "contextual_hints": [
      "Capturing the response Location header after the framework has decided to issue a redirect (may require OnStarting / middleware ordering)",
      "Ensuring the span we tag is the SAME span produced by existing OpenTelemetry auto-instrumentation, not a new one"
    ]
  }
}