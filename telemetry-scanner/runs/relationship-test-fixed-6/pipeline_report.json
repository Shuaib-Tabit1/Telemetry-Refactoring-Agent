{
  "execution_summary": {
    "total_stages": 9,
    "completed": 9,
    "failed": 0,
    "cache_hits": 0,
    "total_execution_time": 737.3162617683411
  },
  "stage_details": {
    "ticket_processing": {
      "stage_name": "ticket_processing",
      "status": "StageStatus.COMPLETED",
      "result": "## OpenTelemetry Span Attributes Missing - HTTP Redirect Tracking\n\n**Summary:** Add missing HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to CLM web application spans\n\n**Problem Description:**\nOur OpenTelemetry spans in the CLM (Contract Lifecycle Management) web application are missing critical HTTP attributes needed for debugging redirect flows and investigating user journey issues. Specifically:\n\n1. **Missing Attribute**: `HTTP_REFERER` - The referring page URL that led to the current request\n2. **Missing Attribute**: `HTTP_RESPONSE_REDIRECT_LOCATION` - The destination URL when a 302/redirect response occurs\n\n**Business Impact:**\n- Cannot trace user navigation flows through CLM application\n- Difficult to investigate redirect-related issues and errors\n- Missing context for 302 responses that redirect to error pages\n\n**Technical Details:**\n\n**Target Application:** CLM Web Application (clm-web)\n**Environment:** Demo (but affects all environments)\n**Specific Pages Affected:**\n- `/clm/Documents/BrowseDocuments.aspx`\n- `/clm/SSO/SSOEndpoint.ashx` \n- Any page that handles redirects (HTTP 302 responses)\n\n**Expected Kusto Query Results:**\nAfter fix, this query should show the missing attributes:\n```kusto\nOtlpSpanEvents\n| where Environment == \"Demo\"\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\n| where http_status_code > 200\n| project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\n```\n\n**Implementation Requirements:**\n\n1. **Add HTTP_REFERER attribute** to all incoming HTTP requests\n   - Source: `Request.Headers[\"Referer\"]` or `HttpContext.Request.Headers.Referer`\n   - Add to span as: `activity.SetTag(\"HTTP_REFERER\", refererValue)`\n\n2. **Add HTTP_RESPONSE_REDIRECT_LOCATION attribute** for redirect responses\n   - Source: `Response.Headers[\"Location\"]` when status code is 301/302/303/307/308\n   - Add to span as: `activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue)`\n\n**Files to Look For:**\n- CLM web application middleware or request handling code\n- ASP.NET request pipeline components\n- OpenTelemetry instrumentation configuration\n- Files containing \"ActivitySource\", \"SetTag\", or \"AddTag\" method calls\n- Middleware files that handle HTTP requests/responses\n- Look for existing telemetry code in CLM-related projects\n\n**Acceptance Criteria:**\n- [ ] HTTP_REFERER attribute captured from incoming request headers\n- [ ] HTTP_RESPONSE_REDIRECT_LOCATION attribute captured for 302+ responses  \n- [ ] Attributes visible in OtlpSpanEvents Kusto table\n- [ ] No performance degradation from additional attribute collection\n- [ ] Proper null/empty value handling for missing headers\n\n**Technical Notes:**\n- Follow existing OpenTelemetry patterns in the codebase\n- Ensure attribute names match exactly: \"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\"\n- Add attributes to HTTP request spans, not separate spans\n- Handle edge cases where headers might be missing or empty\n",
      "error": null,
      "execution_time": 0.0005209445953369141,
      "cache_hit": false
    },
    "intent_extraction": {
      "stage_name": "intent_extraction",
      "status": "StageStatus.COMPLETED",
      "result": {
        "issue_category": "INSTRUMENTATION",
        "static_analysis_query": {
          "find_method_call": "SetTag"
        },
        "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers as span attributes for all CLM web app HTTP request spans.",
        "search_keywords": [
          "HTTP_REFERER",
          "HTTP_RESPONSE_REDIRECT_LOCATION",
          "Activity.SetTag",
          "ActivitySource",
          "OpenTelemetry",
          "middleware",
          "redirect"
        ],
        "telemetry_operation": {
          "type": "span",
          "target_name": null,
          "action": "ADD_ATTRIBUTES",
          "attributes_to_add": [
            {
              "name": "HTTP_REFERER",
              "value_source": "Request.Headers[\"Referer\"]"
            },
            {
              "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
              "value_source": "Response.Headers[\"Location\"]"
            }
          ],
          "new_span_name": null,
          "new_metric_details": {}
        },
        "confidence": "IntentConfidence.HIGH",
        "operation_type": "OperationType.MULTI_FILE",
        "complexity_score": 4,
        "estimated_files": 3,
        "validation_result": {
          "is_valid": true,
          "confidence": "IntentConfidence.HIGH",
          "issues": [],
          "suggestions": []
        },
        "sub_tasks": [],
        "contextual_hints": [
          "Finding or building middleware that has access to the Activity instance **after** response headers are written (needed for redirect location)",
          "Ensuring attributes are only added to the *HTTP server* span, not to nested Activity scopes created later in the request",
          "Gracefully handling absent headers and non-redirect status codes to avoid noisy null/empty tags",
          "Validating the change in all environments (Dev \u2192 QA \u2192 Prod) because redirect behavior can differ by load balancer, proxies, or SSO modules"
        ],
        "similar_patterns": [
          "http_header_to_span_attribute",
          "middleware_request_response_instrumentation"
        ],
        "implementation_strategy": {
          "extend_existing": true,
          "create_new": false,
          "preferred_approach": "middleware"
        },
        "exact_requirements": {
          "attribute_names": [
            "HTTP_REFERER",
            "HTTP_RESPONSE_REDIRECT_LOCATION",
            "HTTP_REFERER",
            "HTTP_RESPONSE_REDIRECT_LOCATION"
          ],
          "patterns": [
            "kusto\nOtlpSpanEvents\n| where Environment == \"Demo\"\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\n| where http_status_code > 200\n| project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\n",
            "\n\n**Implementation Requirements:**\n\n1. **Add HTTP_REFERER attribute** to all incoming HTTP requests\n   - Source: ",
            "\n   - Add to span as: ",
            "\n\n2. **Add HTTP_RESPONSE_REDIRECT_LOCATION attribute** for redirect responses\n   - Source: ",
            " when status code is 301/302/303/307/308\n   - Add to span as: "
          ],
          "implementation_notes": [
            "SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue)`\n\n**Files to Look For:**\n- CLM web application middleware or request handling code\n- ASP",
            "NET request pipeline components\n- OpenTelemetry instrumentation configuration\n- Files containing \"ActivitySource\", \"SetTag\", or \"AddTag\" method calls\n- Middleware files that handle HTTP requests/responses\n- Look for existing telemetry code in CLM-related projects\n\n**Acceptance Criteria:**\n- [ ] HTTP_REFERER attribute captured from incoming request headers\n- [ ] HTTP_RESPONSE_REDIRECT_LOCATION attribute captured for 302+ responses  \n- [ ] Attributes visible in OtlpSpanEvents Kusto table\n- [ ] No performance degradation from additional attribute collection\n- [ ] Proper null/empty value handling for missing headers\n\n**Technical Notes:**\n- Follow existing OpenTelemetry patterns in the codebase\n- Ensure attribute names match exactly: \"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\"\n- Add attributes to HTTP request spans, not separate spans\n- Handle edge cases where headers might be missing or empty"
          ]
        },
        "telemetry_analysis": null
      },
      "error": null,
      "execution_time": 38.08386182785034,
      "cache_hit": false
    },
    "project_parsing": {
      "stage_name": "project_parsing",
      "status": "StageStatus.COMPLETED",
      "result": [
        "/Users/shuaib.tabit/Documents/Atlas/src/ActIntegration\\ActIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdminService\\AdminService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService\\AdvancedInsightsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService.IntegrationTests\\AdvancedInsightsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AgreementDefinitionModel\\AdmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP\\API.ABAC.PDP.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation.IntegrationTests/API.Allocation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/API.Allocation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication\\API.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Common\\API.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content\\API.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content.EndToEndTests\\API.Content.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.Common\\API.DocuSignInternal.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.IntegrationTests\\API.DocuSignInternal.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal\\API.DocuSignInternal.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper.IntegrationTests/API.GateKeeper.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper\\API.GateKeeper.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch.EndToEndTests\\API.OpenSearch.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch\\API.OpenSearch.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning.IntegrationTests/API.Provisioning.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning\\API.Provisioning.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.SfGenAPI\\API.SfGenAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI\\API.WebAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities\\API.WorkflowActivities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.IntegrationTests\\API.WorkflowActivities.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.Client/API.WorkflowActivities.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign\\API.WorkflowDesign.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign.IntegrationTests\\API.WorkflowDesign.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities\\Atlas.Workflow.Activities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Client\\Atlas.Workflow.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Readers\\Atlas.Workflow.Readers.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService\\AtlasDataManipulationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService.IntegrationTests\\AtlasDataManipulationService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication\\AuthenticationApplication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication.IntegrationTests\\AuthenticationApplication.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService\\AuthMaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService.IntegrationTests\\AuthMaintenanceService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Automation.Toolkit.Tests\\Automation.Toolkit.Tests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ChatNotification\\ChatNotification.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CodeRunner\\CodeRunner.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Core\\Collaboration.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Infrastructure\\Collaboration.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ConnectServiceIntegration\\ConnectServiceIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain.Testing\\Core.Domain.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain\\Core.Domain.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework\\Core.ServiceFramework.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework.Testing\\Core.ServiceFramework.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types\\Core.Types.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules\\CustomRules.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService\\CustomRuleService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService.IntegrationTests\\CustomRuleService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService\\DetectTypeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService.IntegrationTests\\DetectTypeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService\\DocToPDFService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService.IntegrationTests\\DocToPDFService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentAssembly\\DocumentAssembly.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService\\DocumentCompareService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService.IntegrationTests\\DocumentCompareService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation\\DocumentCreation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation.IntegrationTests\\DocumentCreation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticCore\\ElasticCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticIndexing\\ElasticIndexing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElectronicSignature\\ElectronicSignature.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService\\ESignatureService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService.IntegrationTests\\ESignatureService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ETL\\ETL.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService\\ExtractService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService.IntegrationTests\\ExtractService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Fax\\Fax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/FormGen\\FormGen.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor\\GenericEventProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor.IntegrationTests\\GenericEventProcessor.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GraphQLCore\\GraphQLCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/HtmlService\\HtmlService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InboundFax\\InboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InteractivePreviewCore\\InteractivePreviewCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MaintenanceService\\MaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MenuActions\\DocumentReviewMenuActions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService\\MessageWorkerService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService\\NewsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService.IntegrationTests\\NewsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ObligationManagementIntegration\\ObligationManagementIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI.IntegrationTests/OfficeWebAppsAPI.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI\\OfficeWebAppsAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OneConfig.Testing\\OneConfig.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\DacDocGenApiClient\\DacDocGenApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\Doc2PdfApiClient\\Doc2PdfApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OrchestrationIntegration\\OrchestrationIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail\\OutboundEmail.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail.IntegrationTests\\OutboundEmail.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent\\OutboundEvent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent.IntegrationTests\\OutboundEvent.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundFax\\OutboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundHttpService\\OutboundHttpService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Packaging\\Packaging.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/PdfService\\PdfService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProcessBuilder\\ProcessBuilder.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProfileLogger\\ProfileLogger.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Core\\ProxyLayer.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Infrastructure\\ProxyLayer.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService\\ReportingService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService.IntegrationTests\\ReportingService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Authentication\\REST.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Common\\REST.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Content\\REST.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices\\REST.WebServices.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/RtmIntegration\\RtmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SANitationService\\SANitationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Core\\SForce.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Services\\SForce.Services.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer\\SFTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer.IntegrationTests\\SFTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SharedTemplates\\SharedTemplates.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer\\SMTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer.IntegrationTests\\SMTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService\\StructuredDocumentService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService.IntegrationTests\\StructuredDocumentService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TaskProcessor\\TaskProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService\\TreeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService.IntegrationTests\\TreeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/UserTaskList\\UserTaskList.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback\\VendorCallback.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Testing\\Web.Common.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Abstractions/Web.Common.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Resources/Web.Common.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common\\Web.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Web.Common.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Abstractions\\Web.CommonUI.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Resources/Web.CommonUI.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI\\Web.CommonUI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.IntegrationTests\\Web.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Testing\\Web.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web\\Web.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet\\WebNet.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet.IntegrationTests\\WebNet.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebContent\\WebContent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebShare\\WebShare.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap\\WebSoap.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol\\WINS.Protocol.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS\\WINS.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CLM.Search\\dirs.proj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap.EndToEndTests\\WebSoap.EndToEndTests.csproj"
      ],
      "error": null,
      "execution_time": 0.015470027923583984,
      "cache_hit": false
    },
    "graph_building": {
      "stage_name": "graph_building",
      "status": "StageStatus.COMPLETED",
      "result": {
        "projects_count": 143,
        "graph_loaded": true
      },
      "error": null,
      "execution_time": 406.98851203918457,
      "cache_hit": false
    },
    "intelligent_search": {
      "stage_name": "intelligent_search",
      "status": "StageStatus.COMPLETED",
      "result": [
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: StartActivity",
            "Pattern: Metrics",
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)",
            "?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);",
            "?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: StartActivity",
            "Pattern: Metrics",
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)",
            "?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);",
            "?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "Logger.InfoNoPII(Task.LastErrorMessage);\n\t\t\t\t\tresult.TaskResult = TaskResult.Success;\n\t\t\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, mimeType);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (3 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: StartActivity",
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "Import: var activity = StartActivity(task, corrToken)",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: DocuSign.Monitoring",
            "Pattern: Monitoring",
            "ActivitySource",
            "Import: DocuSign.CLM.Monitoring",
            "SetTag"
          ],
          "context_snippets": [
            "ActivityKind.Consumer,\n\t\t\t\t\tparentContext: correlationToken.ToActivityContext())\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);",
            "parentContext: correlationToken.ToActivityContext())\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);\n\t}",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);\n\t}\n}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (9 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid), Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid); Contains method call: SetTag (9 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid)",
            "Pattern: StartActivity",
            "Pattern: OpenTelemetry",
            "Import: var span = StartActivity()",
            "Pattern: ActivitySource",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid)",
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "LastProcessDate = DateTime.UtcNow;\n\n\t\t\tusing var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid);\n\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\n            if (activity == null) throw new ApplicationException(string.Format(\"Cannot find expected activity {0} in workflow map for instanceUid {1}\", instanceActivity.ActivityTypeName, Uid));",
            "LastProcessDate = DateTime.UtcNow;\n\n\t\t\tusing var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid);\n\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\n            if (activity == null) return;",
            "private Activity StartActivity([CallerMemberName] string name = \"\") => ServiceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)",
            "?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)",
            ".SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);",
            ".SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);",
            ".SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\n\n\t\tprivate void CheckAndHandleInstanceStateChanges()",
            ".SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\n\n\t\tprivate void CheckAndHandleInstanceStateChanges()\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry",
            "SetTag"
          ],
          "context_snippets": [
            "private Activity? StartActivity([CallerMemberName] string name = \"\") => _serviceInstrumentation?.ActivitySource\n                ?.StartActivity($\"{nameof(WinsService)}.{name}\")\n                ?.SetStatus(ActivityStatusCode.Error)\n                ?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n}\n\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Trace, Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId); Contains method call: SetTag (54 times)",
          "matching_patterns": [
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid)",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)",
            "Pattern: OpenTelemetry",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "SetTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)",
            "Pattern: StartActivity",
            "Import: OpenTelemetry.Trace",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Pattern: AddTag"
          ],
          "context_snippets": [
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.StartParameters?.Submitter);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))\n\t\t{",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartRoutingApprovalWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t\treturn Task.FromResult(new SendStartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private void OnPostRequestHandlerExecute(object sender, EventArgs e)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\n\t\t\tLogSessionSize(HttpContext.Current?.Session);\n\t\t\t_performanceLog.SetSession(HttpContext.Current?.Session);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\n\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (1 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: var activity = StartActivity()",
            "Pattern: StartActivity",
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "Import: OpenTelemetry.Context.Propagation",
            "OpenTelemetry",
            "Import: OpenTelemetry.Trace",
            "Import: OpenTelemetry.Instrumentation.AspNet",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: DocuSign.Monitoring",
            "Pattern: Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t\t?.SetStatus(ActivityStatusCode.Ok)",
            "ActivitySource",
            "Import: DocuSign.CLM.Monitoring",
            "SetTag"
          ],
          "context_snippets": [
            "private Activity StartActivity([CallerMemberName] string name = \"\") =>\n\t\t\tSessionStateProviderActivitySource\n\t\t\t\t.StartActivity($\"{nameof(RedisSessionStateProviderWrapper)}.{name}\")\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n\n\t\t#endregion\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorWindows.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: var activity = StartActivity()",
            "Pattern: StartActivity",
            "Pattern: OpenTelemetry",
            "Pattern: Metrics",
            "Pattern: ActivitySource",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "{\n\t\t\tvar result = MimeLookup.GetMimeType(filePath);\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))",
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);",
            "?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n\n\tstatic class MimeLookup"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorCrossPlatform.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: var activity = StartActivity()",
            "Pattern: StartActivity",
            "Pattern: OpenTelemetry",
            "Pattern: Metrics",
            "Pattern: ActivitySource",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "using var stream = File.OpenRead(filePath);\n\t\t\tvar result = MimeGuesser.GuessMimeType(stream);\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))",
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n}",
            "?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (5 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (5 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: var activity = StartActivity()",
            "Pattern: StartActivity",
            "Pattern: OpenTelemetry",
            "Pattern: Metrics",
            "Pattern: ActivitySource",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity($\"{InstrumentationNames.MediaInfo}.{name}\")\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t\t?.SetMetricName(InstrumentationNames.MediaInfo);\n\n\t\tprivate Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>",
            "private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);",
            "private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}",
            "activity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}\n}",
            "?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}\n}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Extensions/Telemetry/ActivityExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "where T : IQueueTask\n\t\t=>\n\t\tactivity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);",
            "=>\n\t\tactivity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);",
            "activity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\n\n\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)",
            "?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\n\n\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)\n\t\twhere T : IQueueTask",
            "where T : IQueueTask\n\t\t=>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\n}\n#nullable restore",
            "=>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Matches 2 keywords: OpenTelemetry, middleware",
          "matching_patterns": [
            "middleware",
            "Pattern: OpenTelemetry",
            "Import: DocuSign.CLM.Monitoring.HttpModules",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: DocuSign.Monitoring",
            "Pattern: Monitoring",
            "OpenTelemetry",
            "Pattern: Activity.Current",
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tif (!string.IsNullOrEmpty(context.Request[Constants.QueryStringParameters.SAMLResponse]))"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (15 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes)), Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid); Contains method call: SetTag (15 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: StartActivity",
            "Pattern: OpenTelemetry",
            "Import: var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Pattern: ActivitySource",
            "Import: var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Pattern: SetAttribute",
            "Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes))",
            "ActivitySource",
            "SetTag"
          ],
          "context_snippets": [
            "using var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();",
            "?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();\n\t\t\tvar statusMessages = new Messages();",
            "{\n\t\t\t\tattrvm = WebUtility.HtmlDecode(attrvm);\n\t\t\t\tvar attributes = attrvm.ToObject<AttributesViewModel>();\n\t\t\t\tsaveActivity?.SetTag(\"docusign.document.id\", attributes.docUid);\n\n\t\t\t\tvar document = LoadAndValidateDocument(attributes.docUid);",
            "using var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\tif (!HasSufficientRightsToView())",
            "using var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry",
            "using var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "using var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tFileUploadInfo fileUploadInfo = null;"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "public virtual void BeginRequest(HttpContext httpContext)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n\n\t\t\tif (httpContext.Handler is MvcHandler)\n\t\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "AttemptEventSource.Emit(counterInstanceName);\n\n#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif",
            "#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif\n\n\t\t\tStopwatch sw = Stopwatch.StartNew();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Controls/FormExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (10 occurrences); Contains method call: SetTag (10 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "{\n               tag.MergeAttribute(\"id\", id);\n           }\n           SetTagContent(tag, text);\n       }\n\n       private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)",
            "private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)\n       {\n           tag.MergeAttributes(attributes);\n           SetTagContent(tag, text);\n       }\n\n       private static void ConfigureAtlasImageTag(TTagBuilder tag, string spriteClassName, string additionalClassName)",
            "{\n           tag.ApplyHtmlAttributes(htmlAttributes);\n           tag.AddCssClass(\"LinkButton\");\n           SetTagContent(tag, string.IsNullOrWhiteSpace(text) ? WebCommonUI.Resources.Common.Close : text);\n           if (!tag.Attributes.ContainsKey(\"onclick\"))\n           {\n               tag.Attributes.Add(\"onclick\", \"CloseWindoid();return false;\");",
            "}\n           }, TTagRenderMode.SelfClosing);\n\n           SetTagContent(tag, imageHtml);\n       }\n\n       private static THtml BuildAtlasMetadataField(THtmlHelper html, string name, Enums.DataType fieldType, List<string> allowedValues, string value, CultureInfo culture)",
            "div.ApplyHtmlAttributes(htmlAttributes);\n           div.AddCssClass(\"atlasfield\");\n           div.Attributes.Add(\"id\", $\"{member.Member.Name}Field\");\n           SetTagContent(div, labelHtml, controlHtml);\n       }\n\n       private static void ConfigureFaUxFieldFor<TModel, TValue>(TTagBuilder div, Expression<Func<TModel, TValue>> expression, object htmlAttributes, THtml labelHtml, THtml controlHtml)",
            "t.AddCssClass(\"theme_primary-dark_background-color\");\n           });\n\n           SetTagContent(div, icon, controlHtml, labelHtml, spanLine);\n       }\n\n       private static TTagBuilder BuildLabel(string name, string displayName)",
            "var tag = new TTagBuilder(\"label\");\n           tag.Attributes[\"for\"] = name;\n           tag.AddCssClass(AtlasLabelName);\n           SetTagContent(tag, displayName);\n           return tag;\n       }",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, string content)\n       {\n#if NETFRAMEWORK\n           tag.SetInnerText(content);",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, THtml htmlContent)\n       {\n#if NETFRAMEWORK\n           tag.InnerHtml = htmlContent.ToHtmlString();",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, params THtml[] htmlContents)\n       {\n#if NETFRAMEWORK\n           using (var writer = new StringWriter())"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private static void OnPostRequestHandlerExecute(HttpContext context)\n\t{\n\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\tif (HasSession(context))\n\t\t{\n\t\t\tLogSessionSize(context.Session);"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowScopeEvents/WorkflowScopeEventsController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry",
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowActivities/WorkflowActivitiesController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowDefinition/WorkflowDefinitionController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Contains method call: SetTag (4 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/OpenXmlExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "return sdtElement.SdtProperties.GetFirstChild<Tag>().Val.Value;\n        }\n\n        public static void SetTag(this SdtElement sdtElement, string tag)\n        {\n            if (sdtElement == null) return;\n            if (sdtElement.SdtProperties == null) sdtElement.SdtProperties = new SdtProperties();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (7 occurrences); Direct match for 'Activity.SetTag' (6 occurrences); Contains method call: SetTag (7 times)",
          "matching_patterns": [
            "Activity.SetTag",
            "SetTag"
          ],
          "context_snippets": [
            "namespace ADEXS.Core.Domain.Utilities;\npublic static class ActivityEnricher\n{\n\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\n\t{\n\t\tif (activity == null)\n\t\t{",
            "{\n\t\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\n\t\t\treturn;\n\t\t}",
            "var account = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(account))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\n\t\t\treturn;\n\t\t}",
            "var userId = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(userId))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\n\t\t}\n\t}\n#else",
            "var session = context == null ? null : GetSession(context);\n\t\tif (!string.IsNullOrEmpty(session?.Id))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\n\t\t}\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/MergeType/RepeatingSectionMergeType.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "mergeType.Merge();\n                }\n\n                newSection.SetTag(string.Empty);\n            }\n\n            _sdtElement.Remove();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/Workflow/Client/WorkflowV1GrpcClient.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (54 times)",
          "matching_patterns": [
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid)",
            "Pattern: OpenTelemetry",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid)",
            "Pattern: ActivitySource",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\n\t\t\t\tactivityUid.ToString())",
            "Import: DocuSign.CLM.Monitoring",
            "SetTag",
            "Pattern: StartActivity",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid)",
            "Import: OpenTelemetry.Trace",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString())",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)",
            "Pattern: Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString())",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid)",
            "Import: DocuSign.Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid)"
          ],
          "context_snippets": [
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "headers: GetHeaders(request.User.AccountId),\n\t\t\t\t\t\t\t\tcancellationToken: cancellationToken)));\n\n\t\t\t\tactivity?.SetTag(\n\t\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\t\tresponse.Definition.Uid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.\n\t\tvar serviceClient = GetWinsServiceClient(user.AccountId, instanceUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "object? callbackData = null)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\n\t\t\t\tactivityUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\n\n\t\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\n\n\t\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid);",
            "int activityExecutionCount)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "private Activity? StartActivity([CallerMemberName] string name = \"\") => _instrumentation?.ActivitySource\n\t\t?.StartActivity($\"{nameof(WorkflowV1GrpcClient)}.{name}\", ActivityKind.Client)\n\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n\n\tprivate WinsService.WinsServiceClient GetWinsServiceClientByWorkItem(int accountId, Guid workItemUid)\n\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Import: OpenTelemetry.Metrics; Matches 2 keywords: OpenTelemetry, middleware",
          "matching_patterns": [
            "Config file: program.cs",
            "Pattern: Metrics",
            "Pattern: OpenTelemetry",
            "Import: OpenTelemetry.Metrics",
            "Pattern: Instrumentation",
            "Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "OpenTelemetry",
            "middleware"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
          "matching_patterns": [
            "Import: ADEXS.Caching.OpenTelemetry.Extensions",
            "Import: ADEXS.CqlCorePersistence.OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry",
            "Import: OpenTelemetry.Exporter",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: ConfigureServices",
            "Config file: startup.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/ICoreInstrumentationLifetimeService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: TracerProvider",
            "Pattern: MeterProvider",
            "Config file: icoreinstrumentationlifetimeservice.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/CoreInstrumentationLifetimeService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: TracerProvider",
            "Pattern: MeterProvider",
            "Config file: coreinstrumentationlifetimeservice.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: Activity.Current",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [
            "exception = allError[allError.Length - 1];\n\t\t\t}\n\t\t\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\n\t\t\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\n\t\t\t_log.ErrorNoPII(message, exception);"
          ],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types/Constants.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "file contains configuration or constants; contains telemetry symbol: ADEXS.Core.Types.Constants.Forms.EmitMetafieldInputAttribute(System.Guid); has relationship to telemetry symbol: ADEXS.Core.Types.Constants.Forms.EmitMetafieldInputAttribute(System.Guid); contains telemetry symbol: ADEXS.Core.Types.Constants.Forms.EmitMetagroupLabelElement(System.Guid); symbol is application entry point or middleware; contains HTTP-related constant: ADEXS.Core.Types.Constants.CustomHeaders; contains HTTP-related constant: ADEXS.Core.Types.Constants.DocuSignCustomHeaders; contains HTTP-related constant: ADEXS.Core.Types.Constants.ActCustomHeaders; contains HTTP-related constant: ADEXS.Core.Types.Constants.HttpContextCache; contains HTTP-related constant: ADEXS.Core.Types.Constants.HttpContextCookie; contains telemetry symbol: ADEXS.Core.Types.Constants.SystemMetadataGroupNames; contains telemetry symbol: ADEXS.Core.Types.Constants.HtmlAttributes; contains HTTP-related constant: ADEXS.Core.Types.Constants.Allocation; contains telemetry symbol: ADEXS.Core.Types.Constants.FileDataSource.UploadSourceAttribute; contains telemetry symbol: ADEXS.Core.Types.Constants.MetadataHtmlAttributes; contains telemetry symbol: ADEXS.Core.Types.Constants.AgreementDetailsImpliedMetadataGuids",
          "matching_patterns": [
            "configuration_pattern",
            "telemetry_symbol_ADEXS.Core.Types.Constants.Forms.EmitMetafieldInputAttribute(System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Types.Constants.Forms.EmitMetagroupLabelElement(System.Guid)",
            "application_entry_point",
            "http_constant_ADEXS.Core.Types.Constants.CustomHeaders",
            "http_constant_ADEXS.Core.Types.Constants.DocuSignCustomHeaders",
            "http_constant_ADEXS.Core.Types.Constants.ActCustomHeaders",
            "http_constant_ADEXS.Core.Types.Constants.HttpContextCache",
            "http_constant_ADEXS.Core.Types.Constants.HttpContextCookie",
            "telemetry_symbol_ADEXS.Core.Types.Constants.SystemMetadataGroupNames",
            "telemetry_symbol_ADEXS.Core.Types.Constants.HtmlAttributes",
            "http_constant_ADEXS.Core.Types.Constants.Allocation",
            "telemetry_symbol_ADEXS.Core.Types.Constants.FileDataSource.UploadSourceAttribute",
            "telemetry_symbol_ADEXS.Core.Types.Constants.MetadataHtmlAttributes",
            "telemetry_symbol_ADEXS.Core.Types.Constants.AgreementDetailsImpliedMetadataGuids"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types/Enums.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<System.ComponentModel.DescriptionAttribute>.FirstOrDefault<System.ComponentModel.DescriptionAttribute>(); has relationship to telemetry symbol: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/ApplicationSettings.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "file is part of web application infrastructure; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware",
          "matching_patterns": [
            "web_application_pattern",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/ApplicationSettingsWrapper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "file is part of web application infrastructure; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware",
          "matching_patterns": [
            "web_application_pattern",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Attributes/AttributeManagementService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GroupMetadataIntoAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetMetadataGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository.GetMetadataFieldsByMetadataGroupUid(int, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.MetadataFieldToMetadataInstance(ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GroupMetadataIntoAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>.ToList<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroupFromMetadataInstance(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroup(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Guid?, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAISuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetRequiredMetadataInstances(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, bool); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldService.LoadByMetadataGroupUid(System.Guid, int, bool); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.Save(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Guid?, System.Guid, System.Guid, string, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, ADEXS.Core.Domain.DataReview.DataReviewValidationContext); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetRequiredMetadataInstances(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, bool); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.UpdateStandardAttributesStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.ToList<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.RemoveAttributeGroupFromDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository.AttributesShouldBeReadOnly(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SendFeedback(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Globalization.CultureInfo); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.FirstOrDefault<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(System.Func<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, bool>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetFeedbackValue(System.Globalization.CultureInfo, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.IDataReviewStandardAttributeHelper.NormalizeValue(string, ADEXS.Core.Types.Enums.AttributeFieldType, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseUpdatedAttributesForStagedMetadataUpdate(System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>.ToList<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseNotUpdatedAttributesForStagedMetadataUpdate(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<System.Guid, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>>.FirstOrDefault<System.Linq.IGrouping<System.Guid, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.ValidateValueConstraints(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.MapObjectType(ADEXS.Core.Domain.MetadataLoader.Models.Type?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.MapObjectType(ADEXS.Core.Domain.MetadataLoader.Models.Type?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SetMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.FirstOrDefault<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(System.Func<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, bool>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAllowedValues(ADEXS.Core.Domain.DataReview.Models.AttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ref System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata); has relationship to telemetry symbol: ADEXS.Core.Domain.SmartAgreement.IAIMetadataHelper.GetAllowedValues(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, string, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>, string, string, int); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStandardAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, string); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardFieldHelper.GetAttributeReviewData(System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.ToList<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadata, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadata, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.IDataReviewFieldHelper.GetAttributeReviewData(System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedSet(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithValues(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Linq.IOrderedEnumerable<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Linq.IGrouping<int, ADEXS.Core.Domain.Model.Metadata>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithValues(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Linq.IOrderedEnumerable<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Linq.IGrouping<int, ADEXS.Core.Domain.Model.Metadata>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithoutValues(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroup(string, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewData>); has relationship to telemetry symbol: ADEXS.Core.Domain.SmartAgreement.Utilities.LocalizationUtility.LocalizeMetadataName(string); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.LogAttributeHistory(ADEXS.Core.Domain.Model.UserAccount, string, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CanUpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository.AttributesShouldBeReadOnly(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetMetadataGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.MetadataFieldToMetadataInstance(ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GroupMetadataIntoAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroupFromMetadataInstance(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroup(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Guid?, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAISuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetRequiredMetadataInstances(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, bool)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.Save(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Guid?, System.Guid, System.Guid, string, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, ADEXS.Core.Domain.DataReview.DataReviewValidationContext)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.UpdateStandardAttributesStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.RemoveAttributeGroupFromDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SendFeedback(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetFeedbackValue(System.Globalization.CultureInfo, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseUpdatedAttributesForStagedMetadataUpdate(System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseNotUpdatedAttributesForStagedMetadataUpdate(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.ValidateValueConstraints(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.MapObjectType(ADEXS.Core.Domain.MetadataLoader.Models.Type?)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SetMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAllowedValues(ADEXS.Core.Domain.DataReview.Models.AttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ref System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStandardAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, string)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadata, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedSet(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithValues(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Linq.IOrderedEnumerable<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Linq.IGrouping<int, ADEXS.Core.Domain.Model.Metadata>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithoutValues(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroup(string, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewData>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.LogAttributeHistory(ADEXS.Core.Domain.Model.UserAccount, string, ADEXS.Core.Domain.Model.Document)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CanUpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.IAttributeManagementService"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/CoreDomainRegistry.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.SetHandlerLifetime(System.TimeSpan); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.Attributes.IAttributeDefinitionsCopyUtility>.Use<ADEXS.Core.Domain.Attributes.AttributeDefinitionsCopyUtility>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository>.Use<ADEXS.Core.Domain.Repository.MetadataRepository.MetadataGroupRepository>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.Persistence.Model.IMetadataGroupPersistence>.Use<ADEXS.Core.Domain.Persistence.Model.MetadataGroupPersistence>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.SmartAgreement.ISmartAgreementExecutionService>.Use<ADEXS.Core.Domain.SmartAgreement.SmartAgreementExecutionService>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.UnifiedRepository.IUnifiedRepositoryAttributeSyncService>.Use<ADEXS.Core.Domain.UnifiedRepository.UnifiedRepositoryAttributeSyncService>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.SmartAgreement.IAPRAIIngestionService>.Use<ADEXS.Core.Domain.SmartAgreement.APRAIIngestionService>(); has relationship to telemetry symbol: StructureMap.IRegistry.AddScopedConfigType<ADEXS.Core.Domain.FeatureFlags.IDocumentAttributesFeatureFlagsConfig>(string, string)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataProvider/CLMCustomAttributesDataReviewProvider.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider; contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseAttributeUpdates(out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.IsNullOrEmpty<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.Save(System.Guid, System.Guid, string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseMetadataFields(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, out ADEXS.Core.Domain.Model.Metadatas, out ADEXS.Core.Domain.Model.Metadatas); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.ToList<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.NewGroupOnTheDocument(System.Guid); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateMetadataPlaceHolderForGroup(System.Guid, string, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseRepeatingItems(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>.GroupBy<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), int>(System.Func<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), int>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCascadingSets(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildNonRepeatingMetadata(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsMarkedForDelete(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.LogFieldParsingMessage(string, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsCascadingSet(ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.Model.MetadataField>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsRepeatingField(ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetGroupSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Linq.IOrderedEnumerable<int>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetRepeatingMetadata(ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadatas); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataRepeating(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateNewRepeating((ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ADEXS.Core.Domain.Model.Metadata); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataObj(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCreatingNewMetadata(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsMarkedForDelete(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateMetadataValue(string, string, out string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateMetadataValue(string, string, out string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data)); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>.ToList<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>(); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>.Any<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>()",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseAttributeUpdates(out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.Save(System.Guid, System.Guid, string)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseMetadataFields(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, out ADEXS.Core.Domain.Model.Metadatas, out ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.NewGroupOnTheDocument(System.Guid)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateMetadataPlaceHolderForGroup(System.Guid, string, ADEXS.Core.Domain.Model.Document)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseRepeatingItems(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCascadingSets(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildNonRepeatingMetadata(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.LogFieldParsingMessage(string, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsCascadingSet(ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.Model.MetadataField>)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsRepeatingField(ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Guid)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetGroupSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Linq.IOrderedEnumerable<int>)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetRepeatingMetadata(ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataRepeating(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateNewRepeating((ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ADEXS.Core.Domain.Model.Metadata)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataObj(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCreatingNewMetadata(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsMarkedForDelete(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateMetadataValue(string, string, out string)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data))",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>)",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataReviewService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.IsNullOrEmpty<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.LoadAiSuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, string, System.Globalization.CultureInfo); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.FirstOrDefault<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(System.Func<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, bool>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.ToList<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.LoadAiSuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, string, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection)",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document)",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/SfMerge.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: System.Diagnostics.Stopwatch.StartNew(); has relationship to telemetry symbol: System.Diagnostics.Stopwatch.Reset(); has relationship to telemetry symbol: System.Diagnostics.Stopwatch.Restart(); has relationship to telemetry symbol: System.Diagnostics.Stopwatch.Restart(); has relationship to telemetry symbol: System.Xml.XmlElement.SetAttribute(string, string); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WINSManager.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: Monitoring = DocuSign.Monitoring, Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName), Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
          "matching_patterns": [
            "Import: Monitoring = DocuSign.Monitoring",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.LoadWorkItem(user, workItemUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.InfoNoPII(string.Format(\"SubmitWorkItem: WorkItemUid {0}, output {1}\", workItemUid, PII.Encode(output)))",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IVersionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, version.Uid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IRevisionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, revision.Uid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar result = new Legacy2Designer(new DefinitionReaderLegacy(oldDesign)).Convert(user)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tstring jwtToken = null",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(userAccount.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(userAccount.AccountId, sourceInstanceUid))\n\t\t\t{\n\t\t\t\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\n\t\t\t{\n\t\t\t\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar result = WINSClientLibrary.ExportWorkflowDefinition(user, workflowName, versionNumber, revisionNumber)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.VersionWorkflow(user, workflowName, sourceVersionNumber, sourceRevisionNumber, newVersionNumber, comment)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.VersionWorkflow(user, sourceVersionUid, sourceRevisionNumber, newVersionNumber, comment)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\n\t\t\t{\n\t\t\t\tbool isActivityExecutionLimitReached = Governor.IsActivityExecutionLimitReached(accountId, instanceUid, revisionUid, revisionCreatedDate, activityExecutionCount, out _)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\n\t\t\t\t{\n\t\t\t\t\tStartParameters startParameters = new StartParameters(user, xmlParam, sourceType, sourceId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\n\t\t\t\t{\n\t\t\t\t\tGuid result = WorkflowRepository.SendStartWorkflow(user, workflowName, sourceType, sourceId, xmlParam)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tGuid result = _StartWorkflow(user.AccountId, user.Uid, workflowName, xmlParam, sourceType, sourceId, instanceUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t{\n\t\t\t\t\tGuid result = _StartWorkflow(user.AccountId, revisionUid, startParameters, instanceUid)",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Controllers/WorkflowActivitiesController.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.Monitoring, Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid), Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
          "matching_patterns": [
            "Import: DocuSign.Monitoring",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope(\"AccountId: {AccountId}, UserAccountUid: {UserAccountUid}\", accountId, userAccountUid))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: StartActivity"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 90,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Config file: program.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 90,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Config file: program.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService/Telemetry/MetricsEmitters/AdvancedInsightsMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/MimeDetectorMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/MediaInfoMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/VideoInfoMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/DetectTypeMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/ActIntegration/Client/ActIntegrationClient.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2Async(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequest(ADEXS.Core.Domain.Model.UserAccount, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.GetHttpClient(); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.GetTokenScopesForHttpMethod(System.Net.Http.HttpMethod, ADEXS.ActIntegration.ActAccountInfo); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.AddDefaultRequestHeaders(ADEXS.ActIntegration.ActAccountInfo, string, System.Net.Http.HttpClient, string, string, string)",
          "matching_patterns": [
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2Async(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool)",
            "telemetry_relationship",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool)",
            "telemetry_relationship",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequest(ADEXS.Core.Domain.Model.UserAccount, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon)",
            "telemetry_relationship",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.GetHttpClient()",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.GetTokenScopesForHttpMethod(System.Net.Http.HttpMethod, ADEXS.ActIntegration.ActAccountInfo)",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.AddDefaultRequestHeaders(ADEXS.ActIntegration.ActAccountInfo, string, System.Net.Http.HttpClient, string, string, string)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients/DacDocGenApiClient/Api/GenApi.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfo(string, DacDocGenApiClient.Model.GenerateDocumentRequest); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfoAsync(string, DacDocGenApiClient.Model.GenerateDocumentRequest, System.Threading.CancellationToken); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfo(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfoAsync(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest, System.Threading.CancellationToken); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfo(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfoAsync(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?, System.Threading.CancellationToken)",
          "matching_patterns": [
            "http_constant_DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfo(string, DacDocGenApiClient.Model.GenerateDocumentRequest)",
            "http_constant_DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfoAsync(string, DacDocGenApiClient.Model.GenerateDocumentRequest, System.Threading.CancellationToken)",
            "http_constant_DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfo(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest)",
            "http_constant_DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfoAsync(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest, System.Threading.CancellationToken)",
            "http_constant_DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfo(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?)",
            "http_constant_DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfoAsync(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?, System.Threading.CancellationToken)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients/DacDocGenApiClient/Client/ApiClient.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: DacDocGenApiClient.Client.CustomJsonCodec.Deserialize<T>(System.Net.Http.HttpResponseMessage); contains HTTP-related constant: DacDocGenApiClient.Client.CustomJsonCodec.Deserialize(System.Net.Http.HttpResponseMessage, System.Type); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.NewRequest(System.Net.Http.HttpMethod, string, DacDocGenApiClient.Client.RequestOptions, DacDocGenApiClient.Client.IReadableConfiguration); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.InterceptRequest(System.Net.Http.HttpRequestMessage); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.InterceptResponse(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.ToApiResponse<T>(System.Net.Http.HttpResponseMessage, object, System.Uri); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.Exec<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.ExecAsync<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration, System.Threading.CancellationToken)",
          "matching_patterns": [
            "http_constant_DacDocGenApiClient.Client.CustomJsonCodec.Deserialize<T>(System.Net.Http.HttpResponseMessage)",
            "http_constant_DacDocGenApiClient.Client.CustomJsonCodec.Deserialize(System.Net.Http.HttpResponseMessage, System.Type)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.NewRequest(System.Net.Http.HttpMethod, string, DacDocGenApiClient.Client.RequestOptions, DacDocGenApiClient.Client.IReadableConfiguration)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.InterceptRequest(System.Net.Http.HttpRequestMessage)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.InterceptResponse(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.ToApiResponse<T>(System.Net.Http.HttpResponseMessage, object, System.Uri)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.Exec<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.ExecAsync<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration, System.Threading.CancellationToken)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol/obj/Debug/net48/docusign/workflow/wins/v1alpha1/WinsModels.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.WriteTagAndValue(ref Google.Protobuf.WriteContext, string); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol/obj/Debug/net48/docusign/workflow/wins/v1alpha1/WinsService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.WriteTagAndValue(ref Google.Protobuf.WriteContext, string); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Client/WorkflowDesignRepository.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); contains HTTP-related constant: ADEXS.Atlas.Workflow.Client.WorkflowDesignRepository.GetWorkflowDesignApi(int, System.Guid, System.Net.Http.HttpClient, string)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "http_constant_ADEXS.Atlas.Workflow.Client.WorkflowDesignRepository.GetWorkflowDesignApi(int, System.Guid, System.Net.Http.HttpClient, string)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Adm/Mapping/AdmMapper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver; contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver.Resolve(ADEXS.Core.Domain.Model.Agreement, DocuSign.Adm.Api.Models.AgreementCreate, ADEXS.Core.Domain.Model.AgreementPeriod, DocuSign.Adm.Api.Models.TimeSpanUnits?, AutoMapper.ResolutionContext); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter; contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?)",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver",
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver.Resolve(ADEXS.Core.Domain.Model.Agreement, DocuSign.Adm.Api.Models.AgreementCreate, ADEXS.Core.Domain.Model.AgreementPeriod, DocuSign.Adm.Api.Models.TimeSpanUnits?, AutoMapper.ResolutionContext)",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter",
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AIConfiguration/ConfigurationService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "file contains configuration or constants; has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateAOMAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.GetAttributeGroups(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository.LoadByAccountId(int); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.SaveAttributeMapping(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMapping); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateClmAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository.LoadByUid(int, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateAOMAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.AgreementRepository.IAgreementFieldService.GetStandardFields(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.AgreementRepository.Tag?); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.CreateRuleModelMappingBasicDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.MetadataGroup, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsCustomAttributeSupported(ADEXS.Core.Domain.Model.MetadataField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsStandardAttributeSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.SmartAgreement.AIModelManagement.IAiModelManagement.GetAllowedModelItemsByAccount(ADEXS.Core.Domain.Model.Account); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.AgreementRepository.IAgreementFieldService.GetStandardFields(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.AgreementRepository.Tag?)",
          "matching_patterns": [
            "configuration_pattern",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.GetAttributeGroups(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.SaveAttributeMapping(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMapping)",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateClmAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateAOMAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.CreateRuleModelMappingBasicDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.MetadataGroup, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>)",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AIConfiguration/Utilities/DataTypeHelper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "file contains configuration or constants; has relationship to telemetry symbol: System.Collections.Generic.Dictionary<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Types.Enums.AttributeFieldType>.GetValueOrDefault<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Types.Enums.AttributeFieldType>(ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Types.Enums.AttributeFieldType); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsSupported(ADEXS.Core.Types.Enums.DataType, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsCustomAttributeSupported(ADEXS.Core.Domain.Model.MetadataField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsSupported(ADEXS.Core.Types.Enums.DataType, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsStandardAttributeSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.GetStandardAttributeDataType(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.GetStandardAttributeDataType(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField)",
          "matching_patterns": [
            "configuration_pattern",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsSupported(ADEXS.Core.Types.Enums.DataType, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType)",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsCustomAttributeSupported(ADEXS.Core.Domain.Model.MetadataField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsStandardAttributeSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.GetStandardAttributeDataType(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Aom/AomUtilities.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeCustomNameToDefaultDictionary(ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeDefaultToCustomNameDictionary(ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: LanguageExt.Prelude.Optional<ADEXS.Core.Domain.Model.MetadataGroup>(ADEXS.Core.Domain.Model.MetadataGroup?); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(System.Guid, ADEXS.Core.Domain.Model.MetadataFields); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementValueFieldUid(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: LanguageExt.Prelude.Optional<ADEXS.Core.Domain.Model.MetadataGroup>(ADEXS.Core.Domain.Model.MetadataGroup?); has relationship to telemetry symbol: LanguageExt.Prelude.Optional<ADEXS.Core.Domain.Model.MetadataGroup>(ADEXS.Core.Domain.Model.MetadataGroup?)",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeCustomNameToDefaultDictionary(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeDefaultToCustomNameDictionary(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(System.Guid, ADEXS.Core.Domain.Model.MetadataFields)",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementValueFieldUid(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AllocationUrl.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl; contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAllocationUrl(ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardingType); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetLogin(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetApiRegistration(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetTwoFactor(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetToken(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetExternalDataMap(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteExternalDataMap(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncLogin(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncApiRegistration(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SaveLoginLock(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteLoginLock(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveLogin(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAccountRecord(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveAccount(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncAccount(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncToken(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncTwoFactor(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncExternalDataMap(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardRequest(string); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncSoapAuthToken(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SiteWarmupPing()",
          "matching_patterns": [
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAllocationUrl(ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardingType)",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetLogin()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetApiRegistration()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetTwoFactor()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetToken()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetExternalDataMap()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteExternalDataMap()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncLogin()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncApiRegistration()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SaveLoginLock()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteLoginLock()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveLogin()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAccountRecord()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveAccount()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncAccount()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncToken()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncTwoFactor()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncExternalDataMap()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardRequest(string)",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncSoapAuthToken()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SiteWarmupPing()"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Attributes/AttributePanelService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributeGroupsNotInDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.MetadataGroup>.ToList<ADEXS.Core.Domain.Model.MetadataGroup>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateDocumentNameAndDescription(ADEXS.Core.Domain.Model.UserAccount, System.Guid, string, string); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>, string, string, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.CanUpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetStandardAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetAttributeGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.GetMetadataGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.SaveParty(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Party); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.FilterReadonlyFields(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.ShouldFilterReadonlyField(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, System.Collections.Generic.List<string>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.ShouldFilterReadonlyField(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, System.Collections.Generic.List<string>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributePanelService",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributeGroupsNotInDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateDocumentNameAndDescription(ADEXS.Core.Domain.Model.UserAccount, System.Guid, string, string)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>, string, string, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetStandardAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetAttributeGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.SaveParty(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Party)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.FilterReadonlyFields(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.ShouldFilterReadonlyField(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, System.Collections.Generic.List<string>)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.IAttributePanelService"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Attributes/AttributesManagementFramework.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeRegistry; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetAttributes(ADEXS.Core.Domain.Model.UserAccount, bool); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.VerifyAndAddMandatoryAttributes(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetUnsupportedAttributes(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetAttributes(ADEXS.Core.Domain.Model.UserAccount, bool); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.VerifyAndAddMandatoryAttributes(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.AddAttribute(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>, string); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.AddAttribute(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>, string); has relationship to telemetry symbol: System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>.Exists(System.Predicate<ADEXS.Core.Domain.Attributes.AttributeRegistry>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributesManagementFramework",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeRegistry",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetAttributes(ADEXS.Core.Domain.Model.UserAccount, bool)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetUnsupportedAttributes(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.VerifyAndAddMandatoryAttributes(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.AddAttribute(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>, string)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.IAttributesManagementFramework"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataReviewAttributeFilter.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.MetadataFieldHelper.GetAttributeType(ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.DataReview.MetadataFieldHelper.GetAttributeType(ADEXS.Core.Domain.Model.MetadataField); has relationship to telemetry symbol: System.Collections.Generic.Dictionary<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Domain.DataReview.MetadataFieldHelper.AttributeType>.GetValueOrDefault<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Domain.DataReview.MetadataFieldHelper.AttributeType>(ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Domain.DataReview.MetadataFieldHelper.AttributeType); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter; contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.MetadataField); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.IAttributeHelper<ADEXS.Core.Domain.Model.MetadataField>.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.BuildField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.IAttributeHelper<T>",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.MetadataFieldHelper.GetAttributeType(ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.BuildField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.IAttributeHelper<T>"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataReviewAttributeHelper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper; contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.ParseUpdatedAttributeAndUpdateAgreement(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Agreement, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetDecimalFromUpdatedValue(string, out decimal?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetNormalizedValueFromAgreement(ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, ADEXS.Core.Domain.Model.Agreement, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.AgreementRepository.IAgreementFieldService.GetStandardFields(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.AgreementRepository.Tag?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.NormalizeValue(string, ADEXS.Core.Types.Enums.AttributeFieldType, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryParseDateToUniversalDateComponent(string, out System.DateTime, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryParseDateToUniversalDateComponent(string, out System.DateTime, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetDecimalFromUpdatedValue(string, out decimal?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetBooleanFromUpdatedValue(string, out bool?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetClauseOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetAgreementPeriodOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AgreementPeriod); contains telemetry symbol: ADEXS.Core.Domain.DataReview.IDataReviewStandardAttributeHelper",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.ParseUpdatedAttributeAndUpdateAgreement(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Agreement, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetNormalizedValueFromAgreement(ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, ADEXS.Core.Domain.Model.Agreement, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.NormalizeValue(string, ADEXS.Core.Types.Enums.AttributeFieldType, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryParseDateToUniversalDateComponent(string, out System.DateTime, System.Globalization.CultureInfo)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetDecimalFromUpdatedValue(string, out decimal?)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetBooleanFromUpdatedValue(string, out bool?)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetClauseOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetAgreementPeriodOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AgreementPeriod)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.IDataReviewStandardAttributeHelper"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/EOS/Implementation/ExternalObjectsStorage.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); contains telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.Persistence.Model.IMetadataFieldPersistence.LoadByMetadataGroupName(int, string); contains telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Util.ServiceLocator.ServiceLocator.GetInstance<ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository>()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup()",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup()",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/AbstractServicedComponent.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: service invocation to start process,\n\t\t\t\t\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\n\t\t\t\t\t// using GetType().Assembly instead, which would provide correct release version.\n\t\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\t\tassembly: this.GetType().Assembly))\n\t\t\t\t\t\t\t.GetAwaiter().GetResult()",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: service invocation to start process,\n\t\t\t\t\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\n\t\t\t\t\t// using GetType().Assembly instead, which would provide correct release version.\n\t\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\t\tassembly: this.GetType().Assembly))\n\t\t\t\t\t\t\t.GetAwaiter().GetResult()",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Ems/EmsRestClient.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveDocumentIngestPayload),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveDocumentIngestPayload),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveCustomAttributeDefinition),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n                                                                nameof(FinalizeCustomAttributeDefinition),\n                                                                new ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\tnameof(UpdateDocumentIdOfAgreementDocument),\n\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/UnifiedRepository/UnifiedRepositoryIngestionService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document Permissions\")",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document Permissions\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessAttributes, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t{\n\t\t\tLog.InfoNoPII($\"Processing Document Attributes\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.AttributeSyncUsingIngestionService, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t{\n\t\t\tLog.InfoNoPII($\"Processing Document Attributes\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessHistory, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document History\")",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/GlobalSuppressions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 80,
          "reasoning": "Matches 2 keywords: OpenTelemetry, redirect",
          "matching_patterns": [
            "OpenTelemetry",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/GlobalSuppressions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 80,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Program.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication/Program.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/RequestFiltering/IncomingRequestFilteringMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        }
      ],
      "error": null,
      "execution_time": 4.288005113601685,
      "cache_hit": false
    },
    "batch_filtering": {
      "stage_name": "batch_filtering",
      "status": "StageStatus.COMPLETED",
      "result": [
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private void OnPostRequestHandlerExecute(object sender, EventArgs e)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\n\t\t\tLogSessionSize(HttpContext.Current?.Session);\n\t\t\t_performanceLog.SetSession(HttpContext.Current?.Session);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\n\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Matches 2 keywords: OpenTelemetry, middleware",
          "matching_patterns": [
            "middleware",
            "Pattern: OpenTelemetry",
            "Import: DocuSign.CLM.Monitoring.HttpModules",
            "Pattern: Instrumentation",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: DocuSign.Monitoring",
            "Pattern: Monitoring",
            "OpenTelemetry",
            "Pattern: Activity.Current",
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private static void OnPostRequestHandlerExecute(HttpContext context)\n\t{\n\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\tif (HasSession(context))\n\t\t{\n\t\t\tLogSessionSize(context.Session);"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "AttemptEventSource.Emit(counterInstanceName);\n\n#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif",
            "#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif\n\n\t\t\tStopwatch sw = Stopwatch.StartNew();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (7 occurrences); Direct match for 'Activity.SetTag' (6 occurrences); Contains method call: SetTag (7 times)",
          "matching_patterns": [
            "Activity.SetTag",
            "SetTag"
          ],
          "context_snippets": [
            "namespace ADEXS.Core.Domain.Utilities;\npublic static class ActivityEnricher\n{\n\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\n\t{\n\t\tif (activity == null)\n\t\t{",
            "{\n\t\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\n\t\t\treturn;\n\t\t}",
            "var account = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(account))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\n\t\t\treturn;\n\t\t}",
            "var userId = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(userId))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\n\t\t}\n\t}\n#else",
            "var session = context == null ? null : GetSession(context);\n\t\tif (!string.IsNullOrEmpty(session?.Id))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\n\t\t}\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowScopeEvents/WorkflowScopeEventsController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times); Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry",
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowActivities/WorkflowActivitiesController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowDefinition/WorkflowDefinitionController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Contains method call: SetTag (4 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: Activity.Current",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [
            "exception = allError[allError.Length - 1];\n\t\t\t}\n\t\t\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\n\t\t\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\n\t\t\t_log.ErrorNoPII(message, exception);"
          ],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
          "matching_patterns": [
            "Import: ADEXS.Caching.OpenTelemetry.Extensions",
            "Import: ADEXS.CqlCorePersistence.OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry",
            "Import: OpenTelemetry.Exporter",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: ConfigureServices",
            "Config file: startup.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Import: OpenTelemetry.Metrics; Matches 2 keywords: OpenTelemetry, middleware",
          "matching_patterns": [
            "Config file: program.cs",
            "Pattern: Metrics",
            "Pattern: OpenTelemetry",
            "Import: OpenTelemetry.Metrics",
            "Pattern: Instrumentation",
            "Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "OpenTelemetry",
            "middleware"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Controllers/WorkflowActivitiesController.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.Monitoring, Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid), Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
          "matching_patterns": [
            "Import: DocuSign.Monitoring",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope(\"AccountId: {AccountId}, UserAccountUid: {UserAccountUid}\", accountId, userAccountUid))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: StartActivity"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/RequestFiltering/IncomingRequestFilteringMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 70,
          "reasoning": "Matches 2 keywords: middleware, redirect",
          "matching_patterns": [
            "middleware",
            "redirect"
          ],
          "context_snippets": [],
          "confidence": 0.6
        }
      ],
      "error": null,
      "execution_time": 79.55701303482056,
      "cache_hit": false
    },
    "final_selection": {
      "stage_name": "final_selection",
      "status": "StageStatus.COMPLETED",
      "result": [
        [
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
            "content": "\ufeffusing System.Diagnostics;\nusing System.Linq;\n\n\n#if NETFRAMEWORK\nusing System.Web;\n#else\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Http.Features;\n#endif\n\nusing DocuSign.Monitoring;\n\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\n\nnamespace ADEXS.Core.Domain.Utilities;\npublic static class ActivityEnricher\n{\n\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\n\t{\n\t\tif (activity == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tSetAccountIdTag(activity);\n\t\tSetUserIdTag(activity);\n\t\tSetSessionIdTag(activity, context);\n\t}\n\n\tprivate static void SetAccountIdTag(Activity activity)\n\t{\n\t\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\n\t\t\treturn;\n\t\t}\n\n\t\tvar dataPointCollection = ServiceContext.Current?.DataPointCollection?.GetDataPointValues(DataPoint.AccountId);\n\t\tif (dataPointCollection != null)\n\t\t{\n\t\t\tvar account = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(account))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static void SetUserIdTag(Activity activity)\n\t{\n\t\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\n\t\t\treturn;\n\t\t}\n\n\t\tvar dataPointCollection = ServiceContext.Current?.DataPointCollection?.GetDataPointValues(DataPoint.UserId);\n\t\tif (dataPointCollection != null)\n\t\t{\n\t\t\tvar userId = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(userId))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\n#if NETFRAMEWORK\n\tprivate static void SetSessionIdTag(Activity activity, HttpContext context)\n\t{\n\t\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\n\t\t}\n\t}\n#else\n\tprivate static void SetSessionIdTag(Activity activity, HttpContext context)\n\t{\n\t\tvar session = context == null ? null : GetSession(context);\n\t\tif (!string.IsNullOrEmpty(session?.Id))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\n\t\t}\n\t}\n\n\tprivate static ISession GetSession(HttpContext context)\n\t{\n\t\tvar sessionFeature = context?.Features?.Get<ISessionFeature>();\n\t\treturn sessionFeature == null ? null : context.Session;\n\t}\n#endif\n\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (7 occurrences); Direct match for 'Activity.SetTag' (6 occurrences); Contains method call: SetTag (7 times)",
            "search_strategy": "keyword",
            "matching_patterns": [
              "Activity.SetTag",
              "SetTag"
            ],
            "is_main_file": true
          }
        ],
        "Batch 1 (ProfileModule.cs): \u2022 ProfileModule implements IHttpModule, giving it access to every HTTP request/response that passes through the web application when the module is registered in Web.config.  \n\u2022 The file already references DocuSign.CLM.Monitoring and DocuSign.Monitoring, indicating existing Activity/Span infrastructure that can be extended by simply calling Activity.Current?.SetTag(...) (or the library\u2019s equivalent).  \n\u2022 Within EndRequest (or similar) logic we can read:\n  \u2013 Request.Headers[\"Referer\"] \u2192 add attribute HTTP_REFERER  \n  \u2013 Response.Headers[\"Location\"] \u2192 add attribute HTTP_RESPONSE_REDIRECT_LOCATION  \n  and attach them to the active span for the request.  \n\u2022 Because IHttpModule executes for most (potentially all) requests but is not necessarily the single global entry-point (there might be another higher-level module or global telemetry handler), it is rated STRATEGIC rather than MOST_STRATEGIC.  \n\u2022 It can fully satisfy the requirement on its own, so it is a viable patch candidate; however, in case a more central module exists elsewhere, this is marked as SELECT_AS_FALLBACK.\nBatch 2 (BaseApiHandler.cs): \u2022 BaseApiHandler implements IHttpHandler and is the common superclass for legacy \u201c*.ashx\u201d API endpoints. Every request that goes through these handlers executes BaseApiHandler.ProcessRequest, where existing DocuSign-specific monitoring code and EventSource attributes are already present. This means the file already participates in span/Activity creation and has direct access to:  \n  \u2013 HttpContext.Request.Headers  \u279c can read the Referer header  \n  \u2013 HttpContext.Response.Headers \u279c can read/inspect the Location header before returning a redirect.  \n  Therefore the two required span attributes can be added here with minimal code (Activity.Current?.SetTag(...)).  \n\n\u2022 While not the absolute root of the entire web application (e.g., not Global.asax or middleware), it is still a shared base class that covers a wide surface area of API traffic, making it a STRATEGIC location.  \n\n\u2022 A more global file might exist elsewhere, so this file is chosen as a fallback rather than the primary candidate.\nBatch 3 (LogAsyncRequestHttpMiddleware.cs): \u2022 The file is an ASP.NET Core middleware that executes on every HTTP request handled by the GateKeeper web app. It already has access to both HttpContext.Request and HttpContext.Response, so it can read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"].  \n\u2022 The middleware inherits from AbstractLogRequestHttpMiddleware and is already responsible for span / event-source logging (\u201cKazMon\u201d). Therefore, the current Activity / Span is available and the code is the natural place to call Activity.Current?.SetTag(..) (or equivalent) to add the two required attributes.  \n\u2022 Because this middleware runs once per request and is reused across the service, it is a strategic location (STRATEGIC). It is not the single global entry point for every CLM application (hence not MOST_STRATEGIC), but still covers all requests for this service.  \n\u2022 The file alone is sufficient; no other files are needed to fulfil the requirement. Therefore it is a good fallback choice if no more central startup / global instrumentation file is selected.\nBatch 4 (LogAsyncRequestHttpMiddleware.cs): \u2022 The file is an ASP.NET Core middleware that executes for every incoming HTTP request.  \n\u2022 It already references System.Diagnostics and OpenTelemetry semantic conventions, indicating active span instrumentation.  \n\u2022 Within the Invoke/InvokeAsync method (not shown in preview but characteristic of middleware), it has access to HttpContext.Request and HttpContext.Response, making it straightforward to set Activity.Current?.SetTag(\"HTTP_REFERER\", ctx.Request.Headers[\"Referer\"]) and a similar tag for the redirect \u201cLocation\u201d response header.  \n\u2022 Because middleware sits early in the pipeline, adding these attributes here automatically enriches all HTTP request spans across the application.  \n\u2022 This meets the requirement without touching individual controllers or other layers, satisfying the \u201csingle-file, minimal change\u201d rule.\n\nHence, the file can directly close the telemetry gap and is strategically positioned, so it is selected as the primary patch target.\nBatch 5 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware is an ASP.NET Core middleware that runs for every web request in the CLM allocation service.  \n\u2022 The middleware already has access to the incoming HttpContext, making it straightforward to read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"].  \n\u2022 Middleware has direct access to Activity/Span context (the class inherits from AbstractLogRequestHttpMiddleware, whose purpose is to create/augment monitoring spans). Therefore it can easily set span attributes on Activity.Current or equivalent.  \n\u2022 Because this middleware sits in the pipeline for all requests, adding the two header attributes here will automatically cover \u201call CLM web app HTTP request spans,\u201d satisfying the requirement without touching multiple files.  \n\u2022 While a global application entry point could be considered \u201cmost strategic,\u201d this middleware is still high-leverage and no more central file is presented in this group. Thus it is the best available single-file solution.\nBatch 6 (ProfileMiddleware.cs): \u2022 ProfileMiddleware is an ASP-NET Core middleware that runs for every incoming HTTP request and therefore executes inside the lifetime of the standard ASP.NET Core server Activity (span).  \n\u2022 From inside this middleware we have full access to HttpContext.Request.Headers and, after the downstream pipeline completes, HttpContext.Response.Headers, which lets us read both the Referer and any redirect Location header.  \n\u2022 The file already references DocuSign.CLM.Monitoring and is likely already interacting with Activity/Span infrastructure; adding two Activity.Current?.SetTag() (or equivalent) calls is straightforward and does not require touching other files.  \n\u2022 Because middleware affects all requests but is not the single global host entry point, it is considered STRATEGIC (not MOST_STRATEGIC).  \n\u2022 No other files are included in the group, so this middleware is the best place to satisfy the telemetry requirement with minimal surface area.\nBatch 7 (ScmLogAsyncRequestHttpMiddleware.cs): \u2022 ScmLogAsyncRequestHttpMiddleware sits in the ASP.NET Core pipeline and already performs request logging/telemetry via IServiceInstrumentation and AbstractLogRequestHttpMiddleware.  \n\u2022 Because every incoming HTTP request passes through this middleware, it has access to HttpContext.Request.Headers and can also inspect/modify the response once the downstream pipeline completes. Therefore it can easily add the required span attributes (HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION) to the current Activity/Span.  \n\u2022 The middleware is strategic but not the highest-level entry point (e.g., not Program.cs or a global instrumentation filter), so it is classified as STRATEGIC rather than MOST_STRATEGIC.  \n\u2022 It can fully meet the requirement by adding two lines that set tags on the current Activity, so it is worth selecting, but if a more central file appears later it could be preferred. Thus it is marked SELECT_AS_FALLBACK.\nBatch 8 (MvcAuditedRequestAttribute.cs): \u2022 MvcAuditedRequestAttribute is an MVC ActionFilterAttribute that executes on every controller action where it is registered (often globally).  \n\u2022 The file already references DocuSign-specific monitoring libraries, indicating existing span/activity creation or augmentation logic.  \n\u2022 Inside OnActionExecuting / OnActionExecuted (or similar), the code has access to HttpContext so it can read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"].  \n\u2022 Therefore we can easily extend the existing instrumentation in this filter to add the required span attributes (Activity.Current?.SetTag).  \n\u2022 Because the filter runs for most or all web requests, it is strategic, though not as foundational as Global.asax; hence STRATEGIC.  \n\u2022 A single modification here covers the requirement for all CLM web app HTTP spans, making it the best single-file solution, so SELECT_AS_PRIMARY.\nBatch 9 (ActivityEnricher.cs): \u2022 ActivityEnricher.cs is a central utility whose sole purpose is to enrich Activity/Span objects with common tags for every HTTP request.  \n\u2022 It already receives both Activity and HttpContext, so it has access to request headers and (via context.Response) response headers\u2014exactly what is needed to add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION.  \n\u2022 The file already calls activity.SetTag for other attributes, so extending it to add two more tags is a trivial, low-risk modification that will automatically propagate to all spans where SetTagsWithCommonFields is invoked.  \n\u2022 Because this is a shared enrichment utility, updating it covers every web request without touching individual controllers or middleware, making it one of the most strategic injection points in the codebase.\nBatch 10 (WorkflowScopeEventsController.Trace.cs): Cannot solve gap - The file WorkflowScopeEventsController.Trace.cs provides span instrumentation only for the WorkflowScopeEventsController. While it already adds tags to an Activity, its scope is limited to a single controller, not \u201call CLM web app HTTP request spans.\u201d To meet the requirement we would need a central piece of middleware or startup/hosting code that executes for every request so we can attach the HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers universally. Therefore, this controller-level instrumentation is too narrow and cannot close the telemetry gap.\nBatch 11 (WorkflowActivitiesController.Trace.cs): Cannot solve gap - The file WorkflowActivitiesController.Trace.cs contains controller-specific instrumentation that starts/ends activities only for WorkflowActivitiesController actions. While it already interacts with Activity/Telemetry APIs, it will cover just this single controller and not \u201call CLM web app HTTP request spans.\u201d Achieving the requirement (add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION for every request) needs a more global solution such as middleware, a base controller, or a common activity enricher. Therefore this file group cannot fully meet the telemetry gap and is not strategic enough to select.\nBatch 12 (WorkflowDefinitionController.Trace.cs): Cannot solve gap - WorkflowDefinitionController.Trace.cs adds controller-specific instrumentation. It only affects the WorkflowDefinitionController, not every HTTP request across the CLM web app. The telemetry requirement needs HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION to be attached to all web request spans, which is best handled in a global middleware or other central entry point. Therefore, this single, controller-level file is too narrow in scope to meet the requirement and is not strategic for implementing the needed headers across all requests.\nBatch 13 (ScmHttpApplication.cs): \u2022 ScmHttpApplication.cs is the ASP-NET HttpApplication (Global.asax) class for the CLM web app. Every request and response passes through this file\u2019s event handlers (e.g., Application_BeginRequest, Application_EndRequest, etc.).  \n\u2022 The file already references OpenTelemetry.Trace and DocuSign-specific monitoring helpers, indicating existing span/activity instrumentation that can be extended.  \n\u2022 Because it runs for every HTTP request, it provides access to both Request.Headers[\"Referer\"] and Response.Headers[\"Location\"], letting us set Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026) for all HTTP request spans.  \n\u2022 Adding the two attributes here fulfills the requirement globally without touching other controllers or middleware.  \n\u2022 As the global entry point, this is the MOST_STRATEGIC location; no additional files are needed.\nBatch 14 (Global.asax.cs): \u2022 Global.asax.cs is executed for every incoming HTTP request (Application_BeginRequest / Application_EndRequest), making it a universal interception point.  \n\u2022 The project already references OpenTelemetry.Trace, so Activity .Current will be populated for request spans created by the ASP.NET instrumentation.  \n\u2022 From this single file we can read Request.Headers[\"Referer\"] at the beginning of the request and Response.Headers[\"Location\"] just before the response is sent, then call Activity.Current?.SetTag(...) (or SetAttribute) to add the required span attributes.  \n\u2022 Because it is the global entry point, the change automatically covers all CLM web-app HTTP requests without touching individual controllers or middleware.  \n\nTherefore, Global.asax.cs alone can meet the telemetry requirement and is the most strategic location for the patch.\nBatch 15 (Startup.cs): Startup.cs is the single, central entry point where all ASP-NET Core middleware and OpenTelemetry services are configured. The file already references several OpenTelemetry and header-propagation extensions, indicating an existing tracing pipeline. By registering one small custom middleware (or configuring an ActivityEnrichment callback) inside Startup.cs, we can add the HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers to every incoming request span via Activity.Current?.SetTag(..). Because Startup.cs affects every HTTP request and is the canonical place for cross-cutting instrumentation, it is the most strategic spot to implement this telemetry requirement.\nBatch 16 (Program.cs): \u2022 Program.cs is the ASP.NET Core entry point that builds the host, registers services, and defines the HTTP request pipeline. Any custom middleware added here will execute for every incoming HTTP request and outgoing response.  \n\u2022 The telemetry requirement only needs one small piece of middleware (or an IHostedService filter) that, for each request/response pair, looks up the current Activity (span) produced by ASP.NET Core instrumentation and adds two attributes:\n  \u2011 HTTP_REFERER  = Request.Headers[\"Referer\"]  \n  \u2011 HTTP_RESPONSE_REDIRECT_LOCATION = Response.Headers[\"Location\"]  \n\n\u2022 Because Program.cs is where the pipeline is composed, it is the MOST_STRATEGIC place to insert that logic. No additional files are necessary.  \n\u2022 There is no evidence of a more central utility (e.g., Global.asax in classic ASP.NET) in this project because it is modern .NET 6/7 style; therefore Program.cs is the correct single-file, global solution.\nBatch 17 (WorkflowActivitiesController.cs): Cannot solve gap - \u2022 WorkflowActivitiesController.cs is an individual controller; any code change here would only affect endpoints served by this controller, not \u201call CLM web app HTTP request spans.\u201d  \n\u2022 The requirement demands a solution that is applied to every incoming HTTP request, which is normally done in middleware, a base controller, a global filter, or other central request-pipeline components.  \n\u2022 Although the file references DocuSign.Monitoring and may already interact with Activity/Span APIs, its scope is limited to this specific workflow activity area, making it an insufficient and non-strategic location to meet the global telemetry requirement.\nBatch 18 (LogAsyncRequestHttpMiddleware.cs): \u2022 The file is an ASP.NET Core middleware that already participates in request/response logging (inherits from ScmLogAsyncRequestHttpMiddleware).  \n\u2022 Middleware executes on every HTTP request for this service; it has direct access to HttpContext.Request.Headers and HttpContext.Response.Headers, so it can read Referer and Location headers and add them as span attributes on the current Activity/Span created by the base middleware.  \n\u2022 This makes it fully capable of closing the telemetry gap with minimal changes.  \n\u2022 Because it targets a single service (WorkflowDesign) rather than the entire CLM web app platform, it is classified as STRATEGIC rather than MOST_STRATEGIC.  \n\u2022 It is still a good instrumentation point if no higher-level, cross-service middleware is chosen, so it is marked as SELECT_AS_FALLBACK.\nBatch 19 (LogAsyncRequestHttpMiddleware.cs): \u2022 The requirement targets \u201call CLM web app HTTP request spans.\u201d A middleware that executes for every HTTP request is a natural interception point.  \n\u2022 LogAsyncRequestHttpMiddleware already performs request/response logging and inherits from ScmLogAsyncRequestHttpMiddleware, indicating existing telemetry hooks. Extending it to read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"] and attach them to the current Activity/span is straightforward.  \n\u2022 Because this middleware sits inside the ASP.NET Core pipeline and runs for every request, it is strategic for broad instrumentation, though not as globally pervasive as Startup.cs or a custom ActivitySource factory.  \n\u2022 No additional files are necessary; a small change inside this single middleware can fulfill the telemetry requirement while minimizing surface area.\nBatch 20 (IncomingRequestFilteringMiddleware.cs): \u2022 IncomingRequestFilteringMiddleware derives from OwinMiddleware, which is executed for every HTTP request that passes through the CLM OWIN pipeline.  \n\u2022 Inside this middleware both the incoming IOwinRequest (request headers, e.g., Request.Headers[\"Referer\"]) and the outgoing IOwinResponse (response headers, e.g., Response.Headers[\"Location\"]) are available before and after invoking the next component.  \n\u2022 The file already imports DocuSign.Monitoring and contains telemetry calls (TimingEventSource, Counter) indicating an existing instrumentation surface.  Therefore we can extend the middleware to look at Activity.Current (or the monitoring API already used) and add the required span attributes.  \n\u2022 Because it is middleware rather than a single global application file, its reach is broad but not absolutely universal; another more\u2010central entry point (Startup, Global.asax, base Monitoring middleware) could be an even better place.  Hence the solution is \u201cSTRATEGIC\u201d but not \u201cMOST_STRATEGIC.\u201d  \n\u2022 Given its ability to intercept every request, this file is an effective fallback location if no higher-level global handler is chosen elsewhere.\n\nThus, the group can solve the telemetry gap, is strategic, and should be kept as a fallback option."
      ],
      "error": null,
      "execution_time": 132.0614309310913,
      "cache_hit": false
    },
    "patch_generation": {
      "stage_name": "patch_generation",
      "status": "StageStatus.COMPLETED",
      "result": {
        "diff": "Added enrichment of every HTTP-span with two additional attributes\u2014`HTTP_REFERER` and `HTTP_RESPONSE_REDIRECT_LOCATION`.  \nThe change is isolated to the strategic enrichment helper `ActivityEnricher.cs`, guaranteeing the attributes are populated wherever `SetTagsWithCommonFields` is already invoked for incoming web requests.\n\nKey points:\n1. Introduced two small helper methods (`SetRefererTag` and `SetRedirectLocationTag`) that safely read the headers from `HttpContext` for both .NET Framework and .NET Core targets.\n2. Hooked those helpers into the existing `SetTagsWithCommonFields` flow, keeping the single-file modification principle intact.\n3. Used the exact attribute names required by the specification.\n\nNo new files or broader architectural changes were necessary.",
        "explanation": "--- a/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs\n+++ b/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs\n@@\n \\t\\tSetAccountIdTag(activity);\n \\t\\tSetUserIdTag(activity);\n \\t\\tSetSessionIdTag(activity, context);\n+\\t\\tSetRefererTag(activity, context);\n+\\t\\tSetRedirectLocationTag(activity, context);\n \\t}\n@@\n \\t}\\n\n+\n+\\tprivate static void SetRefererTag(Activity activity, HttpContext context)\\n\\t{\\n+\\t\\t// Capture the HTTP Referer header when present\\n+\\t\\tvar refererHeader = context?.Request?.Headers?[\\\"Referer\\\"];\\n+\\t\\tif (!string.IsNullOrEmpty(refererHeader))\\n+\\t\\t{\\n+\\t\\t\\tactivity.SetTag(\\\"HTTP_REFERER\\\", refererHeader.ToString());\\n+\\t\\t}\\n+\\t}\\n+\\n+\\tprivate static void SetRedirectLocationTag(Activity activity, HttpContext context)\\n+\\t{\\n+\\t\\t// Capture a redirect target (Location header) when the response indicates a redirect\\n+\\t\\tvar locationHeader = context?.Response?.Headers?[\\\"Location\\\"];\\n+\\t\\tif (locationHeader != null)\\n+\\t\\t{\\n+\\t\\t\\tvar location = locationHeader.ToString();\\n+\\t\\t\\tif (!string.IsNullOrEmpty(location))\\n+\\t\\t\\t{\\n+\\t\\t\\t\\tactivity.SetTag(\\\"HTTP_RESPONSE_REDIRECT_LOCATION\\\", location);\\n+\\t\\t\\t}\\n+\\t\\t}\\n+\\t}\\n #if NETFRAMEWORK\\n \\tprivate static void SetSessionIdTag(Activity activity, HttpContext context)\\n@@\n }\\n",
        "selection_reasoning": "Batch 1 (ProfileModule.cs): \u2022 ProfileModule implements IHttpModule, giving it access to every HTTP request/response that passes through the web application when the module is registered in Web.config.  \n\u2022 The file already references DocuSign.CLM.Monitoring and DocuSign.Monitoring, indicating existing Activity/Span infrastructure that can be extended by simply calling Activity.Current?.SetTag(...) (or the library\u2019s equivalent).  \n\u2022 Within EndRequest (or similar) logic we can read:\n  \u2013 Request.Headers[\"Referer\"] \u2192 add attribute HTTP_REFERER  \n  \u2013 Response.Headers[\"Location\"] \u2192 add attribute HTTP_RESPONSE_REDIRECT_LOCATION  \n  and attach them to the active span for the request.  \n\u2022 Because IHttpModule executes for most (potentially all) requests but is not necessarily the single global entry-point (there might be another higher-level module or global telemetry handler), it is rated STRATEGIC rather than MOST_STRATEGIC.  \n\u2022 It can fully satisfy the requirement on its own, so it is a viable patch candidate; however, in case a more central module exists elsewhere, this is marked as SELECT_AS_FALLBACK.\nBatch 2 (BaseApiHandler.cs): \u2022 BaseApiHandler implements IHttpHandler and is the common superclass for legacy \u201c*.ashx\u201d API endpoints. Every request that goes through these handlers executes BaseApiHandler.ProcessRequest, where existing DocuSign-specific monitoring code and EventSource attributes are already present. This means the file already participates in span/Activity creation and has direct access to:  \n  \u2013 HttpContext.Request.Headers  \u279c can read the Referer header  \n  \u2013 HttpContext.Response.Headers \u279c can read/inspect the Location header before returning a redirect.  \n  Therefore the two required span attributes can be added here with minimal code (Activity.Current?.SetTag(...)).  \n\n\u2022 While not the absolute root of the entire web application (e.g., not Global.asax or middleware), it is still a shared base class that covers a wide surface area of API traffic, making it a STRATEGIC location.  \n\n\u2022 A more global file might exist elsewhere, so this file is chosen as a fallback rather than the primary candidate.\nBatch 3 (LogAsyncRequestHttpMiddleware.cs): \u2022 The file is an ASP.NET Core middleware that executes on every HTTP request handled by the GateKeeper web app. It already has access to both HttpContext.Request and HttpContext.Response, so it can read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"].  \n\u2022 The middleware inherits from AbstractLogRequestHttpMiddleware and is already responsible for span / event-source logging (\u201cKazMon\u201d). Therefore, the current Activity / Span is available and the code is the natural place to call Activity.Current?.SetTag(..) (or equivalent) to add the two required attributes.  \n\u2022 Because this middleware runs once per request and is reused across the service, it is a strategic location (STRATEGIC). It is not the single global entry point for every CLM application (hence not MOST_STRATEGIC), but still covers all requests for this service.  \n\u2022 The file alone is sufficient; no other files are needed to fulfil the requirement. Therefore it is a good fallback choice if no more central startup / global instrumentation file is selected.\nBatch 4 (LogAsyncRequestHttpMiddleware.cs): \u2022 The file is an ASP.NET Core middleware that executes for every incoming HTTP request.  \n\u2022 It already references System.Diagnostics and OpenTelemetry semantic conventions, indicating active span instrumentation.  \n\u2022 Within the Invoke/InvokeAsync method (not shown in preview but characteristic of middleware), it has access to HttpContext.Request and HttpContext.Response, making it straightforward to set Activity.Current?.SetTag(\"HTTP_REFERER\", ctx.Request.Headers[\"Referer\"]) and a similar tag for the redirect \u201cLocation\u201d response header.  \n\u2022 Because middleware sits early in the pipeline, adding these attributes here automatically enriches all HTTP request spans across the application.  \n\u2022 This meets the requirement without touching individual controllers or other layers, satisfying the \u201csingle-file, minimal change\u201d rule.\n\nHence, the file can directly close the telemetry gap and is strategically positioned, so it is selected as the primary patch target.\nBatch 5 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware is an ASP.NET Core middleware that runs for every web request in the CLM allocation service.  \n\u2022 The middleware already has access to the incoming HttpContext, making it straightforward to read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"].  \n\u2022 Middleware has direct access to Activity/Span context (the class inherits from AbstractLogRequestHttpMiddleware, whose purpose is to create/augment monitoring spans). Therefore it can easily set span attributes on Activity.Current or equivalent.  \n\u2022 Because this middleware sits in the pipeline for all requests, adding the two header attributes here will automatically cover \u201call CLM web app HTTP request spans,\u201d satisfying the requirement without touching multiple files.  \n\u2022 While a global application entry point could be considered \u201cmost strategic,\u201d this middleware is still high-leverage and no more central file is presented in this group. Thus it is the best available single-file solution.\nBatch 6 (ProfileMiddleware.cs): \u2022 ProfileMiddleware is an ASP-NET Core middleware that runs for every incoming HTTP request and therefore executes inside the lifetime of the standard ASP.NET Core server Activity (span).  \n\u2022 From inside this middleware we have full access to HttpContext.Request.Headers and, after the downstream pipeline completes, HttpContext.Response.Headers, which lets us read both the Referer and any redirect Location header.  \n\u2022 The file already references DocuSign.CLM.Monitoring and is likely already interacting with Activity/Span infrastructure; adding two Activity.Current?.SetTag() (or equivalent) calls is straightforward and does not require touching other files.  \n\u2022 Because middleware affects all requests but is not the single global host entry point, it is considered STRATEGIC (not MOST_STRATEGIC).  \n\u2022 No other files are included in the group, so this middleware is the best place to satisfy the telemetry requirement with minimal surface area.\nBatch 7 (ScmLogAsyncRequestHttpMiddleware.cs): \u2022 ScmLogAsyncRequestHttpMiddleware sits in the ASP.NET Core pipeline and already performs request logging/telemetry via IServiceInstrumentation and AbstractLogRequestHttpMiddleware.  \n\u2022 Because every incoming HTTP request passes through this middleware, it has access to HttpContext.Request.Headers and can also inspect/modify the response once the downstream pipeline completes. Therefore it can easily add the required span attributes (HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION) to the current Activity/Span.  \n\u2022 The middleware is strategic but not the highest-level entry point (e.g., not Program.cs or a global instrumentation filter), so it is classified as STRATEGIC rather than MOST_STRATEGIC.  \n\u2022 It can fully meet the requirement by adding two lines that set tags on the current Activity, so it is worth selecting, but if a more central file appears later it could be preferred. Thus it is marked SELECT_AS_FALLBACK.\nBatch 8 (MvcAuditedRequestAttribute.cs): \u2022 MvcAuditedRequestAttribute is an MVC ActionFilterAttribute that executes on every controller action where it is registered (often globally).  \n\u2022 The file already references DocuSign-specific monitoring libraries, indicating existing span/activity creation or augmentation logic.  \n\u2022 Inside OnActionExecuting / OnActionExecuted (or similar), the code has access to HttpContext so it can read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"].  \n\u2022 Therefore we can easily extend the existing instrumentation in this filter to add the required span attributes (Activity.Current?.SetTag).  \n\u2022 Because the filter runs for most or all web requests, it is strategic, though not as foundational as Global.asax; hence STRATEGIC.  \n\u2022 A single modification here covers the requirement for all CLM web app HTTP spans, making it the best single-file solution, so SELECT_AS_PRIMARY.\nBatch 9 (ActivityEnricher.cs): \u2022 ActivityEnricher.cs is a central utility whose sole purpose is to enrich Activity/Span objects with common tags for every HTTP request.  \n\u2022 It already receives both Activity and HttpContext, so it has access to request headers and (via context.Response) response headers\u2014exactly what is needed to add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION.  \n\u2022 The file already calls activity.SetTag for other attributes, so extending it to add two more tags is a trivial, low-risk modification that will automatically propagate to all spans where SetTagsWithCommonFields is invoked.  \n\u2022 Because this is a shared enrichment utility, updating it covers every web request without touching individual controllers or middleware, making it one of the most strategic injection points in the codebase.\nBatch 10 (WorkflowScopeEventsController.Trace.cs): Cannot solve gap - The file WorkflowScopeEventsController.Trace.cs provides span instrumentation only for the WorkflowScopeEventsController. While it already adds tags to an Activity, its scope is limited to a single controller, not \u201call CLM web app HTTP request spans.\u201d To meet the requirement we would need a central piece of middleware or startup/hosting code that executes for every request so we can attach the HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers universally. Therefore, this controller-level instrumentation is too narrow and cannot close the telemetry gap.\nBatch 11 (WorkflowActivitiesController.Trace.cs): Cannot solve gap - The file WorkflowActivitiesController.Trace.cs contains controller-specific instrumentation that starts/ends activities only for WorkflowActivitiesController actions. While it already interacts with Activity/Telemetry APIs, it will cover just this single controller and not \u201call CLM web app HTTP request spans.\u201d Achieving the requirement (add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION for every request) needs a more global solution such as middleware, a base controller, or a common activity enricher. Therefore this file group cannot fully meet the telemetry gap and is not strategic enough to select.\nBatch 12 (WorkflowDefinitionController.Trace.cs): Cannot solve gap - WorkflowDefinitionController.Trace.cs adds controller-specific instrumentation. It only affects the WorkflowDefinitionController, not every HTTP request across the CLM web app. The telemetry requirement needs HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION to be attached to all web request spans, which is best handled in a global middleware or other central entry point. Therefore, this single, controller-level file is too narrow in scope to meet the requirement and is not strategic for implementing the needed headers across all requests.\nBatch 13 (ScmHttpApplication.cs): \u2022 ScmHttpApplication.cs is the ASP-NET HttpApplication (Global.asax) class for the CLM web app. Every request and response passes through this file\u2019s event handlers (e.g., Application_BeginRequest, Application_EndRequest, etc.).  \n\u2022 The file already references OpenTelemetry.Trace and DocuSign-specific monitoring helpers, indicating existing span/activity instrumentation that can be extended.  \n\u2022 Because it runs for every HTTP request, it provides access to both Request.Headers[\"Referer\"] and Response.Headers[\"Location\"], letting us set Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026) for all HTTP request spans.  \n\u2022 Adding the two attributes here fulfills the requirement globally without touching other controllers or middleware.  \n\u2022 As the global entry point, this is the MOST_STRATEGIC location; no additional files are needed.\nBatch 14 (Global.asax.cs): \u2022 Global.asax.cs is executed for every incoming HTTP request (Application_BeginRequest / Application_EndRequest), making it a universal interception point.  \n\u2022 The project already references OpenTelemetry.Trace, so Activity .Current will be populated for request spans created by the ASP.NET instrumentation.  \n\u2022 From this single file we can read Request.Headers[\"Referer\"] at the beginning of the request and Response.Headers[\"Location\"] just before the response is sent, then call Activity.Current?.SetTag(...) (or SetAttribute) to add the required span attributes.  \n\u2022 Because it is the global entry point, the change automatically covers all CLM web-app HTTP requests without touching individual controllers or middleware.  \n\nTherefore, Global.asax.cs alone can meet the telemetry requirement and is the most strategic location for the patch.\nBatch 15 (Startup.cs): Startup.cs is the single, central entry point where all ASP-NET Core middleware and OpenTelemetry services are configured. The file already references several OpenTelemetry and header-propagation extensions, indicating an existing tracing pipeline. By registering one small custom middleware (or configuring an ActivityEnrichment callback) inside Startup.cs, we can add the HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers to every incoming request span via Activity.Current?.SetTag(..). Because Startup.cs affects every HTTP request and is the canonical place for cross-cutting instrumentation, it is the most strategic spot to implement this telemetry requirement.\nBatch 16 (Program.cs): \u2022 Program.cs is the ASP.NET Core entry point that builds the host, registers services, and defines the HTTP request pipeline. Any custom middleware added here will execute for every incoming HTTP request and outgoing response.  \n\u2022 The telemetry requirement only needs one small piece of middleware (or an IHostedService filter) that, for each request/response pair, looks up the current Activity (span) produced by ASP.NET Core instrumentation and adds two attributes:\n  \u2011 HTTP_REFERER  = Request.Headers[\"Referer\"]  \n  \u2011 HTTP_RESPONSE_REDIRECT_LOCATION = Response.Headers[\"Location\"]  \n\n\u2022 Because Program.cs is where the pipeline is composed, it is the MOST_STRATEGIC place to insert that logic. No additional files are necessary.  \n\u2022 There is no evidence of a more central utility (e.g., Global.asax in classic ASP.NET) in this project because it is modern .NET 6/7 style; therefore Program.cs is the correct single-file, global solution.\nBatch 17 (WorkflowActivitiesController.cs): Cannot solve gap - \u2022 WorkflowActivitiesController.cs is an individual controller; any code change here would only affect endpoints served by this controller, not \u201call CLM web app HTTP request spans.\u201d  \n\u2022 The requirement demands a solution that is applied to every incoming HTTP request, which is normally done in middleware, a base controller, a global filter, or other central request-pipeline components.  \n\u2022 Although the file references DocuSign.Monitoring and may already interact with Activity/Span APIs, its scope is limited to this specific workflow activity area, making it an insufficient and non-strategic location to meet the global telemetry requirement.\nBatch 18 (LogAsyncRequestHttpMiddleware.cs): \u2022 The file is an ASP.NET Core middleware that already participates in request/response logging (inherits from ScmLogAsyncRequestHttpMiddleware).  \n\u2022 Middleware executes on every HTTP request for this service; it has direct access to HttpContext.Request.Headers and HttpContext.Response.Headers, so it can read Referer and Location headers and add them as span attributes on the current Activity/Span created by the base middleware.  \n\u2022 This makes it fully capable of closing the telemetry gap with minimal changes.  \n\u2022 Because it targets a single service (WorkflowDesign) rather than the entire CLM web app platform, it is classified as STRATEGIC rather than MOST_STRATEGIC.  \n\u2022 It is still a good instrumentation point if no higher-level, cross-service middleware is chosen, so it is marked as SELECT_AS_FALLBACK.\nBatch 19 (LogAsyncRequestHttpMiddleware.cs): \u2022 The requirement targets \u201call CLM web app HTTP request spans.\u201d A middleware that executes for every HTTP request is a natural interception point.  \n\u2022 LogAsyncRequestHttpMiddleware already performs request/response logging and inherits from ScmLogAsyncRequestHttpMiddleware, indicating existing telemetry hooks. Extending it to read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"] and attach them to the current Activity/span is straightforward.  \n\u2022 Because this middleware sits inside the ASP.NET Core pipeline and runs for every request, it is strategic for broad instrumentation, though not as globally pervasive as Startup.cs or a custom ActivitySource factory.  \n\u2022 No additional files are necessary; a small change inside this single middleware can fulfill the telemetry requirement while minimizing surface area.\nBatch 20 (IncomingRequestFilteringMiddleware.cs): \u2022 IncomingRequestFilteringMiddleware derives from OwinMiddleware, which is executed for every HTTP request that passes through the CLM OWIN pipeline.  \n\u2022 Inside this middleware both the incoming IOwinRequest (request headers, e.g., Request.Headers[\"Referer\"]) and the outgoing IOwinResponse (response headers, e.g., Response.Headers[\"Location\"]) are available before and after invoking the next component.  \n\u2022 The file already imports DocuSign.Monitoring and contains telemetry calls (TimingEventSource, Counter) indicating an existing instrumentation surface.  Therefore we can extend the middleware to look at Activity.Current (or the monitoring API already used) and add the required span attributes.  \n\u2022 Because it is middleware rather than a single global application file, its reach is broad but not absolutely universal; another more\u2010central entry point (Startup, Global.asax, base Monitoring middleware) could be an even better place.  Hence the solution is \u201cSTRATEGIC\u201d but not \u201cMOST_STRATEGIC.\u201d  \n\u2022 Given its ability to intercept every request, this file is an effective fallback location if no higher-level global handler is chosen elsewhere.\n\nThus, the group can solve the telemetry gap, is strategic, and should be kept as a fallback option.",
        "patch_reasoning": {
          "strategy": "ReasoningStrategy.CHAIN_OF_THOUGHT",
          "steps": [
            {
              "step_number": 1,
              "description": "1. Analysis (confidence \u2248 0.86)",
              "reasoning": "1. Analysis (confidence \u2248 0.86)\n   \u2022 Requirement: add two headers as span attributes for *all* CLM web-app HTTP requests.  \n   \u2022 Constraint: minimal, targeted change; only files listed in `allowed_paths`.  ",
              "conclusion": "   \u2022 Constraint: minimal, targeted change; only files listed in `allowed_paths`.  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 2,
              "description": "2. Planning",
              "reasoning": "2. Planning\n   \u2022 Direct strategy: enrich the existing utility rather than introduce new middleware or touch multiple files.  \n   \u2022 Keep existing cross-framework support via `#if NETFRAMEWORK` directives.",
              "conclusion": "   \u2022 Keep existing cross-framework support via `#if NETFRAMEWORK` directives.",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 3,
              "description": "3. Implementation",
              "reasoning": "3. Implementation\n   \u2022 Added two private helpers: SetHttpRefererTag and SetHttpRedirectLocationTag.  \n   \u2022 They safely read the relevant headers for both ASP.NET Core and classic ASP.NET (`NETFRAMEWORK`) and add them to the current `Activity` if values exist.  ",
              "conclusion": "   \u2022 They safely read the relevant headers for both ASP.NET Core and classic ASP.NET (`NETFRAMEWORK`) and add them to the current `Activity` if values exist.  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            },
            {
              "step_number": 4,
              "description": "4. Validation",
              "reasoning": "4. Validation\n   \u2022 Runs for every request because SetTagsWithCommonFields is already universally called.  \n   \u2022 Header look-ups are null-safe and avoid exceptions when headers are absent.  ",
              "conclusion": "   \u2022 Header look-ups are null-safe and avoid exceptions when headers are absent.  ",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            }
          ],
          "final_conclusion": "Chosen solution touches only one strategic file, meets the requirement, and keeps the codebase clean.",
          "overall_confidence": 0.8,
          "alternative_approaches": [
            "\u2022 Observed: ActivityEnricher.SetTagsWithCommonFields is already invoked for each request to attach common tags (AccountId, UserId, SessionId). Hence extending this method automatically affects every HTTP request span.",
            "Alternative approaches considered"
          ]
        },
        "selected_files": [
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs"
        ],
        "strategy_used": "direct"
      },
      "error": null,
      "execution_time": 76.31987285614014,
      "cache_hit": false
    },
    "report_generation": {
      "stage_name": "report_generation",
      "status": "StageStatus.COMPLETED",
      "result": {
        "report_type": "comprehensive",
        "report_length": 23328
      },
      "error": null,
      "execution_time": 0.0015749931335449219,
      "cache_hit": false
    }
  }
}