"EnhancedIntent(issue_category='INSTRUMENTATION', static_analysis_query={'find_method_call': 'SetTag'}, semantic_description='Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to existing CLM web request spans.', search_keywords=['HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION', 'SetTag', 'ActivitySource', 'middleware', 'Response.Headers[\"Location\"]'], telemetry_operation={'type': 'span', 'target_name': None, 'action': 'ADD_ATTRIBUTES', 'attributes_to_add': [{'name': 'HTTP_REFERER', 'value_source': 'Request.Headers[\"Referer\"]'}, {'name': 'HTTP_RESPONSE_REDIRECT_LOCATION', 'value_source': 'Response.Headers[\"Location\"]'}], 'new_span_name': None, 'new_metric_details': {}}, confidence=<IntentConfidence.HIGH: 'high'>, operation_type=<OperationType.MULTI_FILE: 'multi_file'>, complexity_score=4, estimated_files=3, validation_result=ValidationResult(is_valid=True, confidence=<IntentConfidence.HIGH: 'high'>, issues=[], suggestions=[]), sub_tasks=[{'order': 1, 'name': 'Source-code discovery & design decision', 'action': 'locate_configuration', 'description': 'Search the CLM solution for existing OpenTelemetry registration, custom ActivitySource usage and any middleware already enriching spans. Identify the single \u2018server span\u2019 that represents each incoming request.', 'tasks': ['Search for keyword SetTag, ActivitySource, AddTag, AddOpenTelemetry in solution.', 'Locate Startup.cs or Program.cs (for .NET 6+) where AddOpenTelemetryTracing() or AddAspNetInstrumentation() is called.', 'Locate any files whose names end with *TelemetryMiddleware.cs or *Enricher.cs.'], 'expected_files': ['Startup.cs / Program.cs', 'OpenTelemetryConfigExtensions.cs', 'ExistingTelemetryMiddleware.cs'], 'validation_criteria': 'OpenTelemetry pipeline entry point and enrichment extension points are fully understood.'}, {'order': 2, 'name': 'Choose enrichment mechanism', 'action': 'design', 'description': 'Decide between (a) inserting a brand-new middleware, (b) extending existing custom telemetry middleware, or (c) registering an ActivityEnrich callback in AddAspNetCoreInstrumentation().', 'tasks': ['Verify if there is already a custom middleware that sets extra tags; if so plan to extend it.', 'If none exists, create a lightweight middleware called RedirectTelemetryEnricherMiddleware.', 'Document the final decision in the PR description.'], 'dependencies': [1], 'validation_criteria': 'Design document in PR, reviewed by at least one senior developer.'}, {'order': 3, 'name': 'Implement request (Referer) enrichment', 'action': 'implement_changes', 'description': 'Add code to capture Request.Headers[\"Referer\"] and attach it to the current Activity with exact tag name HTTP_REFERER.', 'tasks': ['Inside chosen enrichment hook, access var referer = context.Request.Headers[\"Referer\"].FirstOrDefault();', 'If string.IsNullOrWhiteSpace(referer) => do not set tag (or set as empty according to existing conventions).', 'activity?.SetTag(\"HTTP_REFERER\", referer);'], 'expected_files': ['RedirectTelemetryEnricherMiddleware.cs  (new or modified)', 'Startup.cs/Program.cs \u2013 middleware registration'], 'dependencies': [2], 'validation_criteria': 'Unit tests assert that a request with Referer header yields a span with HTTP_REFERER.'}, {'order': 4, 'name': 'Implement response (redirect-location) enrichment', 'action': 'implement_changes', 'description': 'Capture the Location header for 3xx responses after it is set but before the response is flushed.', 'tasks': ['Within middleware, register context.Response.OnStarting callback.', 'In callback, check if response.StatusCode is in {301,302,303,307,308}.', 'Read var location = context.Response.Headers[\"Location\"].FirstOrDefault();', 'activity?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location);'], 'dependencies': [2], 'expected_files': ['RedirectTelemetryEnricherMiddleware.cs  (updated)'], 'validation_criteria': 'Integration test issues a request that causes 302; span contains both status code and HTTP_RESPONSE_REDIRECT_LOCATION.'}, {'order': 5, 'name': 'Unit & Integration tests', 'action': 'testing', 'description': 'Add automated tests using TestServer or WebApplicationFactory to assert header capturing logic.', 'tasks': ['Test: GET /ping with Referer header should create span with HTTP_REFERER == value.', 'Test: GET /redirect endpoint that issues 302 should include HTTP_RESPONSE_REDIRECT_LOCATION.', 'Performance test: ensure added middleware adds <1 ms overhead per request.'], 'expected_files': ['RedirectTelemetryEnricherMiddlewareTests.cs'], 'dependencies': [3, 4], 'validation_criteria': 'CI pipeline green; new tests pass.'}, {'order': 6, 'name': 'Local manual validation', 'action': 'run_locally', 'description': 'Run CLM web locally with OTLP exporter pointing to local collector / console exporter to visually inspect spans.', 'dependencies': [5], 'validation_criteria': 'Console output shows expected tags for sample requests.'}, {'order': 7, 'name': 'Deploy to Demo environment', 'action': 'deploy', 'description': 'Promote build to Demo, wait for traffic, then execute verification Kusto query supplied in ticket.', 'tasks': ['Run Kusto query and confirm HTTP_REFERER & HTTP_RESPONSE_REDIRECT_LOCATION columns populated.', 'Monitor logs & APM dashboards for error spikes or latency regressions.'], 'dependencies': [6], 'validation_criteria': 'New attributes appear with non-null values in >90% of qualifying spans; p95 latency delta <1%.'}, {'order': 8, 'name': 'Production rollout', 'action': 'deploy_prod', 'description': 'Gradual rollout via 25% \u2192 50% \u2192 100% canary slots (or feature flag on middleware).', 'dependencies': [7], 'validation_criteria': 'No production incident, Kusto query passes in production dataset.'}, {'order': 9, 'name': 'Documentation & knowledge-base update', 'action': 'doc_update', 'description': 'Update runbooks / Confluence page with new telemetry fields and example Kusto queries.', 'dependencies': [8], 'validation_criteria': 'Docs merged, link posted in #clm-engineering.'}], contextual_hints=['Capturing the Location header after it is written but before the response is flushed (may require `OnStarting` or similar callback)', 'Adding tags to the correct Activity instance when multiple Activities may exist per request (HTTP server, custom spans, etc.)'], similar_patterns=['HTTP server instrumentation', 'Custom middleware attribute enrichment'], implementation_strategy=ImplementationStrategy(extend_existing=True, create_new=False, preferred_approach='middleware'), exact_requirements=ExactRequirements(attribute_names=['HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION', 'HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION'], patterns=['kusto\\nOtlpSpanEvents\\n| where Environment == \"Demo\"\\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\\n| where http_status_code > 200\\n| project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\\n', '\\n\\n**Implementation Requirements:**\\n\\n1. **Add HTTP_REFERER attribute** to all incoming HTTP requests\\n   - Source: ', '\\n   - Add to span as: ', '\\n\\n2. **Add HTTP_RESPONSE_REDIRECT_LOCATION attribute** for redirect responses\\n   - Source: ', ' when status code is 301/302/303/307/308\\n   - Add to span as: '], implementation_notes=['SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue)`\\n\\n**Files to Look For:**\\n- CLM web application middleware or request handling code\\n- ASP', 'NET request pipeline components\\n- OpenTelemetry instrumentation configuration\\n- Files containing \"ActivitySource\", \"SetTag\", or \"AddTag\" method calls\\n- Middleware files that handle HTTP requests/responses\\n- Look for existing telemetry code in CLM-related projects\\n\\n**Acceptance Criteria:**\\n- [ ] HTTP_REFERER attribute captured from incoming request headers\\n- [ ] HTTP_RESPONSE_REDIRECT_LOCATION attribute captured for 302+ responses  \\n- [ ] Attributes visible in OtlpSpanEvents Kusto table\\n- [ ] No performance degradation from additional attribute collection\\n- [ ] Proper null/empty value handling for missing headers\\n\\n**Technical Notes:**\\n- Follow existing OpenTelemetry patterns in the codebase\\n- Ensure attribute names match exactly: \"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\"\\n- Add attributes to HTTP request spans, not separate spans\\n- Handle edge cases where headers might be missing or empty']), telemetry_analysis=None)"