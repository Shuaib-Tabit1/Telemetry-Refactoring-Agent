{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to existing HTTP request spans in the CLM web application.",
    "search_keywords": [
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "Activity.SetTag",
      "AddTag",
      "ActivitySource",
      "middleware",
      "redirect"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": "http.server",
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"]"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 3,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "name": "Source & Config Discovery",
        "action": "locate_configuration",
        "description": "Identify where HTTP server spans are currently created and stopped. Confirm ActivitySource/Instrumentation registration and middleware order.",
        "tasks": [
          "Search repo for \u201cAddAspNetCoreInstrumentation\u201d, \u201cActivitySource\u201d, \u201cSetTag\u201d usage",
          "Locate Startup.cs / Program.cs / Middleware extension classes",
          "Document current middleware order (especially anything that mutates status code or adds Location header)"
        ],
        "expected_files": [
          "src/clm-web/Startup.cs",
          "src/clm-web/Program.cs (if .NET 6+ minimal host)",
          "src/clm-web/Telemetry/*Extensions.cs",
          "Any custom HttpContext middleware files"
        ],
        "validation_criteria": "All span creation points and existing enrichment hooks are catalogued"
      },
      {
        "order": 2,
        "name": "Design Enrichment Strategy",
        "action": "design",
        "description": "Choose mechanism to add tags without creating duplicate spans: either OpenTelemetry Enrich option or a dedicated Middleware that runs early for request capture and late for response capture.",
        "tasks": [
          "Evaluate `AspNetCoreInstrumentationOptions.Enrich` delegate feasibility",
          "If Enrich is insufficient for redirect Location (because response not yet finalized), design a custom `SpanEnrichmentMiddleware` inserted AFTER routing but BEFORE `UseEndpoints` to guarantee Location header is set",
          "Write interface & signature: `public class HttpRedirectEnrichmentMiddleware`"
        ],
        "validation_criteria": "Design ADR or short tech note approved by reviewer"
      },
      {
        "order": 3,
        "name": "Implementation \u2013 Request Header Tag",
        "action": "implement_changes",
        "dependencies": [
          1,
          2
        ],
        "description": "Capture HTTP_REFERER on the same Activity that the ASP.NET Core instrumentation created.",
        "tasks": [
          "Within chosen enrichment point, read `HttpContext.Request.Headers[\"Referer\"]`",
          "If value present & not empty, execute `Activity.Current?.SetTag(\"HTTP_REFERER\", referer)`"
        ],
        "code_files_modified": [
          "src/clm-web/Telemetry/HttpRedirectEnrichmentMiddleware.cs",
          "src/clm-web/Startup.cs"
        ],
        "validation_criteria": "Unit test passes: Activity has HTTP_REFERER when header provided"
      },
      {
        "order": 4,
        "name": "Implementation \u2013 Response Redirect Tag",
        "action": "implement_changes",
        "dependencies": [
          3
        ],
        "description": "After the downstream pipeline returns control, inspect status code and Location header; add HTTP_RESPONSE_REDIRECT_LOCATION when applicable.",
        "tasks": [
          "Await _next(context) inside middleware, then read `context.Response.StatusCode` and `context.Response.Headers[\"Location\"]`",
          "If status is 3xx and Location not empty -> `Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location)`"
        ],
        "validation_criteria": "Unit test: when response 302 Location=/foo, Activity contains attribute"
      },
      {
        "order": 5,
        "name": "Null / Empty Guard & Perf Review",
        "action": "refine",
        "dependencies": [
          4
        ],
        "description": "Add fast-path checks to avoid allocations; ensure no exceptions on missing headers.",
        "tasks": [
          "Early exit if Activity.Current is null",
          "Use `TryGetValue` for headers instead of indexer",
          "Add BenchmarkDotNet micro-benchmark (optional) or rely on existing perf tests"
        ],
        "validation_criteria": "Code passes code-quality analyzers, no extra allocations >1\u00b5s per request (local measurement)"
      },
      {
        "order": 6,
        "name": "Automated Testing",
        "action": "test",
        "dependencies": [
          4
        ],
        "description": "Add unit & integration tests with TestServer",
        "tasks": [
          "xUnit test for Referer capture",
          "xUnit test for redirect capture",
          "Edge case test: missing headers; not crashing"
        ],
        "validation_criteria": "CI pipeline green; coverage \u226580% for middleware"
      },
      {
        "order": 7,
        "name": "Local Manual Validation",
        "action": "validate_local",
        "dependencies": [
          6
        ],
        "description": "Run clm-web locally, hit pages, and inspect exported spans (console/exporter) to verify both attributes appear.",
        "validation_criteria": "Attributes visible with expected values in console exporter"
      },
      {
        "order": 8,
        "name": "Demo Environment Canary",
        "action": "deploy_demo",
        "dependencies": [
          7
        ],
        "description": "Deploy behind feature flag `EnableRedirectTelemetry` to Demo for 5% traffic.",
        "tasks": [
          "Toggle flag on for canary pool",
          "Run Kusto query provided in ticket",
          "Monitor CPU / latency via Application Insights"
        ],
        "validation_criteria": "\u226595% of spans in canary include new attributes when applicable; no CPU spike >2%"
      },
      {
        "order": 9,
        "name": "Full Rollout",
        "action": "deploy_all",
        "dependencies": [
          8
        ],
        "description": "Gradually enable feature flag 100% on Demo \u2192 Staging \u2192 Production",
        "validation_criteria": "Kusto query successful in all environments; support sign-off"
      },
      {
        "order": 10,
        "name": "Documentation & Closeout",
        "action": "document",
        "dependencies": [
          9
        ],
        "description": "Update runbooks, dashboard queries, and ADR. Close ticket.",
        "validation_criteria": "Docs merged; link added to ticket"
      }
    ],
    "contextual_hints": [
      "Capturing Response.Headers[\"Location\"] requires code that runs after the response status code is set but before the Activity is stopped",
      "Ensuring attributes are added to the same Activity created by existing OpenTelemetry instrumentation and not to a new/duplicate span"
    ]
  }
}