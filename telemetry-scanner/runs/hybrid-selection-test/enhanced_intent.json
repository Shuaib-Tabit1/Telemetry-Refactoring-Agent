{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Add missing HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to existing HTTP request spans in CLM web application.",
    "search_keywords": [
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "SetTag",
      "ActivitySource",
      "OpenTelemetry",
      "ASP.NET middleware"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": null,
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"] when status = 3xx"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 5,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "action": "locate_configuration",
        "description": "Search the CLM web solution for OpenTelemetry configuration, ActivitySource declarations, and existing middleware where SetTag/SetCustomProperty is called.",
        "expected_files": [
          "Startup.cs",
          "Program.cs",
          "Telemetry/OpenTelemetryExtensions.cs",
          "Middleware/*Telemetry*.cs"
        ],
        "validation_criteria": "All files that build the Activity/Tracing pipeline are identified and documented; confirm the server\u2010span source (AddAspNetCoreInstrumentation or custom ActivitySource)."
      },
      {
        "order": 2,
        "action": "design_injection_point",
        "description": "Decide the exact injection point that has visibility of BOTH request headers and the final response (after status code & Location header are written). Normally this is a custom ASP.NET Core middleware placed immediately after UseRouting() and before UseEndpoints().",
        "dependencies": [
          1
        ],
        "validation_criteria": "Architecture note written that shows chosen middleware location and how it gains access to the current Activity created by ASP.NET instrumentation."
      },
      {
        "order": 3,
        "action": "scaffold_middleware",
        "description": "Create or update a middleware class (e.g., Telemetry/RedirectEnrichmentMiddleware.cs). In Invoke/InvokeAsync:\n  a. Extract referer = context.Request.Headers[\"Referer\"].FirstOrDefault();\n  b. Call await _next(context);\n  c. After _next, if (context.Response.StatusCode >= 300 && context.Response.StatusCode < 400) { location = context.Response.Headers[\"Location\"].FirstOrDefault(); }\n  d. var activity = Activity.Current; if (activity != null) { activity.SetTag(\"HTTP_REFERER\", referer ?? string.Empty); if (!string.IsNullOrEmpty(location)) activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location); }",
        "dependencies": [
          2
        ],
        "expected_files": [
          "Telemetry/RedirectEnrichmentMiddleware.cs"
        ],
        "validation_criteria": "Middleware compiles; unit tests or manual run show tags being set on Activity."
      },
      {
        "order": 4,
        "action": "register_middleware",
        "description": "In Startup.cs (Configure method) or equivalent, add app.UseMiddleware<RedirectEnrichmentMiddleware>(); in correct order as determined in step 2.",
        "dependencies": [
          3
        ],
        "validation_criteria": "Application starts locally; test page requests succeed with middleware enabled."
      },
      {
        "order": 5,
        "action": "unit_tests",
        "description": "Add unit tests using TestServer/WebApplicationFactory:\n  \u2022 GET request with Referer header, expect Activity has HTTP_REFERER.\n  \u2022 302 response with Location header, expect Activity has HTTP_RESPONSE_REDIRECT_LOCATION.",
        "dependencies": [
          3
        ],
        "expected_files": [
          "Telemetry.Tests/RedirectEnrichmentMiddlewareTests.cs"
        ],
        "validation_criteria": "Tests fail before change, pass after change; coverage \u2265 80% on middleware class."
      },
      {
        "order": 6,
        "action": "local_validation",
        "description": "Run application locally with OpenTelemetry exporter pointed to console/OTLP collector. Generate a request flow that triggers redirect and examine emitted spans to confirm new tags are present and non-empty where applicable.",
        "dependencies": [
          4
        ],
        "validation_criteria": "Console or collector shows HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION on server spans."
      },
      {
        "order": 7,
        "action": "performance_check",
        "description": "Run quick load test (e.g., 1000 req/s for 1 min) with and without middleware; compare p95 latency and CPU usage. Ensure overhead < 2 ms per request.",
        "dependencies": [
          6
        ],
        "validation_criteria": "Performance delta within acceptable SLA; no GC spikes or memory leaks."
      },
      {
        "order": 8,
        "action": "code_review_pr",
        "description": "Open Pull Request with middleware, tests, and documentation update. Tag Observability and CLM owners; address feedback.",
        "dependencies": [
          5,
          6,
          7
        ],
        "validation_criteria": "PR approved with \u2705 from required reviewers and CI pipeline green."
      },
      {
        "order": 9,
        "action": "deploy_to_demo",
        "description": "Merge to main \u2192 trigger CI/CD to Demo environment. Execute manual redirect scenarios on /clm/Documents/BrowseDocuments.aspx; run target Kusto query provided in ticket to confirm new columns populated.",
        "dependencies": [
          8
        ],
        "validation_criteria": "Kusto query returns non-null HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION for new spans in Demo."
      },
      {
        "order": 10,
        "action": "production_rollout",
        "description": "If Demo validation passes for 24 h, promote deployment to Staging then Production. Monitor Application Insights dashboards / Kusto queries for error rate, latency, and tag presence.",
        "dependencies": [
          9
        ],
        "validation_criteria": "No regressions in key metrics; continuous appearance of both attributes in Prod spans."
      }
    ],
    "contextual_hints": [
      "Locating or creating the correct ASP.NET middleware hook so that the response header is available (must run after status code & Location header are set)",
      "Ensuring tags are added to the existing server span and not to a child span created by some other library",
      "Unit / integration testing of 3xx responses to verify Location header capture",
      "Deploying the change consistently across all environments (Dev \u2192 Demo \u2192 Prod) without breaking existing OpenTelemetry configuration"
    ]
  }
}