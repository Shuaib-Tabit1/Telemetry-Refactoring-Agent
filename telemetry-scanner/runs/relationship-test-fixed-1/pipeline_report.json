{
  "execution_summary": {
    "total_stages": 9,
    "completed": 9,
    "failed": 0,
    "cache_hits": 0,
    "total_execution_time": 676.4655435085297
  },
  "stage_details": {
    "ticket_processing": {
      "stage_name": "ticket_processing",
      "status": "StageStatus.COMPLETED",
      "result": "## OpenTelemetry Span Attributes Missing - HTTP Redirect Tracking\n\n**Summary:** Add missing HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to CLM web application spans\n\n**Problem Description:**\nOur OpenTelemetry spans in the CLM (Contract Lifecycle Management) web application are missing critical HTTP attributes needed for debugging redirect flows and investigating user journey issues. Specifically:\n\n1. **Missing Attribute**: `HTTP_REFERER` - The referring page URL that led to the current request\n2. **Missing Attribute**: `HTTP_RESPONSE_REDIRECT_LOCATION` - The destination URL when a 302/redirect response occurs\n\n**Business Impact:**\n- Cannot trace user navigation flows through CLM application\n- Difficult to investigate redirect-related issues and errors\n- Missing context for 302 responses that redirect to error pages\n\n**Technical Details:**\n\n**Target Application:** CLM Web Application (clm-web)\n**Environment:** Demo (but affects all environments)\n**Specific Pages Affected:**\n- `/clm/Documents/BrowseDocuments.aspx`\n- `/clm/SSO/SSOEndpoint.ashx` \n- Any page that handles redirects (HTTP 302 responses)\n\n**Expected Kusto Query Results:**\nAfter fix, this query should show the missing attributes:\n```kusto\nOtlpSpanEvents\n| where Environment == \"Demo\"\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\n| where http_status_code > 200\n| project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\n```\n\n**Implementation Requirements:**\n\n1. **Add HTTP_REFERER attribute** to all incoming HTTP requests\n   - Source: `Request.Headers[\"Referer\"]` or `HttpContext.Request.Headers.Referer`\n   - Add to span as: `activity.SetTag(\"HTTP_REFERER\", refererValue)`\n\n2. **Add HTTP_RESPONSE_REDIRECT_LOCATION attribute** for redirect responses\n   - Source: `Response.Headers[\"Location\"]` when status code is 301/302/303/307/308\n   - Add to span as: `activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue)`\n\n**Files to Look For:**\n- CLM web application middleware or request handling code\n- ASP.NET request pipeline components\n- OpenTelemetry instrumentation configuration\n- Files containing \"ActivitySource\", \"SetTag\", or \"AddTag\" method calls\n- Middleware files that handle HTTP requests/responses\n- Look for existing telemetry code in CLM-related projects\n\n**Acceptance Criteria:**\n- [ ] HTTP_REFERER attribute captured from incoming request headers\n- [ ] HTTP_RESPONSE_REDIRECT_LOCATION attribute captured for 302+ responses  \n- [ ] Attributes visible in OtlpSpanEvents Kusto table\n- [ ] No performance degradation from additional attribute collection\n- [ ] Proper null/empty value handling for missing headers\n\n**Technical Notes:**\n- Follow existing OpenTelemetry patterns in the codebase\n- Ensure attribute names match exactly: \"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\"\n- Add attributes to HTTP request spans, not separate spans\n- Handle edge cases where headers might be missing or empty\n",
      "error": null,
      "execution_time": 0.0005528926849365234,
      "cache_hit": false
    },
    "intent_extraction": {
      "stage_name": "intent_extraction",
      "status": "StageStatus.COMPLETED",
      "result": {
        "issue_category": "INSTRUMENTATION",
        "static_analysis_query": {
          "find_method_call": "SetTag"
        },
        "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers as attributes on existing incoming HTTP request spans in the CLM web app.",
        "search_keywords": [
          "HTTP_REFERER",
          "HTTP_RESPONSE_REDIRECT_LOCATION",
          "SetTag",
          "ActivitySource",
          "AddTag",
          "middleware",
          "OpenTelemetry"
        ],
        "telemetry_operation": {
          "type": "span",
          "target_name": "Incoming HTTP Request Span",
          "action": "ADD_ATTRIBUTES",
          "attributes_to_add": [
            {
              "name": "HTTP_REFERER",
              "value_source": "Request.Headers[\"Referer\"]"
            },
            {
              "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
              "value_source": "Response.Headers[\"Location\"]"
            }
          ],
          "new_span_name": null,
          "new_metric_details": {}
        },
        "confidence": "IntentConfidence.HIGH",
        "operation_type": "OperationType.MULTI_FILE",
        "complexity_score": 4,
        "estimated_files": 3,
        "validation_result": {
          "is_valid": true,
          "confidence": "IntentConfidence.HIGH",
          "issues": [],
          "suggestions": []
        },
        "sub_tasks": [
          {
            "order": 1,
            "action": "locate_configuration",
            "description": "Find the OpenTelemetry bootstrap code that registers ActivitySource / AspNet instrumentation for clm-web. Typical locations are Startup.cs, Program.cs, or custom extension classes (e.g. OpenTelemetryConfigExtensions.cs). Also search for AddOpenTelemetryTracing in *.cs files.",
            "expected_files": [
              "Startup.cs",
              "Program.cs",
              "*Telemetry*.cs",
              "*Extensions.cs"
            ],
            "validation_criteria": "Confirmed single point where AspNetCoreInstrumentation() or ActivitySource is added and span enrichment hooks can be supplied."
          },
          {
            "order": 2,
            "action": "spike_local_enrichment_hook",
            "description": "Create (or update) an enrichment delegate that is executed for every Server span. Within that delegate, copy the Request.Headers[\"Referer\"] value into the span tag HTTP_REFERER if it exists.",
            "dependencies": [
              1
            ],
            "expected_files": [
              "TelemetryEnrichment.cs",
              "Startup.cs"
            ],
            "validation_criteria": "Local unit test or debugger shows Activity.GetTagItem(\"HTTP_REFERER\") contains the incoming header when present."
          },
          {
            "order": 3,
            "action": "add_response_redirect_attribute",
            "description": "Inside the same middleware/enrichment code, subscribe to HttpContext.Response.OnStarting to capture the final status code + Location header. If status code is 301, 302, 303, 307, or 308 and Location header exists, set Activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue).",
            "dependencies": [
              2
            ],
            "expected_files": [
              "TelemetryEnrichment.cs"
            ],
            "validation_criteria": "Manual local test hitting a URL that issues 302 populates the redirect tag."
          },
          {
            "order": 4,
            "action": "null_and_performance_guards",
            "description": "Add defensive checks: only set tags when header values are non-null/non-empty; ensure no exceptions are thrown when headers missing. Benchmark with a simple load test (e.g. wrk for 1k rps) to confirm <1% overhead compared to baseline.",
            "dependencies": [
              3
            ],
            "validation_criteria": "Load test passes; no new errors in logs."
          },
          {
            "order": 5,
            "action": "unit_and_integration_tests",
            "description": "1) Unit test middleware with mocked HttpContext to verify tags. 2) Integration test in the Demo environment using a feature branch deployment; execute Kusto query provided in ticket to assert tags are present.",
            "dependencies": [
              4
            ],
            "expected_files": [
              "TelemetryEnrichmentTests.cs",
              "Integration/RedirectTelemetryTests.cs"
            ],
            "validation_criteria": "All tests green; Kusto shows the attributes."
          },
          {
            "order": 6,
            "action": "code_review_and_security_check",
            "description": "Submit PR; reviewers confirm naming matches EXACTLY (HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION) and no sensitive headers accidentally logged.",
            "dependencies": [
              5
            ],
            "validation_criteria": "At least two approvals; security team signs off on header exposure."
          },
          {
            "order": 7,
            "action": "deploy_to_lower_envs",
            "description": "Promote to Dev \u2192 Demo. Monitor OpenTelemetry exporter throughput & error budgets.",
            "dependencies": [
              6
            ],
            "validation_criteria": "Kusto query returns values in each environment; no increase in error rate or latency."
          },
          {
            "order": 8,
            "action": "production_rollout",
            "description": "Deploy via canary (e.g. 10% of pods for 1 hour) then full rollout. Continue Kusto monitoring plus Grafana latency dashboards.",
            "dependencies": [
              7
            ],
            "validation_criteria": "After 24 h, attributes visible in Production spans; no performance regression; SLOs intact."
          },
          {
            "order": 9,
            "action": "documentation_update",
            "description": "Update internal wiki / observability runbook with the new span attributes and sample queries.",
            "dependencies": [
              8
            ],
            "validation_criteria": "Docs merged; shared in #telemetry Slack channel."
          }
        ],
        "contextual_hints": [
          "Finding the precise place in the ASP.NET pipeline where BOTH the incoming headers (Referer) and outgoing headers (Location) are visible on the same Activity instance",
          "Ensuring the update follows existing OpenTelemetry ActivitySource/SetTag pattern so that auto-instrumentation is not duplicated or skipped by sampling"
        ],
        "similar_patterns": [
          "http-server-span-enrichment",
          "header-attribute-mapping"
        ],
        "implementation_strategy": {
          "extend_existing": true,
          "create_new": false,
          "preferred_approach": "middleware"
        },
        "exact_requirements": {
          "attribute_names": [
            "HTTP_REFERER",
            "HTTP_RESPONSE_REDIRECT_LOCATION",
            "HTTP_REFERER",
            "HTTP_RESPONSE_REDIRECT_LOCATION"
          ],
          "patterns": [
            "kusto\nOtlpSpanEvents\n| where Environment == \"Demo\"\n| where url_path == \"/clm/Documents/BrowseDocuments.aspx\"\n| where http_status_code > 200\n| project Timestamp, url_path, http_status_code, HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION\n",
            "\n\n**Implementation Requirements:**\n\n1. **Add HTTP_REFERER attribute** to all incoming HTTP requests\n   - Source: ",
            "\n   - Add to span as: ",
            "\n\n2. **Add HTTP_RESPONSE_REDIRECT_LOCATION attribute** for redirect responses\n   - Source: ",
            " when status code is 301/302/303/307/308\n   - Add to span as: "
          ],
          "implementation_notes": [
            "SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", locationValue)`\n\n**Files to Look For:**\n- CLM web application middleware or request handling code\n- ASP",
            "NET request pipeline components\n- OpenTelemetry instrumentation configuration\n- Files containing \"ActivitySource\", \"SetTag\", or \"AddTag\" method calls\n- Middleware files that handle HTTP requests/responses\n- Look for existing telemetry code in CLM-related projects\n\n**Acceptance Criteria:**\n- [ ] HTTP_REFERER attribute captured from incoming request headers\n- [ ] HTTP_RESPONSE_REDIRECT_LOCATION attribute captured for 302+ responses  \n- [ ] Attributes visible in OtlpSpanEvents Kusto table\n- [ ] No performance degradation from additional attribute collection\n- [ ] Proper null/empty value handling for missing headers\n\n**Technical Notes:**\n- Follow existing OpenTelemetry patterns in the codebase\n- Ensure attribute names match exactly: \"HTTP_REFERER\" and \"HTTP_RESPONSE_REDIRECT_LOCATION\"\n- Add attributes to HTTP request spans, not separate spans\n- Handle edge cases where headers might be missing or empty"
          ]
        },
        "telemetry_analysis": null
      },
      "error": null,
      "execution_time": 29.844681978225708,
      "cache_hit": false
    },
    "project_parsing": {
      "stage_name": "project_parsing",
      "status": "StageStatus.COMPLETED",
      "result": [
        "/Users/shuaib.tabit/Documents/Atlas/src/ActIntegration\\ActIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdminService\\AdminService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService\\AdvancedInsightsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService.IntegrationTests\\AdvancedInsightsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AgreementDefinitionModel\\AdmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.ABAC.PDP\\API.ABAC.PDP.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation.IntegrationTests/API.Allocation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/API.Allocation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Authentication\\API.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Common\\API.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content\\API.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Content.EndToEndTests\\API.Content.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.Common\\API.DocuSignInternal.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal.IntegrationTests\\API.DocuSignInternal.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.DocuSignInternal\\API.DocuSignInternal.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper.IntegrationTests/API.GateKeeper.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper\\API.GateKeeper.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch.EndToEndTests\\API.OpenSearch.EndToEndTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.OpenSearch\\API.OpenSearch.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning.IntegrationTests/API.Provisioning.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.Provisioning\\API.Provisioning.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.SfGenAPI\\API.SfGenAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WebAPI\\API.WebAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities\\API.WorkflowActivities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.IntegrationTests\\API.WorkflowActivities.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities.Client/API.WorkflowActivities.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign\\API.WorkflowDesign.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowDesign.IntegrationTests\\API.WorkflowDesign.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Activities\\Atlas.Workflow.Activities.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Client\\Atlas.Workflow.Client.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Readers\\Atlas.Workflow.Readers.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService\\AtlasDataManipulationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService.IntegrationTests\\AtlasDataManipulationService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication\\AuthenticationApplication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthenticationApplication.IntegrationTests\\AuthenticationApplication.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService\\AuthMaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/AuthMaintenanceService.IntegrationTests\\AuthMaintenanceService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Automation.Toolkit.Tests\\Automation.Toolkit.Tests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ChatNotification\\ChatNotification.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CodeRunner\\CodeRunner.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Core\\Collaboration.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Collaboration.Infrastructure\\Collaboration.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ConnectServiceIntegration\\ConnectServiceIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain.Testing\\Core.Domain.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain\\Core.Domain.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework\\Core.ServiceFramework.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework.Testing\\Core.ServiceFramework.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types\\Core.Types.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRules\\CustomRules.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService\\CustomRuleService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CustomRuleService.IntegrationTests\\CustomRuleService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService\\DetectTypeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService.IntegrationTests\\DetectTypeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService\\DocToPDFService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocToPDFService.IntegrationTests\\DocToPDFService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentAssembly\\DocumentAssembly.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService\\DocumentCompareService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCompareService.IntegrationTests\\DocumentCompareService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation\\DocumentCreation.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/DocumentCreation.IntegrationTests\\DocumentCreation.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticCore\\ElasticCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElasticIndexing\\ElasticIndexing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ElectronicSignature\\ElectronicSignature.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService\\ESignatureService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ESignatureService.IntegrationTests\\ESignatureService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ETL\\ETL.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService\\ExtractService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ExtractService.IntegrationTests\\ExtractService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Fax\\Fax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/FormGen\\FormGen.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor\\GenericEventProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GenericEventProcessor.IntegrationTests\\GenericEventProcessor.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/GraphQLCore\\GraphQLCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/HtmlService\\HtmlService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InboundFax\\InboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/InteractivePreviewCore\\InteractivePreviewCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MaintenanceService\\MaintenanceService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MenuActions\\DocumentReviewMenuActions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService\\MessageWorkerService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService\\NewsService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/NewsService.IntegrationTests\\NewsService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ObligationManagementIntegration\\ObligationManagementIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI.IntegrationTests/OfficeWebAppsAPI.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OfficeWebAppsAPI\\OfficeWebAppsAPI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OneConfig.Testing\\OneConfig.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\DacDocGenApiClient\\DacDocGenApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients\\Doc2PdfApiClient\\Doc2PdfApiClient.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OrchestrationIntegration\\OrchestrationIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail\\OutboundEmail.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEmail.IntegrationTests\\OutboundEmail.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent\\OutboundEvent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundEvent.IntegrationTests\\OutboundEvent.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundFax\\OutboundFax.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/OutboundHttpService\\OutboundHttpService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Packaging\\Packaging.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/PdfService\\PdfService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProcessBuilder\\ProcessBuilder.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProfileLogger\\ProfileLogger.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Core\\ProxyLayer.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ProxyLayer\\ProxyLayer.Infrastructure\\ProxyLayer.Infrastructure.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService\\ReportingService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/ReportingService.IntegrationTests\\ReportingService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Authentication\\REST.Authentication.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Common\\REST.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.Content\\REST.Content.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/REST.WebServices\\REST.WebServices.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/RtmIntegration\\RtmIntegration.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SANitationService\\SANitationService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Core\\SForce.Core.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SForce.Services\\SForce.Services.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer\\SFTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SFTPServer.IntegrationTests\\SFTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SharedTemplates\\SharedTemplates.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer\\SMTPServer.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/SMTPServer.IntegrationTests\\SMTPServer.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService\\StructuredDocumentService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/StructuredDocumentService.IntegrationTests\\StructuredDocumentService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TaskProcessor\\TaskProcessor.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService\\TreeService.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/TreeService.IntegrationTests\\TreeService.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/UserTaskList\\UserTaskList.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/VendorCallback\\VendorCallback.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Testing\\Web.Common.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Abstractions/Web.Common.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.Resources/Web.Common.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common\\Web.Common.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Web.Common.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Abstractions\\Web.CommonUI.Abstractions.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.Resources/Web.CommonUI.Resources.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI\\Web.CommonUI.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore\\Web.CommonUI.AspNetCore.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.IntegrationTests\\Web.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web.Testing\\Web.Testing.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/Web\\Web.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet\\WebNet.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebNet.IntegrationTests\\WebNet.IntegrationTests.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebContent\\WebContent.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebShare\\WebShare.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap\\WebSoap.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol\\WINS.Protocol.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WINS\\WINS.csproj",
        "/Users/shuaib.tabit/Documents/Atlas/src/CLM.Search\\dirs.proj",
        "/Users/shuaib.tabit/Documents/Atlas/src/WebSoap.EndToEndTests\\WebSoap.EndToEndTests.csproj"
      ],
      "error": null,
      "execution_time": 0.009226799011230469,
      "cache_hit": false
    },
    "graph_building": {
      "stage_name": "graph_building",
      "status": "StageStatus.COMPLETED",
      "result": {
        "projects_count": 143,
        "graph_loaded": true
      },
      "error": null,
      "execution_time": 392.96737909317017,
      "cache_hit": false
    },
    "intelligent_search": {
      "stage_name": "intelligent_search",
      "status": "StageStatus.COMPLETED",
      "result": [
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "ActivitySource",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: Metrics"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)",
            "?.StartActivity($\"{InstrumentationNames.DetectTypeName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);",
            "?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.DetectTypeTask))\n\t\t\t?.SetMetricName(InstrumentationNames.DetectTypeName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignFileDataId, DeserializedPayload.FileDataUid);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Pattern: ActivitySource; Contains method call: SetTag (4 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "ActivitySource",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: Metrics"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)",
            "?.StartActivity($\"{InstrumentationNames.VideoInfoName}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);",
            "?.SetTag(MqWorkersServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, nameof(TaskTypes.VideoInfoTask))\n\t\t\t?.SetMetricName(InstrumentationNames.VideoInfoName)\n\t\t\t?.SetQueueTaskTags(Task)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDocumentId, DeserializedPayload.DocumentUid);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "Logger.InfoNoPII(Task.LastErrorMessage);\n\t\t\t\t\tresult.TaskResult = TaskResult.Success;\n\t\t\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, mimeType);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (3 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Pattern: OpenTelemetry",
            "Pattern: Monitoring",
            "Import: DocuSign.Monitoring",
            "Pattern: ActivitySource",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "ActivitySource",
            "Import: var activity = StartActivity(task, corrToken)"
          ],
          "context_snippets": [
            "ActivityKind.Consumer,\n\t\t\t\t\tparentContext: correlationToken.ToActivityContext())\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);",
            "parentContext: correlationToken.ToActivityContext())\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);\n\t}",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageType, TraceSemanticConventions.MessageTypeValues.Received)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageTaskName, TypeName)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageQueueType, ServiceTraceSemanticConventions.DocuSignMessageQueueTypeWorker)\n\t\t\t\t?.SetQueueTaskTags(task);\n\t}\n}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (9 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid), Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid); Contains method call: SetTag (9 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid)",
            "Pattern: ActivitySource",
            "Pattern: StartActivity",
            "Import: var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid)",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var span = StartActivity()",
            "Pattern: Instrumentation",
            "OpenTelemetry",
            "SetTag",
            "ActivitySource"
          ],
          "context_snippets": [
            "LastProcessDate = DateTime.UtcNow;\n\n\t\t\tusing var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity.Uid);\n\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\n            if (activity == null) throw new ApplicationException(string.Format(\"Cannot find expected activity {0} in workflow map for instanceUid {1}\", instanceActivity.ActivityTypeName, Uid));",
            "LastProcessDate = DateTime.UtcNow;\n\n\t\t\tusing var span = StartActivity()\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, instanceActivity?.Uid);\n\n            IWINSActivity activity = _SafeGetActivity(instanceActivity);\n            if (activity == null) return;",
            "private Activity StartActivity([CallerMemberName] string name = \"\") => ServiceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)",
            "?.StartActivity($\"{nameof(WorkflowInstance)}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)",
            ".SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);",
            ".SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);",
            ".SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, _instance.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\n\n\t\tprivate void CheckAndHandleInstanceStateChanges()",
            ".SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, _instance.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, _instance.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, _instance.RevisionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, _instance.DefinitionUid);\n\n\t\tprivate void CheckAndHandleInstanceStateChanges()\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "SetTag",
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [
            "private Activity? StartActivity([CallerMemberName] string name = \"\") => _serviceInstrumentation?.ActivitySource\n                ?.StartActivity($\"{nameof(WinsService)}.{name}\")\n                ?.SetStatus(ActivityStatusCode.Error)\n                ?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n}\n\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Trace, Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId); Contains method call: SetTag (54 times); Matches 3 keywords: SetTag, AddTag, OpenTelemetry",
          "matching_patterns": [
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: OpenTelemetry.Trace",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid)",
            "Pattern: Instrumentation",
            "OpenTelemetry",
            "SetTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid)",
            "Pattern: AddTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid)",
            "AddTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)",
            "Pattern: OpenTelemetry",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid)",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)"
          ],
          "context_snippets": [
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.StartParameters?.Submitter);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))\n\t\t{",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartRoutingApprovalWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t\treturn Task.FromResult(new SendStartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private void OnPostRequestHandlerExecute(object sender, EventArgs e)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\n\t\t\tLogSessionSize(HttpContext.Current?.Session);\n\t\t\t_performanceLog.SetSession(HttpContext.Current?.Session);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\n\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (1 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t\t?.SetStatus(ActivityStatusCode.Ok)",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Monitoring",
            "Import: DocuSign.Monitoring",
            "Pattern: ActivitySource",
            "Pattern: StartActivity",
            "SetTag",
            "Import: OpenTelemetry.Instrumentation.AspNet",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: var activity = StartActivity()",
            "ActivitySource",
            "Import: OpenTelemetry.Context.Propagation"
          ],
          "context_snippets": [
            "private Activity StartActivity([CallerMemberName] string name = \"\") =>\n\t\t\tSessionStateProviderActivitySource\n\t\t\t\t.StartActivity($\"{nameof(RedisSessionStateProviderWrapper)}.{name}\")\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n\n\t\t#endregion\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorWindows.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "Import: var activity = StartActivity()",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "ActivitySource",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: Metrics"
          ],
          "context_snippets": [
            "{\n\t\t\tvar result = MimeLookup.GetMimeType(filePath);\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))",
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);",
            "?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.UrlMon))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n\n\tstatic class MimeLookup"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorCrossPlatform.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (3 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (3 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "Import: var activity = StartActivity()",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "ActivitySource",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: Metrics"
          ],
          "context_snippets": [
            "using var stream = File.OpenRead(filePath);\n\t\t\tvar result = MimeGuesser.GuessMimeType(stream);\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeType, result);\n\t\t\treturn result;\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))",
            "_serviceInstrumentation?.ActivitySource\n\t\t\t?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n}",
            "?.StartActivity($\"{InstrumentationNames.MimeDetector}.{name}\")\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignDetectTypeMimeDetectorType, nameof(MimeDetectiveType.MimeGuesser))\n\t\t\t?.SetMetricName(InstrumentationNames.MimeDetector);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (5 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions, Import: var activity = StartActivity(); Contains method call: SetTag (5 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Pattern: ActivitySource",
            "Import: var activity = StartActivity()",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "ActivitySource",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Pattern: Metrics"
          ],
          "context_snippets": [
            "_serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity($\"{InstrumentationNames.MediaInfo}.{name}\")\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name)\n\t\t\t\t?.SetMetricName(InstrumentationNames.MediaInfo);\n\n\t\tprivate Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>",
            "private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);",
            "private Activity SetVideoInfoTags(Activity activity, VideoInfoModel videoInfoModel) =>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}",
            "activity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}\n}",
            "?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoWidth, videoInfoModel.Width)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoHeight, videoInfoModel.Height)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoDuration, videoInfoModel.Duration)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignVideoInfoCodec, videoInfoModel.Codec);\n\t}\n}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Extensions/Telemetry/ActivityExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times); Matches 2 keywords: SetTag, OpenTelemetry",
          "matching_patterns": [
            "SetTag",
            "OpenTelemetry"
          ],
          "context_snippets": [
            "where T : IQueueTask\n\t\t=>\n\t\tactivity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);",
            "=>\n\t\tactivity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);",
            "activity\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\n\n\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)",
            "?.SetTag(TraceSemanticConventions.AttributeMessageId, task.MessageId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, task.AccountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeMessagingConversationId, task.CorrelationId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageUniqueId, task.UniqueId);\n\n\tpublic static Activity? SetQueueTaskResultTags<T>(this Activity? activity, T task, ProcessTaskResult result)\n\t\twhere T : IQueueTask",
            "where T : IQueueTask\n\t\t=>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\n}\n#nullable restore",
            "=>\n\t\t\tactivity\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageResultMessage, result.Message)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignMessageLastErrorMessage, task.LastErrorMessage);\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Matches 3 keywords: SetTag, middleware, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Pattern: Monitoring",
            "Pattern: Activity.Current",
            "Import: DocuSign.Monitoring",
            "middleware",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "Import: DocuSign.CLM.Monitoring.HttpModules"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tif (!string.IsNullOrEmpty(context.Request[Constants.QueryStringParameters.SAMLResponse]))"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (15 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes)), Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid); Contains method call: SetTag (15 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes))",
            "Pattern: OpenTelemetry",
            "Import: var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Pattern: ActivitySource",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: SetAttribute",
            "Pattern: Instrumentation",
            "ActivitySource",
            "SetTag",
            "Import: var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Import: var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)"
          ],
          "context_snippets": [
            "using var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();",
            "?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();\n\t\t\tvar statusMessages = new Messages();",
            "{\n\t\t\t\tattrvm = WebUtility.HtmlDecode(attrvm);\n\t\t\t\tvar attributes = attrvm.ToObject<AttributesViewModel>();\n\t\t\t\tsaveActivity?.SetTag(\"docusign.document.id\", attributes.docUid);\n\n\t\t\t\tvar document = LoadAndValidateDocument(attributes.docUid);",
            "using var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\tif (!HasSufficientRightsToView())",
            "using var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry",
            "using var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "using var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tFileUploadInfo fileUploadInfo = null;"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "public virtual void BeginRequest(HttpContext httpContext)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n\n\t\t\tif (httpContext.Handler is MvcHandler)\n\t\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "AttemptEventSource.Emit(counterInstanceName);\n\n#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif",
            "#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif\n\n\t\t\tStopwatch sw = Stopwatch.StartNew();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Controls/FormExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (10 occurrences); Contains method call: SetTag (10 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "{\n               tag.MergeAttribute(\"id\", id);\n           }\n           SetTagContent(tag, text);\n       }\n\n       private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)",
            "private static void ConfigureAtlasLinkTag(TTagBuilder tag, string text, Dictionary<string, string> attributes)\n       {\n           tag.MergeAttributes(attributes);\n           SetTagContent(tag, text);\n       }\n\n       private static void ConfigureAtlasImageTag(TTagBuilder tag, string spriteClassName, string additionalClassName)",
            "{\n           tag.ApplyHtmlAttributes(htmlAttributes);\n           tag.AddCssClass(\"LinkButton\");\n           SetTagContent(tag, string.IsNullOrWhiteSpace(text) ? WebCommonUI.Resources.Common.Close : text);\n           if (!tag.Attributes.ContainsKey(\"onclick\"))\n           {\n               tag.Attributes.Add(\"onclick\", \"CloseWindoid();return false;\");",
            "}\n           }, TTagRenderMode.SelfClosing);\n\n           SetTagContent(tag, imageHtml);\n       }\n\n       private static THtml BuildAtlasMetadataField(THtmlHelper html, string name, Enums.DataType fieldType, List<string> allowedValues, string value, CultureInfo culture)",
            "div.ApplyHtmlAttributes(htmlAttributes);\n           div.AddCssClass(\"atlasfield\");\n           div.Attributes.Add(\"id\", $\"{member.Member.Name}Field\");\n           SetTagContent(div, labelHtml, controlHtml);\n       }\n\n       private static void ConfigureFaUxFieldFor<TModel, TValue>(TTagBuilder div, Expression<Func<TModel, TValue>> expression, object htmlAttributes, THtml labelHtml, THtml controlHtml)",
            "t.AddCssClass(\"theme_primary-dark_background-color\");\n           });\n\n           SetTagContent(div, icon, controlHtml, labelHtml, spanLine);\n       }\n\n       private static TTagBuilder BuildLabel(string name, string displayName)",
            "var tag = new TTagBuilder(\"label\");\n           tag.Attributes[\"for\"] = name;\n           tag.AddCssClass(AtlasLabelName);\n           SetTagContent(tag, displayName);\n           return tag;\n       }",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, string content)\n       {\n#if NETFRAMEWORK\n           tag.SetInnerText(content);",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, THtml htmlContent)\n       {\n#if NETFRAMEWORK\n           tag.InnerHtml = htmlContent.ToHtmlString();",
            "/// <summary>\n       /// Abstraction for setting tag content to handle framework differences.\n       /// </summary>\n       private static void SetTagContent(TTagBuilder tag, params THtml[] htmlContents)\n       {\n#if NETFRAMEWORK\n           using (var writer = new StringWriter())"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "private static void OnPostRequestHandlerExecute(HttpContext context)\n\t{\n\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\tif (HasSession(context))\n\t\t{\n\t\t\tLogSessionSize(context.Session);"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowScopeEvents/WorkflowScopeEventsController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "SetTag",
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowScopeEventsTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowActivities/WorkflowActivitiesController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (6 occurrences); Contains method call: SetTag (6 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "SetTag",
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignInstanceUid, instanceUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignActivityUid, activityUid)\n\t\t\t?.SetTag(WorkflowActivitiesTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowDefinition/WorkflowDefinitionController.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (4 occurrences); Contains method call: SetTag (4 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            ".StartActivity($\"{GetType().Name}.{name}\")\n\t\t\t.SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);",
            ".SetMetricName(InstrumentationNames.ActivitySourceName)\n\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}",
            "?.SetTag(TraceSemanticConventions.AttributeCodeFunction, $\"{GetType().Name}.{name}\")\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userAccountUid)\n\t\t\t?.SetTag(WorkflowDefinitionTraceSemanticConventions.AttributeDocuSignRevisionUid, revisionUid);\n\t}\n}\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/OpenXmlExtensions.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "return sdtElement.SdtProperties.GetFirstChild<Tag>().Val.Value;\n        }\n\n        public static void SetTag(this SdtElement sdtElement, string tag)\n        {\n            if (sdtElement == null) return;\n            if (sdtElement.SdtProperties == null) sdtElement.SdtProperties = new SdtProperties();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (7 occurrences); Contains method call: SetTag (7 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "namespace ADEXS.Core.Domain.Utilities;\npublic static class ActivityEnricher\n{\n\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\n\t{\n\t\tif (activity == null)\n\t\t{",
            "{\n\t\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\n\t\t\treturn;\n\t\t}",
            "var account = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(account))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\n\t\t\treturn;\n\t\t}",
            "var userId = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(userId))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\n\t\t}\n\t}\n#else",
            "var session = context == null ? null : GetSession(context);\n\t\tif (!string.IsNullOrEmpty(session?.Id))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\n\t\t}\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/MergeType/RepeatingSectionMergeType.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "mergeType.Merge();\n                }\n\n                newSection.SetTag(string.Empty);\n            }\n\n            _sdtElement.Remove();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Repository/Workflow/Client/WorkflowV1GrpcClient.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Contains method call: SetTag (54 times)",
          "matching_patterns": [
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid)",
            "Import: DocuSign.CLM.Monitoring",
            "Import: OpenTelemetry.Trace",
            "Import: DocuSign.Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid)",
            "Pattern: Instrumentation",
            "SetTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\n\t\t\t\tactivityUid.ToString())",
            "Pattern: ActivitySource",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString())",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString())",
            "Pattern: OpenTelemetry",
            "Pattern: Monitoring",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid)",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)"
          ],
          "context_snippets": [
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "headers: GetHeaders(request.User.AccountId),\n\t\t\t\t\t\t\t\tcancellationToken: cancellationToken)));\n\n\t\t\t\tactivity?.SetTag(\n\t\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\t\tresponse.Definition.Uid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, versionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, sourceVersionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t// NOTE: can't rely on exact instance. See RemoteWorkflowClient.RouteRemoteRequest. We need to find other way. E.g. use messages.\n\t\tvar serviceClient = GetWinsServiceClient(user.AccountId, instanceUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "object? callbackData = null)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid,\n\t\t\t\tactivityUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid,\n\t\t\t\tinstanceUid.ToString())\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid,\n\t\t\t\trevisionUid.ToString());",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\n\n\t\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, workItemUid);\n\n\t\tvar serviceClient = GetWinsServiceClientByWorkItem(user.AccountId, workItemUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, version.Uid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\tversion.DefinitionUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revision.Uid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, revision.VersionUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid,\n\t\t\t\trevision.DefinitionUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, user.AccountId);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid);",
            "}\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, userAccount.AccountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, activityUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(",
            ".SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid,\n\t\t\t\tsourceInstanceUid)\n\t\t\t.SetTag(\n\t\t\t\tWorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid,\n\t\t\t\tsourceActivityUid);",
            "int activityExecutionCount)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\n\n\t\treturn ExecuteWithResults(",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, accountId)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid)\n\t\t\t.SetTag(WorkflowServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, revisionUid);\n\n\t\treturn ExecuteWithResults(\n\t\t\tactivity,",
            "private Activity? StartActivity([CallerMemberName] string name = \"\") => _instrumentation?.ActivitySource\n\t\t?.StartActivity($\"{nameof(WorkflowV1GrpcClient)}.{name}\", ActivityKind.Client)\n\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n\n\tprivate WinsService.WinsServiceClient GetWinsServiceClientByWorkItem(int accountId, Guid workItemUid)\n\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Import: OpenTelemetry.Metrics; Matches 2 keywords: middleware, OpenTelemetry",
          "matching_patterns": [
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Import: OpenTelemetry.Metrics",
            "Pattern: OpenTelemetry",
            "Config file: program.cs",
            "middleware",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters",
            "Pattern: Metrics"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
          "matching_patterns": [
            "Import: ADEXS.Caching.OpenTelemetry.Extensions",
            "Import: ADEXS.CqlCorePersistence.OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry",
            "Import: OpenTelemetry.Exporter",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: ConfigureServices",
            "Config file: startup.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/ICoreInstrumentationLifetimeService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: TracerProvider",
            "Pattern: MeterProvider",
            "Config file: icoreinstrumentationlifetimeservice.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/CoreInstrumentationLifetimeService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: TracerProvider",
            "Pattern: MeterProvider",
            "Config file: coreinstrumentationlifetimeservice.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: Activity.Current",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [
            "exception = allError[allError.Length - 1];\n\t\t\t}\n\t\t\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\n\t\t\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\n\t\t\t_log.ErrorNoPII(message, exception);"
          ],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types/Constants.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "file contains configuration or constants; contains telemetry symbol: ADEXS.Core.Types.Constants.Forms.EmitMetafieldInputAttribute(System.Guid); has relationship to telemetry symbol: ADEXS.Core.Types.Constants.Forms.EmitMetafieldInputAttribute(System.Guid); contains telemetry symbol: ADEXS.Core.Types.Constants.Forms.EmitMetagroupLabelElement(System.Guid); symbol is application entry point or middleware; contains HTTP-related constant: ADEXS.Core.Types.Constants.CustomHeaders; contains HTTP-related constant: ADEXS.Core.Types.Constants.DocuSignCustomHeaders; contains HTTP-related constant: ADEXS.Core.Types.Constants.ActCustomHeaders; contains HTTP-related constant: ADEXS.Core.Types.Constants.HttpContextCache; contains HTTP-related constant: ADEXS.Core.Types.Constants.HttpContextCookie; contains telemetry symbol: ADEXS.Core.Types.Constants.SystemMetadataGroupNames; contains telemetry symbol: ADEXS.Core.Types.Constants.HtmlAttributes; contains HTTP-related constant: ADEXS.Core.Types.Constants.Allocation; contains telemetry symbol: ADEXS.Core.Types.Constants.FileDataSource.UploadSourceAttribute; contains telemetry symbol: ADEXS.Core.Types.Constants.MetadataHtmlAttributes; contains telemetry symbol: ADEXS.Core.Types.Constants.AgreementDetailsImpliedMetadataGuids",
          "matching_patterns": [
            "configuration_pattern",
            "telemetry_symbol_ADEXS.Core.Types.Constants.Forms.EmitMetafieldInputAttribute(System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Types.Constants.Forms.EmitMetagroupLabelElement(System.Guid)",
            "application_entry_point",
            "http_constant_ADEXS.Core.Types.Constants.CustomHeaders",
            "http_constant_ADEXS.Core.Types.Constants.DocuSignCustomHeaders",
            "http_constant_ADEXS.Core.Types.Constants.ActCustomHeaders",
            "http_constant_ADEXS.Core.Types.Constants.HttpContextCache",
            "http_constant_ADEXS.Core.Types.Constants.HttpContextCookie",
            "telemetry_symbol_ADEXS.Core.Types.Constants.SystemMetadataGroupNames",
            "telemetry_symbol_ADEXS.Core.Types.Constants.HtmlAttributes",
            "http_constant_ADEXS.Core.Types.Constants.Allocation",
            "telemetry_symbol_ADEXS.Core.Types.Constants.FileDataSource.UploadSourceAttribute",
            "telemetry_symbol_ADEXS.Core.Types.Constants.MetadataHtmlAttributes",
            "telemetry_symbol_ADEXS.Core.Types.Constants.AgreementDetailsImpliedMetadataGuids"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Types/Enums.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<System.ComponentModel.DescriptionAttribute>.FirstOrDefault<System.ComponentModel.DescriptionAttribute>(); has relationship to telemetry symbol: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool); has relationship to telemetry symbol: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/ApplicationSettings.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "file is part of web application infrastructure; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware",
          "matching_patterns": [
            "web_application_pattern",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/ApplicationSettingsWrapper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "file is part of web application infrastructure; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware; symbol is application entry point or middleware",
          "matching_patterns": [
            "web_application_pattern",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point",
            "application_entry_point"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Attributes/AttributeManagementService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GroupMetadataIntoAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetMetadataGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataRepository.GetMetadataFieldsByMetadataGroupUid(int, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.MetadataFieldToMetadataInstance(ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GroupMetadataIntoAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>.ToList<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroupFromMetadataInstance(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroup(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Guid?, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAISuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetRequiredMetadataInstances(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, bool); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataFieldService.LoadByMetadataGroupUid(System.Guid, int, bool); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.Save(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Guid?, System.Guid, System.Guid, string, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, ADEXS.Core.Domain.DataReview.DataReviewValidationContext); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetRequiredMetadataInstances(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, bool); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.UpdateStandardAttributesStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.ToList<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.RemoveAttributeGroupFromDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository.AttributesShouldBeReadOnly(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SendFeedback(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Globalization.CultureInfo); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.FirstOrDefault<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(System.Func<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, bool>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetFeedbackValue(System.Globalization.CultureInfo, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.IDataReviewStandardAttributeHelper.NormalizeValue(string, ADEXS.Core.Types.Enums.AttributeFieldType, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseUpdatedAttributesForStagedMetadataUpdate(System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>.ToList<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseNotUpdatedAttributesForStagedMetadataUpdate(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<System.Guid, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>>.FirstOrDefault<System.Linq.IGrouping<System.Guid, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.ValidateValueConstraints(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.MapObjectType(ADEXS.Core.Domain.MetadataLoader.Models.Type?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.MapObjectType(ADEXS.Core.Domain.MetadataLoader.Models.Type?); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SetMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.FirstOrDefault<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(System.Func<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, bool>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAllowedValues(ADEXS.Core.Domain.DataReview.Models.AttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ref System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata); has relationship to telemetry symbol: ADEXS.Core.Domain.SmartAgreement.IAIMetadataHelper.GetAllowedValues(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, string, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>, string, string, int); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStandardAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, string); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardFieldHelper.GetAttributeReviewData(System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.ToList<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadata, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadata, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.IDataReviewFieldHelper.GetAttributeReviewData(System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedSet(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithValues(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Linq.IOrderedEnumerable<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Linq.IGrouping<int, ADEXS.Core.Domain.Model.Metadata>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithValues(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Linq.IOrderedEnumerable<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Linq.IGrouping<int, ADEXS.Core.Domain.Model.Metadata>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithoutValues(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroup(string, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewData>); has relationship to telemetry symbol: ADEXS.Core.Domain.SmartAgreement.Utilities.LocalizationUtility.LocalizeMetadataName(string); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.LogAttributeHistory(ADEXS.Core.Domain.Model.UserAccount, string, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeManagementService.CanUpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.DocumentRepository.IDocumentRepository.AttributesShouldBeReadOnly(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetMetadataGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.MetadataFieldToMetadataInstance(ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GroupMetadataIntoAttributeReviewGroups(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroupFromMetadataInstance(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttributeReviewGroup(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Guid?, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAISuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetRequiredMetadataInstances(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, bool)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.Save(ADEXS.Core.Domain.Model.UserAccount, System.Globalization.CultureInfo, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Guid?, System.Guid, System.Guid, string, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, ADEXS.Core.Domain.DataReview.DataReviewValidationContext)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.UpdateStandardAttributesStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.RemoveAttributeGroupFromDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SendFeedback(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetFeedbackValue(System.Globalization.CultureInfo, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseUpdatedAttributesForStagedMetadataUpdate(System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.ParseNotUpdatedAttributesForStagedMetadataUpdate(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.SmartAgreement.Models.UpdateStagedMetadataItem>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.ValidateValueConstraints(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, System.Collections.Generic.List<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.MapObjectType(ADEXS.Core.Domain.MetadataLoader.Models.Type?)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SetMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewGroup>, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.SetAllowedValues(ADEXS.Core.Domain.DataReview.Models.AttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ref System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>, ADEXS.Core.Domain.Model.AIDocument.StagedMetadata)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStandardAttribute(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo, string)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewData(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadata, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewDataRepeatedSet(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithValues(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, System.Linq.IOrderedEnumerable<ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Linq.IGrouping<int, ADEXS.Core.Domain.Model.Metadata>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateRepeatableSetWithoutValues(System.Linq.IGrouping<string, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance>, System.Globalization.CultureInfo, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.DataReviewFieldService(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance, bool, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CreateAttributeReviewGroup(string, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.AttributeReviewData>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.LogAttributeHistory(ADEXS.Core.Domain.Model.UserAccount, string, ADEXS.Core.Domain.Model.Document)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeManagementService.CanUpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.IAttributeManagementService"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/CoreDomainRegistry.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.SetHandlerLifetime(System.TimeSpan); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.Attributes.IAttributeDefinitionsCopyUtility>.Use<ADEXS.Core.Domain.Attributes.AttributeDefinitionsCopyUtility>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository>.Use<ADEXS.Core.Domain.Repository.MetadataRepository.MetadataGroupRepository>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.Persistence.Model.IMetadataGroupPersistence>.Use<ADEXS.Core.Domain.Persistence.Model.MetadataGroupPersistence>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.SmartAgreement.ISmartAgreementExecutionService>.Use<ADEXS.Core.Domain.SmartAgreement.SmartAgreementExecutionService>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.UnifiedRepository.IUnifiedRepositoryAttributeSyncService>.Use<ADEXS.Core.Domain.UnifiedRepository.UnifiedRepositoryAttributeSyncService>(); has relationship to telemetry symbol: StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression<ADEXS.Core.Domain.SmartAgreement.IAPRAIIngestionService>.Use<ADEXS.Core.Domain.SmartAgreement.APRAIIngestionService>(); has relationship to telemetry symbol: StructureMap.IRegistry.AddScopedConfigType<ADEXS.Core.Domain.FeatureFlags.IDocumentAttributesFeatureFlagsConfig>(string, string)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataProvider/CLMCustomAttributesDataReviewProvider.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider; contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseAttributeUpdates(out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.IsNullOrEmpty<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.Save(System.Guid, System.Guid, string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseMetadataFields(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, out ADEXS.Core.Domain.Model.Metadatas, out ADEXS.Core.Domain.Model.Metadatas); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.ToList<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.NewGroupOnTheDocument(System.Guid); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateMetadataPlaceHolderForGroup(System.Guid, string, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseRepeatingItems(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>.GroupBy<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), int>(System.Func<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), int>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCascadingSets(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildNonRepeatingMetadata(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsMarkedForDelete(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.LogFieldParsingMessage(string, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsCascadingSet(ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.Model.MetadataField>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsRepeatingField(ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetGroupSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Linq.IOrderedEnumerable<int>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetRepeatingMetadata(ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadatas); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataRepeating(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateNewRepeating((ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ADEXS.Core.Domain.Model.Metadata); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataObj(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCreatingNewMetadata(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsMarkedForDelete(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateMetadataValue(string, string, out string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateMetadataValue(string, string, out string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data)); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>.ToList<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>(); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>.Any<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>()",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseAttributeUpdates(out System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.Save(System.Guid, System.Guid, string)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseMetadataFields(ADEXS.Core.Domain.DataReview.Models.SaveDataReviewDataModel, out ADEXS.Core.Domain.Model.Metadatas, out ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.NewGroupOnTheDocument(System.Guid)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateMetadataPlaceHolderForGroup(System.Guid, string, ADEXS.Core.Domain.Model.Document)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseRepeatingItems(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCascadingSets(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, System.Collections.Generic.Dictionary<System.Guid, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)>>, ADEXS.Core.Domain.Model.MetadataFields, ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildNonRepeatingMetadata(ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.Model.Metadatas, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.LogFieldParsingMessage(string, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsCascadingSet(ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.Model.MetadataField>)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsRepeatingField(ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Guid)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetGroupSetNumber(System.Collections.Generic.List<int>, ref int, int, System.Linq.IOrderedEnumerable<int>)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.GetRepeatingMetadata(ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.Metadatas)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataRepeating(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.CreateNewRepeating((ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf), System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ADEXS.Core.Domain.Model.Metadata)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.BuildUpdateMetadataObj(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ParseCreatingNewMetadata(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.MetadataField, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.IsMarkedForDelete(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateValue(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.Metadata, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, ref string, bool)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateMetadataValue(string, string, out string)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data))",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(ADEXS.Core.Domain.Model.MetadataFields, (System.Guid setId, System.Collections.Generic.List<(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData, ADEXS.Core.Domain.Model.MetadataField mf)> data), System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataProvider.CLMCustomAttributesDataReviewProvider.ValidateCascadeSet(System.Collections.Generic.List<(ADEXS.Core.Domain.Model.Metadata m, ADEXS.Core.Domain.Model.MetadataField mf, ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData inputData)>, System.Collections.Generic.Dictionary<System.Guid, ADEXS.Core.Domain.Repository.MetadataRepository.CascadingFieldSet>)",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataReviewService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>.IsNullOrEmpty<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>(); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.LoadAiSuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, string, System.Globalization.CultureInfo); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.FirstOrDefault<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>(System.Func<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, bool>); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>.ToList<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadata(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.LoadAiSuggestions(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.StagedMetadata>, string, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.GetSupportedAttributes(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.Workflow.Types.MetadataConfiguration.MetadataConfigurationCollection)",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewService.GetStagedMetadatas(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Document)",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/SfMerge.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 100,
          "reasoning": "has relationship to telemetry symbol: System.Diagnostics.Stopwatch.StartNew(); has relationship to telemetry symbol: System.Diagnostics.Stopwatch.Reset(); has relationship to telemetry symbol: System.Diagnostics.Stopwatch.Restart(); has relationship to telemetry symbol: System.Diagnostics.Stopwatch.Restart(); has relationship to telemetry symbol: System.Xml.XmlElement.SetAttribute(string, string); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WINSManager.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: Monitoring = DocuSign.Monitoring, Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName), Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
          "matching_patterns": [
            "Import: Monitoring = DocuSign.Monitoring",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tvar result = WINSClientLibrary.CreateNewWorkflowDefinition(user, workflowName)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.LoadWorkItem(user, workItemUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSaveInstanceStateChangedForGrpcEngineV1(instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId, instanceUid))\n\t\t\t\t{\n\t\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIWINSControlInstance control = WorkflowManager.Instance.GetControlInstance(user.AccountId, instanceUid)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.InfoNoPII(string.Format(\"SubmitWorkItem: WorkItemUid {0}, output {1}\", workItemUid, PII.Encode(output)))",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IVersionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, version.Uid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar design = ServiceLocator.GetInstance<CoreDomainWorkflowRepository.IRevisionRepository>().LoadDesignerDefinitionByUid(user.AccountId, user.Uid, revision.Uid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar result = new Legacy2Designer(new DefinitionReaderLegacy(oldDesign)).Convert(user)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tstring jwtToken = null",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(userAccount.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(userAccount.AccountId, sourceInstanceUid))\n\t\t\t{\n\t\t\t\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\n\t\t\t{\n\t\t\t\tMonitoring.ServiceContext.Log(Monitoring.DataPoint.WorkflowActivityUid, activityUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tvar result = WINSClientLibrary.ExportWorkflowDefinition(user, workflowName, versionNumber, revisionNumber)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tCheckEnableMigrationSuspendWorkflowFeature(user.AccountId)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.VersionWorkflow(user, workflowName, sourceVersionNumber, sourceRevisionNumber, newVersionNumber, comment)",
            "Import: (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t\t{\n\t\t\t\t\tvar result = WINSClientLibrary.VersionWorkflow(user, sourceVersionUid, sourceRevisionNumber, newVersionNumber, comment)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(accountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(accountId, instanceUid))\n\t\t\t{\n\t\t\t\tbool isActivityExecutionLimitReached = Governor.IsActivityExecutionLimitReached(accountId, instanceUid, revisionUid, revisionCreatedDate, activityExecutionCount, out _)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\n\t\t\t\t{\n\t\t\t\t\tStartParameters startParameters = new StartParameters(user, xmlParam, sourceType, sourceId)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, default(Guid))))\n\t\t\t\t{\n\t\t\t\t\tGuid result = WorkflowRepository.SendStartWorkflow(user, workflowName, sourceType, sourceId, xmlParam)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tGuid result = _StartWorkflow(user.AccountId, user.Uid, workflowName, xmlParam, sourceType, sourceId, instanceUid)",
            "Import: (CreateFeatureFlagsRemoteCallWrapper(user.AccountId))\n\t\t\tusing (var logger = BuildRequestEventLoggerAndClearMonitoringContext(user.AccountId))\n\t\t\t{\n\t\t\t\tusing (ScmNDC.Push(BuildNDCTags(user.AccountId, instanceUid)))\n\t\t\t\t{\n\t\t\t\t\tGuid result = _StartWorkflow(user.AccountId, revisionUid, startParameters, instanceUid)",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Controllers/WorkflowActivitiesController.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.Monitoring, Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid), Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
          "matching_patterns": [
            "Import: DocuSign.Monitoring",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope(\"AccountId: {AccountId}, UserAccountUid: {UserAccountUid}\", accountId, userAccountUid))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: StartActivity"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 90,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: ADEXS.DetectTypeService.Telemetry.Metrics.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Config file: program.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 90,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Pattern: OpenTelemetry",
          "matching_patterns": [
            "Import: ADEXS.AdvancedInsightsService.Telemetry.MetricsEmitters",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Config file: program.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AdvancedInsightsService/Telemetry/MetricsEmitters/AdvancedInsightsMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/MimeDetectorMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/MediaInfoMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/VideoInfoMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Telemetry/Metrics/MetricsEmitters/DetectTypeMetricsEmitter.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 90,
          "reasoning": "Matches 2 keywords: ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.6
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/ActIntegration/Client/ActIntegrationClient.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2Async(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequest(ADEXS.Core.Domain.Model.UserAccount, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon); has relationship to telemetry symbol: System.TimeSpan.FromSeconds(double); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.GetHttpClient(); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.GetTokenScopesForHttpMethod(System.Net.Http.HttpMethod, ADEXS.ActIntegration.ActAccountInfo); contains HTTP-related constant: ADEXS.ActIntegration.ActIntegrationClient.AddDefaultRequestHeaders(ADEXS.ActIntegration.ActAccountInfo, string, System.Net.Http.HttpClient, string, string, string)",
          "matching_patterns": [
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2Async(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool)",
            "telemetry_relationship",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequestV2(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon, bool)",
            "telemetry_relationship",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.MakeHttpRequest(ADEXS.Core.Domain.Model.UserAccount, System.Net.Http.HttpMethod, string, string, string, string, int, DocuSign.CLM.Monitoring.SmartMon.ISmartMon)",
            "telemetry_relationship",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.GetHttpClient()",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.GetTokenScopesForHttpMethod(System.Net.Http.HttpMethod, ADEXS.ActIntegration.ActAccountInfo)",
            "http_constant_ADEXS.ActIntegration.ActIntegrationClient.AddDefaultRequestHeaders(ADEXS.ActIntegration.ActAccountInfo, string, System.Net.Http.HttpClient, string, string, string)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients/DacDocGenApiClient/Api/GenApi.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfo(string, DacDocGenApiClient.Model.GenerateDocumentRequest); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfoAsync(string, DacDocGenApiClient.Model.GenerateDocumentRequest, System.Threading.CancellationToken); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfo(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfoAsync(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest, System.Threading.CancellationToken); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfo(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?); contains HTTP-related constant: DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfoAsync(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?, System.Threading.CancellationToken)",
          "matching_patterns": [
            "http_constant_DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfo(string, DacDocGenApiClient.Model.GenerateDocumentRequest)",
            "http_constant_DacDocGenApiClient.Api.GenApi.GenerateDocumentV1WithHttpInfoAsync(string, DacDocGenApiClient.Model.GenerateDocumentRequest, System.Threading.CancellationToken)",
            "http_constant_DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfo(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest)",
            "http_constant_DacDocGenApiClient.Api.GenApi.ParseTemplateV1WithHttpInfoAsync(System.Guid, DacDocGenApiClient.Model.ParseTemplateRequest, System.Threading.CancellationToken)",
            "http_constant_DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfo(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?)",
            "http_constant_DacDocGenApiClient.Api.GenApi.UploadTemplateV1WithHttpInfoAsync(System.Guid, string, DacDocGenApiClient.Client.FileParameter, long?, System.Threading.CancellationToken)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/OpenApiClients/DacDocGenApiClient/Client/ApiClient.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: DacDocGenApiClient.Client.CustomJsonCodec.Deserialize<T>(System.Net.Http.HttpResponseMessage); contains HTTP-related constant: DacDocGenApiClient.Client.CustomJsonCodec.Deserialize(System.Net.Http.HttpResponseMessage, System.Type); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.NewRequest(System.Net.Http.HttpMethod, string, DacDocGenApiClient.Client.RequestOptions, DacDocGenApiClient.Client.IReadableConfiguration); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.InterceptRequest(System.Net.Http.HttpRequestMessage); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.InterceptResponse(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.ToApiResponse<T>(System.Net.Http.HttpResponseMessage, object, System.Uri); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.Exec<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration); contains HTTP-related constant: DacDocGenApiClient.Client.ApiClient.ExecAsync<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration, System.Threading.CancellationToken)",
          "matching_patterns": [
            "http_constant_DacDocGenApiClient.Client.CustomJsonCodec.Deserialize<T>(System.Net.Http.HttpResponseMessage)",
            "http_constant_DacDocGenApiClient.Client.CustomJsonCodec.Deserialize(System.Net.Http.HttpResponseMessage, System.Type)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.NewRequest(System.Net.Http.HttpMethod, string, DacDocGenApiClient.Client.RequestOptions, DacDocGenApiClient.Client.IReadableConfiguration)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.InterceptRequest(System.Net.Http.HttpRequestMessage)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.InterceptResponse(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.ToApiResponse<T>(System.Net.Http.HttpResponseMessage, object, System.Uri)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.Exec<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration)",
            "http_constant_DacDocGenApiClient.Client.ApiClient.ExecAsync<T>(System.Net.Http.HttpRequestMessage, DacDocGenApiClient.Client.IReadableConfiguration, System.Threading.CancellationToken)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol/obj/Debug/net48/docusign/workflow/wins/v1alpha1/WinsModels.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.WriteTagAndValue(ref Google.Protobuf.WriteContext, string); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS.Protocol/obj/Debug/net48/docusign/workflow/wins/v1alpha1/WinsService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.WriteTagAndValue(ref Google.Protobuf.WriteContext, string); has relationship to telemetry symbol: Google.Protobuf.FieldCodec<string>.CalculateSizeWithTag(string); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag(); has relationship to telemetry symbol: Google.Protobuf.JsonFormatter.ToDiagnosticString(Google.Protobuf.IMessage); has relationship to telemetry symbol: Google.Protobuf.WriteContext.WriteRawTag(byte); has relationship to telemetry symbol: Google.Protobuf.ParseContext.ReadTag()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Atlas.Workflow.Client/WorkflowDesignRepository.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); has relationship to telemetry symbol: ADEXS.Atlas.Workflow.Client.Telemetry.WorkflowClientTelemetry.GetTimer(string); contains HTTP-related constant: ADEXS.Atlas.Workflow.Client.WorkflowDesignRepository.GetWorkflowDesignApi(int, System.Guid, System.Net.Http.HttpClient, string)",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "http_constant_ADEXS.Atlas.Workflow.Client.WorkflowDesignRepository.GetWorkflowDesignApi(int, System.Guid, System.Net.Http.HttpClient, string)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Adm/Mapping/AdmMapper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver; contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver.Resolve(ADEXS.Core.Domain.Model.Agreement, DocuSign.Adm.Api.Models.AgreementCreate, ADEXS.Core.Domain.Model.AgreementPeriod, DocuSign.Adm.Api.Models.TimeSpanUnits?, AutoMapper.ResolutionContext); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); has relationship to telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?); contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter; contains telemetry symbol: ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?)",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver",
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.AgreementMapperTimeSpanUnitsResolver.Resolve(ADEXS.Core.Domain.Model.Agreement, DocuSign.Adm.Api.Models.AgreementCreate, ADEXS.Core.Domain.Model.AgreementPeriod, DocuSign.Adm.Api.Models.TimeSpanUnits?, AutoMapper.ResolutionContext)",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter",
            "telemetry_symbol_ADEXS.Core.Domain.Adm.Mapping.TimeSpanUnitsConverter.Convert(DocuSign.Adm.Api.Models.TimeSpanUnits?)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AIConfiguration/ConfigurationService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "file contains configuration or constants; has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateAOMAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.GetAttributeGroups(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository.LoadByAccountId(int); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.SaveAttributeMapping(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMapping); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateClmAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository.LoadByUid(int, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateAOMAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.AgreementRepository.IAgreementFieldService.GetStandardFields(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.AgreementRepository.Tag?); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.ConfigurationService.CreateRuleModelMappingBasicDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.MetadataGroup, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsCustomAttributeSupported(ADEXS.Core.Domain.Model.MetadataField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsStandardAttributeSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.SmartAgreement.AIModelManagement.IAiModelManagement.GetAllowedModelItemsByAccount(ADEXS.Core.Domain.Model.Account); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.AgreementRepository.IAgreementFieldService.GetStandardFields(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.AgreementRepository.Tag?)",
          "matching_patterns": [
            "configuration_pattern",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.GetAttributeGroups(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.SaveAttributeMapping(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMapping)",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateClmAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.PopulateAOMAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>, System.Collections.Generic.List<ADEXS.Core.Domain.AIConfiguration.Models.RuleModelMappingBasicDetails>, System.Collections.Generic.List<System.Linq.IGrouping<ADEXS.Core.Types.Enums.AIRulesEngineMappingObjectType, ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.ConfigurationService.CreateRuleModelMappingBasicDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.Model.MetadataField, ADEXS.Core.Domain.Model.MetadataGroup, System.Collections.Generic.List<ADEXS.Core.Domain.Model.AIDocument.AIRulesEngineMapping>)",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AIConfiguration/Utilities/DataTypeHelper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "file contains configuration or constants; has relationship to telemetry symbol: System.Collections.Generic.Dictionary<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Types.Enums.AttributeFieldType>.GetValueOrDefault<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Types.Enums.AttributeFieldType>(ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Types.Enums.AttributeFieldType); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsSupported(ADEXS.Core.Types.Enums.DataType, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsCustomAttributeSupported(ADEXS.Core.Domain.Model.MetadataField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsSupported(ADEXS.Core.Types.Enums.DataType, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsStandardAttributeSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType); has relationship to telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.GetStandardAttributeDataType(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField); contains telemetry symbol: ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.GetStandardAttributeDataType(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField)",
          "matching_patterns": [
            "configuration_pattern",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsSupported(ADEXS.Core.Types.Enums.DataType, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType)",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsCustomAttributeSupported(ADEXS.Core.Domain.Model.MetadataField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.IsStandardAttributeSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField, out ADEXS.Core.Types.Enums.AttributeFieldType, out RulesEngineAPIClient.Model.DataType)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.AIConfiguration.Utilities.DataTypeHelper.GetStandardAttributeDataType(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField)"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Aom/AomUtilities.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeCustomNameToDefaultDictionary(ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeDefaultToCustomNameDictionary(ADEXS.Core.Domain.Model.UserAccount); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: LanguageExt.Prelude.Optional<ADEXS.Core.Domain.Model.MetadataGroup>(ADEXS.Core.Domain.Model.MetadataGroup?); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(System.Guid, ADEXS.Core.Domain.Model.MetadataFields); contains telemetry symbol: ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementValueFieldUid(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: LanguageExt.Prelude.Optional<ADEXS.Core.Domain.Model.MetadataGroup>(ADEXS.Core.Domain.Model.MetadataGroup?); has relationship to telemetry symbol: LanguageExt.Prelude.Optional<ADEXS.Core.Domain.Model.MetadataGroup>(ADEXS.Core.Domain.Model.MetadataGroup?)",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeCustomNameToDefaultDictionary(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeDefaultToCustomNameDictionary(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementTypeFieldUid(System.Guid, ADEXS.Core.Domain.Model.MetadataFields)",
            "telemetry_symbol_ADEXS.Core.Domain.Aom.AomUtilities.GetAgreementValueFieldUid(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/AtlasUrl/AllocationUrl.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl; contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAllocationUrl(ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardingType); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetLogin(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetApiRegistration(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetTwoFactor(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetToken(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetExternalDataMap(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteExternalDataMap(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncLogin(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncApiRegistration(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SaveLoginLock(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteLoginLock(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveLogin(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAccountRecord(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveAccount(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncAccount(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncToken(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncTwoFactor(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncExternalDataMap(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardRequest(string); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncSoapAuthToken(); contains HTTP-related constant: ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SiteWarmupPing()",
          "matching_patterns": [
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAllocationUrl(ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardingType)",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetLogin()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetApiRegistration()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetTwoFactor()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetToken()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetExternalDataMap()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteExternalDataMap()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncLogin()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncApiRegistration()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SaveLoginLock()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.DeleteLoginLock()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveLogin()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.GetAccountRecord()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ReserveAccount()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncAccount()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncToken()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncTwoFactor()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncExternalDataMap()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.ForwardRequest(string)",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SyncSoapAuthToken()",
            "http_constant_ADEXS.Core.Domain.AtlasUrl.AllocationUrl.SiteWarmupPing()"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Attributes/AttributePanelService.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributeGroupsNotInDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: System.Collections.Generic.IEnumerable<ADEXS.Core.Domain.Model.MetadataGroup>.ToList<ADEXS.Core.Domain.Model.MetadataGroup>(); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateDocumentNameAndDescription(ADEXS.Core.Domain.Model.UserAccount, System.Guid, string, string); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>, string, string, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.CanUpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid?); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetStandardAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.GetAllGroups(ADEXS.Core.Domain.Model.UserAccount, System.Guid, ADEXS.Core.Domain.MetadataLoader.Models.Type, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.GetAttributeGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributeManagementService.GetMetadataGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.SaveParty(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Party); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.FilterReadonlyFields(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.ShouldFilterReadonlyField(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, System.Collections.Generic.List<string>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributePanelService.ShouldFilterReadonlyField(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, System.Collections.Generic.List<string>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributePanelService",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributeGroupsNotInDocument(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateDocumentNameAndDescription(ADEXS.Core.Domain.Model.UserAccount, System.Guid, string, string)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.UpdateAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>, string, string, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetCustomAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid, System.Guid?)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetStandardAttributes(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.GetAttributeGroupDetails(ADEXS.Core.Domain.Model.UserAccount, System.Guid)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.SaveParty(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Party)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.FilterReadonlyFields(ADEXS.Core.Domain.Model.UserAccount, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributePanelService.ShouldFilterReadonlyField(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, System.Collections.Generic.List<string>)",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.IAttributePanelService"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Attributes/AttributesManagementFramework.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributeRegistry; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework; contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetAttributes(ADEXS.Core.Domain.Model.UserAccount, bool); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.VerifyAndAddMandatoryAttributes(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetUnsupportedAttributes(ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetAttributes(ADEXS.Core.Domain.Model.UserAccount, bool); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.VerifyAndAddMandatoryAttributes(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>); has relationship to telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.AddAttribute(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>, string); contains telemetry symbol: ADEXS.Core.Domain.Attributes.AttributesManagementFramework.AddAttribute(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>, string); has relationship to telemetry symbol: System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>.Exists(System.Predicate<ADEXS.Core.Domain.Attributes.AttributeRegistry>); contains telemetry symbol: ADEXS.Core.Domain.Attributes.IAttributesManagementFramework",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributeRegistry",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetAttributes(ADEXS.Core.Domain.Model.UserAccount, bool)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.GetUnsupportedAttributes(ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.VerifyAndAddMandatoryAttributes(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.AttributesManagementFramework.AddAttribute(System.Collections.Generic.List<ADEXS.Core.Domain.Attributes.AttributeRegistry>, string)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.Attributes.IAttributesManagementFramework"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataReviewAttributeFilter.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.MetadataFieldHelper.GetAttributeType(ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.DataReview.MetadataFieldHelper.GetAttributeType(ADEXS.Core.Domain.Model.MetadataField); has relationship to telemetry symbol: System.Collections.Generic.Dictionary<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Domain.DataReview.MetadataFieldHelper.AttributeType>.GetValueOrDefault<ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Domain.DataReview.MetadataFieldHelper.AttributeType>(ADEXS.Core.Types.Enums.DataType, ADEXS.Core.Domain.DataReview.MetadataFieldHelper.AttributeType); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter; contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.MetadataField); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.IAttributeHelper<ADEXS.Core.Domain.Model.MetadataField>.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.MetadataField); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.BuildField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string); contains telemetry symbol: ADEXS.Core.Domain.DataReview.IAttributeHelper<T>",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.MetadataFieldHelper.GetAttributeType(ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Repository.AgreementRepository.AgreementField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupported(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.MetadataField)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.BuildField(ADEXS.Core.Domain.MetadataLoader.Models.MetadataInstance)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewAttributeFilter.IsSupportedStandardAttribute(string)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.IAttributeHelper<T>"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DataReview/DataReviewAttributeHelper.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper; contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.ParseUpdatedAttributeAndUpdateAgreement(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Agreement, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetDecimalFromUpdatedValue(string, out decimal?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetNormalizedValueFromAgreement(ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, ADEXS.Core.Domain.Model.Agreement, ADEXS.Core.Domain.Model.UserAccount); has relationship to telemetry symbol: ADEXS.Core.Domain.Repository.AgreementRepository.IAgreementFieldService.GetStandardFields(ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Repository.AgreementRepository.Tag?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.NormalizeValue(string, ADEXS.Core.Types.Enums.AttributeFieldType, System.Globalization.CultureInfo); has relationship to telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryParseDateToUniversalDateComponent(string, out System.DateTime, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryParseDateToUniversalDateComponent(string, out System.DateTime, System.Globalization.CultureInfo); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetDecimalFromUpdatedValue(string, out decimal?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetBooleanFromUpdatedValue(string, out bool?); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetClauseOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData); contains telemetry symbol: ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetAgreementPeriodOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AgreementPeriod); contains telemetry symbol: ADEXS.Core.Domain.DataReview.IDataReviewStandardAttributeHelper",
          "matching_patterns": [
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.ParseUpdatedAttributeAndUpdateAgreement(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.UserAccount, ADEXS.Core.Domain.Model.Agreement, System.Collections.Generic.List<ADEXS.Core.Domain.DataReview.Models.SaveDataReviewValidationError>, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetNormalizedValueFromAgreement(ADEXS.Core.Domain.Model.AIDocument.StagedMetadata, ADEXS.Core.Domain.Model.Agreement, ADEXS.Core.Domain.Model.UserAccount)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.NormalizeValue(string, ADEXS.Core.Types.Enums.AttributeFieldType, System.Globalization.CultureInfo)",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryParseDateToUniversalDateComponent(string, out System.DateTime, System.Globalization.CultureInfo)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetDecimalFromUpdatedValue(string, out decimal?)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.TryGetBooleanFromUpdatedValue(string, out bool?)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetClauseOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.DataReviewStandardAttributeHelper.GetAgreementPeriodOrDefault(ADEXS.Core.Domain.DataReview.Models.SaveAttributeReviewData, ADEXS.Core.Domain.Model.AgreementPeriod)",
            "telemetry_symbol_ADEXS.Core.Domain.DataReview.IDataReviewStandardAttributeHelper"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/EOS/Implementation/ExternalObjectsStorage.cs",
          "strategy": "SearchStrategy.GRAPH_BASED",
          "relevance_score": 90,
          "reasoning": "has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); contains telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Domain.Persistence.Model.IMetadataFieldPersistence.LoadByMetadataGroupName(int, string); contains telemetry symbol: ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup(); has relationship to telemetry symbol: ADEXS.Core.Util.ServiceLocator.ServiceLocator.GetInstance<ADEXS.Core.Domain.Repository.MetadataRepository.IMetadataGroupRepository>()",
          "matching_patterns": [
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.EOS.ExternalObjectsStorage.LoadEosMetadataGroup()",
            "telemetry_relationship",
            "telemetry_relationship",
            "telemetry_symbol_ADEXS.Core.Domain.EOS.ExternalObjectsStorage.CreateEosMetadataGroup()",
            "telemetry_relationship"
          ],
          "context_snippets": [],
          "confidence": 0.8
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/AbstractServicedComponent.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: service invocation to start process,\n\t\t\t\t\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\n\t\t\t\t\t// using GetType().Assembly instead, which would provide correct release version.\n\t\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\t\tassembly: this.GetType().Assembly))\n\t\t\t\t\t\t\t.GetAwaiter().GetResult()",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: service invocation to start process,\n\t\t\t\t\t// so Assembly.EntryAssembly is not represents correct service assembly. We are\n\t\t\t\t\t// using GetType().Assembly instead, which would provide correct release version.\n\t\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\t\tassembly: this.GetType().Assembly))\n\t\t\t\t\t\t\t.GetAwaiter().GetResult()",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Ems/EmsRestClient.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveDocumentIngestPayload),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveDocumentIngestPayload),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnameof(SaveCustomAttributeDefinition),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n                                                                nameof(FinalizeCustomAttributeDefinition),\n                                                                new ClmTimingPhase(nameof(EmsRestClient)))",
            "Import: var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource,\n\t\t\tnameof(UpdateDocumentIdOfAgreementDocument),\n\t\t\tnew ClmTimingPhase(nameof(EmsRestClient)))",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/UnifiedRepository/UnifiedRepositoryIngestionService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 85,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Monitoring, Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document Permissions\")",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Monitoring",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessPermissions, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document Permissions\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessAttributes, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t{\n\t\t\tLog.InfoNoPII($\"Processing Document Attributes\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.AttributeSyncUsingIngestionService, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t{\n\t\t\tLog.InfoNoPII($\"Processing Document Attributes\")",
            "Import: (var timer = TimingEventSourceUtilities.GetTimer(MonitoringTimingEventSource, CounterInstanceDetails.ProcessHistory, CounterInstanceDetails.DocumentIngestionTiming))\n\t\t\t{\n\t\t\t\tLog.InfoNoPII($\"Processing Document History\")",
            "Pattern: Monitoring"
          ],
          "context_snippets": [],
          "confidence": 0.85
        }
      ],
      "error": null,
      "execution_time": 4.35722279548645,
      "cache_hit": false
    },
    "batch_filtering": {
      "stage_name": "batch_filtering",
      "status": "StageStatus.COMPLETED",
      "result": [
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\n\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "private void OnPostRequestHandlerExecute(object sender, EventArgs e)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\n\t\t\tLogSessionSize(HttpContext.Current?.Session);\n\t\t\t_performanceLog.SetSession(HttpContext.Current?.Session);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (54 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Trace, Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId); Contains method call: SetTag (54 times); Matches 3 keywords: SetTag, AddTag, OpenTelemetry",
          "matching_patterns": [
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: OpenTelemetry.Trace",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid)",
            "Pattern: Instrumentation",
            "OpenTelemetry",
            "SetTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid)",
            "Pattern: AddTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid)",
            "AddTag",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)",
            "Pattern: OpenTelemetry",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid)",
            "Pattern: StartActivity",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid)",
            "Import: var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)"
          ],
          "context_snippets": [
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.VersionUid);\n\n\t\tif (!Guid.TryParse(request!.VersionUid, out var versionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.SourceVersionUid);\n\n\t\tif (!Guid.TryParse(request!.SourceVersionUid, out var sourceVersionUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid);\n\n\t\tif (!Guid.TryParse(request.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.StartParameters?.Submitter);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.RevisionUid, out var revisionUid))\n\t\t{",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\t\t\treturn Task.FromResult(new StartRoutingApprovalWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}\n\t\tcatch (ArgumentException argEx)",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateWorkflowName(request!.WorkflowName);\n\t\tValidateAndParseUserUid(request.User.Uid, request.User.AccountId, out var userAccountUid);",
            "request.XmlParam);\n\n\t\t\tactivity?.SetStatus(ActivityStatusCode.Ok)\n\t\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, instanceUid);\n\n\t\t\treturn Task.FromResult(new SendStartWorkflowResponse {InstanceUid = instanceUid.ToString()});\n\t\t}",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkItemUid, request.WorkItemUid);\n\n\t\tif (!Guid.TryParse(request!.WorkItemUid, out var workItemUid))\n\t\t{",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Version.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Version.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.Revision.Uid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowVersionUid, request.Revision.VersionUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowDefinitionUid, request.Revision.DefinitionUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ValidateUser(request?.User);\n\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request!.User.AccountId)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowActivityUid, request.ActivityUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceInstanceUid, request.SourceInstanceUid)\n\t\t\t.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowSourceActivityUid, request.SourceActivityUid);\n\n\t\tValidateAndParseUserUid(request!.User.Uid, request.User.AccountId, out var userAccountUid);",
            "ServerCallContext context)\n\t{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);",
            "{\n\t\tusing var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))",
            "using var activity = StartActivity()\n\t\t\t?.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, request.AccountId)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowInstanceUid, request.InstanceUid)\n\t\t\t?.SetTag(ServiceTraceSemanticConventions.AttributeDocuSignWorkflowRevisionUid, request.RevisionUid);\n\n\t\tif (!Guid.TryParse(request!.InstanceUid, out var instanceUid))\n\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "SetTag",
            "ActivitySource",
            "OpenTelemetry"
          ],
          "context_snippets": [
            "private Activity? StartActivity([CallerMemberName] string name = \"\") => _serviceInstrumentation?.ActivitySource\n                ?.StartActivity($\"{nameof(WinsService)}.{name}\")\n                ?.SetStatus(ActivityStatusCode.Error)\n                ?.SetTag(TraceSemanticConventions.AttributeCodeFunction, name);\n}\n\n#nullable restore"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Matches 3 keywords: SetTag, middleware, OpenTelemetry",
          "matching_patterns": [
            "Pattern: OpenTelemetry",
            "Pattern: Monitoring",
            "Pattern: Activity.Current",
            "Import: DocuSign.Monitoring",
            "middleware",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: Instrumentation",
            "SetTag",
            "Import: DocuSign.CLM.Monitoring.HttpModules"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "private static void OnPostRequestHandlerExecute(HttpContext context)\n\t{\n\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\tif (HasSession(context))\n\t\t{\n\t\t\tLogSessionSize(context.Session);"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
          "matching_patterns": [
            "SetTag",
            "middleware"
          ],
          "context_snippets": [
            "try\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "AttemptEventSource.Emit(counterInstanceName);\n\n#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif",
            "#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif\n\n\t\t\tStopwatch sw = Stopwatch.StartNew();"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (1 occurrences)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "public virtual void BeginRequest(HttpContext httpContext)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n\n\t\t\tif (httpContext.Handler is MvcHandler)\n\t\t\t{"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tif (!string.IsNullOrEmpty(context.Request[Constants.QueryStringParameters.SAMLResponse]))"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "try\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif",
            "#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context?.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tFileUploadInfo fileUploadInfo = null;"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (15 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes)), Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid); Contains method call: SetTag (15 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
          "matching_patterns": [
            "Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes))",
            "Pattern: OpenTelemetry",
            "Import: var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Pattern: ActivitySource",
            "Pattern: StartActivity",
            "OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Pattern: SetAttribute",
            "Pattern: Instrumentation",
            "ActivitySource",
            "SetTag",
            "Import: var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Import: var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
            "Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)"
          ],
          "context_snippets": [
            "using var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();",
            "?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();\n\t\t\tvar statusMessages = new Messages();",
            "{\n\t\t\t\tattrvm = WebUtility.HtmlDecode(attrvm);\n\t\t\t\tvar attributes = attrvm.ToObject<AttributesViewModel>();\n\t\t\t\tsaveActivity?.SetTag(\"docusign.document.id\", attributes.docUid);\n\n\t\t\t\tvar document = LoadAndValidateDocument(attributes.docUid);",
            "using var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\tif (!HasSufficientRightsToView())",
            "using var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry",
            "using var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "using var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);",
            "?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();",
            "?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
          "strategy": "SearchStrategy.KEYWORD",
          "relevance_score": 100,
          "reasoning": "Direct match for 'SetTag' (7 occurrences); Contains method call: SetTag (7 times)",
          "matching_patterns": [
            "SetTag"
          ],
          "context_snippets": [
            "namespace ADEXS.Core.Domain.Utilities;\npublic static class ActivityEnricher\n{\n\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\n\t{\n\t\tif (activity == null)\n\t\t{",
            "{\n\t\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\n\t\t\treturn;\n\t\t}",
            "var account = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(account))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\n\t\t\treturn;\n\t\t}",
            "var userId = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(userId))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}",
            "{\n\t\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\n\t\t}\n\t}\n#else",
            "var session = context == null ? null : GetSession(context);\n\t\tif (!string.IsNullOrEmpty(session?.Id))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\n\t\t}\n\t}"
          ],
          "confidence": 0.95
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: DocuSign.CLM.Monitoring",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: Activity.Current",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: Metrics",
            "Pattern: UseOpenTelemetry"
          ],
          "context_snippets": [
            "exception = allError[allError.Length - 1];\n\t\t\t}\n\t\t\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\n\t\t\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\n\t\t\t_log.ErrorNoPII(message, exception);"
          ],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Import: OpenTelemetry.Metrics; Matches 2 keywords: middleware, OpenTelemetry",
          "matching_patterns": [
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
            "Import: OpenTelemetry.Metrics",
            "Pattern: OpenTelemetry",
            "Config file: program.cs",
            "middleware",
            "OpenTelemetry",
            "Pattern: Instrumentation",
            "Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters",
            "Pattern: Metrics"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
          "matching_patterns": [
            "Import: ADEXS.Caching.OpenTelemetry.Extensions",
            "Import: ADEXS.CqlCorePersistence.OpenTelemetry",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "Import: DocuSign.Msf.AspNet.OpenTelemetry",
            "Import: OpenTelemetry.Exporter",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: ConfigureServices",
            "Config file: startup.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/CoreInstrumentationLifetimeService.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 100,
          "reasoning": "Telemetry infrastructure: Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
          "matching_patterns": [
            "Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions",
            "Import: OpenTelemetry.Metrics",
            "Import: OpenTelemetry.Trace",
            "Pattern: OpenTelemetry",
            "Pattern: Instrumentation",
            "Pattern: Metrics",
            "Pattern: TracerProvider",
            "Pattern: MeterProvider",
            "Config file: coreinstrumentationlifetimeservice.cs"
          ],
          "context_snippets": [],
          "confidence": 0.85
        },
        {
          "file_path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Controllers/WorkflowActivitiesController.cs",
          "strategy": "SearchStrategy.PATTERN",
          "relevance_score": 95,
          "reasoning": "Telemetry infrastructure: Import: DocuSign.Monitoring, Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid), Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
          "matching_patterns": [
            "Import: DocuSign.Monitoring",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope(\"AccountId: {AccountId}, UserAccountUid: {UserAccountUid}\", accountId, userAccountUid))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.InstanceUid,\n\t\t\t\t\tactivityCallbackContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Import: (_logger.BeginScope($\"[AccountId: {accountId}, UserAccountUid: {userAccountUid}]\"))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var activity = StartActivity(accountId, userAccountUid, activityContext.WorkflowActivityContext.InstanceActivity.InstanceUid, activityContext.WorkflowActivityContext.InstanceActivity.Uid)",
            "Pattern: Instrumentation",
            "Pattern: Monitoring",
            "Pattern: StartActivity"
          ],
          "context_snippets": [],
          "confidence": 0.85
        }
      ],
      "error": null,
      "execution_time": 46.17605495452881,
      "cache_hit": false
    },
    "final_selection": {
      "stage_name": "final_selection",
      "status": "StageStatus.COMPLETED",
      "result": [
        [
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nusing ADEXS.API.GateKeeper.Telemetry;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Util.Extensions;\nusing ADEXS.Web.Common.AspNetCore.Extensions;\n\nusing DocuSign.CLM.Monitoring.HttpModules;\nusing DocuSign.Monitoring;\nusing DocuSign.Platform;\n\nusing Microsoft.AspNetCore.Http;\n\nnamespace ADEXS.API.GateKeeper.Middlewares;\n\n/// <summary>\n/// Middleware that logs requests to KazMon. Code ensures monitoring context runs in both IIS HttpContext and async CallContext.\n/// </summary>\npublic class LogAsyncRequestHttpMiddleware : AbstractLogRequestHttpMiddleware\n{\n\t[EventSource(\"LogRequestHttpMiddleware\", \"CLM.API.GateKeeper\")]\n\tprivate static readonly PropertyBagEventSource PropBagEvent = new();\n\n\tprivate readonly IServiceInstrumentation _serviceInstrumentation;\n\n\tstatic LogAsyncRequestHttpMiddleware()\n\t{\n\t\t// Indicate that we're running in both IIS HttpContext and async CallContext.\n\t\t// This ensures that logging works properly.\n\t\tSystemUtil.RunningInAsyncAndIisContexts = true;\n\t\tSystemUtil.RunningInDotNetCore = true;\n\t}\n\n\tpublic LogAsyncRequestHttpMiddleware(RequestDelegate next, IServiceInstrumentation serviceInstrumentation)\n\t\t: base(next)\n\t{\n\t\t_serviceInstrumentation = serviceInstrumentation;\n\t}\n\n\tpublic override async Task Invoke(HttpContext context)\n\t{\n\t\tvar activity = Activity.Current;\n\n\t\ttry\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))\n\t\t{\n\t\t\tthrow;\n\t\t}\n\t}\n\n\tprotected override PropertyBagEventSource LogRequestHttpModulePropBagEvent => PropBagEvent;\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times); Matches 2 keywords: SetTag, middleware",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag",
              "middleware"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
            "content": "\ufeffusing System;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\nusing System.Text;\nusing System.Threading;\nusing System.Web;\n\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Model;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.Web.Common.Helpers;\n\nusing DocuSign.DynamicSettings;\nusing DocuSign.Monitoring;\n\nnamespace ADEXS.Web.Common;\n/// <summary>\n/// Temporary Base class to redirect the ASHX API call to new Controller API as part of the effort of web migration to .net6\n/// This will eventually cleaned up once we move to .net6\n/// </summary>\npublic abstract class BaseApiHandler : IHttpHandler\n{\n\t[EventSource(\"Exception\", \"CLM.FeatureFlags.PopulateFeatureFlagContext\")]\n\t[Counter(\"Exception\", \"CLM.FeatureFlags.PopulateFeatureFlagContext\", InstanceProperty = \"Description\")]\n\tprivate static ExceptionEventSource _featureFlagContextExceptionEventSource = new ExceptionEventSource();\n\n\tprivate static readonly IDiscreetLogger Logger = DiscreetLogger.GetLogger(typeof(BaseApiHandler));\n\n\t// reletive path for new controller api. ex) \"A/TileView/GetTiles\"\n\t// where full url is https://localhost/atlas/A/TileView/GetTiles\n\tprotected abstract string Path { get; }\n\n\tpublic virtual bool IsReusable { get; set; }\n\n\tpublic virtual void ProcessRequest(HttpContext context)\n\t{\n\t\ttry\n\t\t{\n\t\t\tPopulateFeatureFlagContext(AtlasContext.Current.UserAccount, context);\n\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tLogger.ErrorNoPII($\"Failed to Populate Feature Flag Context: {LogData()}\", ex);\n\t\t}\n\n\t\tif (ShouldRedirectHelper())\n\t\t{\n\t\t\tRedirect(context);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tHandleRequest(context);\n\t\t}\n\t}\n\n\tprotected abstract bool ShouldRedirect();\n\tprotected abstract void HandleRequest(HttpContext context);\n\n\tprivate string LogData()\n\t{\n\t\treturn $\"aid:{AtlasContext.Current.AccountId} uid:{AtlasContext.Current.UserAccountUid} relativeUrl: {Path}\";\n\t}\n\tprivate void Redirect(HttpContext context)\n\t{\n\t\ttry\n\t\t{\n\t\t\tif (context == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(nameof(context));\n\t\t\t}\n\n\t\t\t// Get the original path info\n\t\t\tvar pathInfo = !string.IsNullOrEmpty(context.Request.PathInfo) ? context.Request.PathInfo : \"\";\n\n\t\t\t// Get the original query string\n\t\t\tvar queryString = context.Request.QueryString;\n\n\t\t\t// URL-encode pathInfo and queryString before building the new URL\n\t\t\tvar encodedPathInfo = HttpUtility.UrlPathEncode(pathInfo);\n\t\t\tvar encodedQueryString = ToUrlEncodedQueryString(queryString);\n\n\t\t\tvar baseUrl = AtlasUrlHelper.WebApplicationBasePath();\n\t\t\tvar newUrl = $\"{baseUrl}/{Path}{encodedPathInfo}{encodedQueryString}\";\n\n\t\t\t// Set the status code to 307 Temporary Redirect\n\t\t\tcontext.Response.StatusCode = Microsoft.AspNetCore.Http.StatusCodes.Status307TemporaryRedirect;\n\n\t\t\t// Set the Location header with the new Controller URL\n\t\t\tcontext.Response.AddHeader(\"Location\", newUrl);\n\n\t\t}\n\t\tcatch (ThreadAbortException)\n\t\t{\n\t\t\t// Do nothing intentionally.\n\t\t\t// The above Redirect call is *meant* to abort the thread with an exception and we do _not_ want it caught by the below catch block.\n\t\t\t// See this article for why we are catching it here and why we do nothing in this block.\n\t\t\t// https://learn.microsoft.com/en-us/dotnet/standard/threading/destroying-threads#handling-threadabortexception\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tLogger.ErrorNoPII($\"Failed to Redirect: {LogData()}\", ex);\n\t\t\tthrow;\n\t\t}\n\t}\n\n\tprivate bool ShouldRedirectHelper()\n\t{\n\t\ttry\n\t\t{\n\t\t\treturn ShouldRedirect();\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\tLogger.ErrorNoPII($\"Failed to evaluate ShouldRedirect: {LogData()}\", ex);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate static void PopulateFeatureFlagContext(UserAccount currentUser, HttpContext context)\n\t{\n\t\tif (context == null)\n\t\t{\n\t\t\tthrow new ArgumentNullException(nameof(context));\n\t\t}\n\n\t\tif (currentUser == null || !ApplicationSettings.EnableFeatureFlagsContext)\n\t\t{\n\t\t\tif (AtlasContext.Current.AccountId > 0)\n\t\t\t{\n\t\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.AccountId] = AtlasContext.Current.AccountId;\n\t\t\t}\n\t\t\telse if (context.Request.QueryString[Constants.QueryStringParameters.AccountIdAbbreviated] != null)\n\t\t\t{\n\t\t\t\tif (int.TryParse(context.Request.QueryString[Constants.QueryStringParameters.AccountIdAbbreviated], out var accountId))\n\t\t\t\t{\n\t\t\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.AccountId] = accountId;\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.AccountId] = currentUser.AccountId;\n\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.UserId] = currentUser.Uid;\n\t\t\tif (currentUser.Account != null)\n\t\t\t{\n\t\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.AccountType] = currentUser.Account.AccountType;\n\t\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.PlanName] = NpsUtilities.GetPlanIdName(currentUser.Account);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex)\n\t\t{\n\t\t\t_featureFlagContextExceptionEventSource.Emit(ex);\n\t\t}\n\t}\n\n\tprivate static string ToUrlEncodedQueryString(NameValueCollection collection)\n\t{\n\t\tif (collection == null || collection.Count == 0)\n\t\t{\n\t\t\treturn string.Empty;\n\t\t}\n\n\t\tvar builder = new StringBuilder();\n\t\tvar first = true;\n\t\tfor (var i = 0; i < collection.Count; i++)\n\t\t{\n\t\t\tvar key = collection.GetKey(i);\n\t\t\tvar value = collection.Get(i);\n\t\t\tbuilder.Append(first ? '?' : '&');\n\t\t\tfirst = false;\n\t\t\tbuilder.Append(HttpUtility.UrlEncode(key));\n\t\t\tbuilder.Append('=');\n\t\t\tbuilder.Append(HttpUtility.UrlEncode(value));\n\t\t}\n\n\t\treturn builder.ToString();\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\nusing System.Threading;\nusing System.Web;\nusing System.Web.SessionState;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Model;\nusing ADEXS.Core.Domain.RequestHeaders;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Config.Context;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.Web.Common.MVC;\nusing ADEXS.Web.Common.Session;\n\nusing DocuSign.CLM.Monitoring;\nusing DocuSign.Monitoring;\nusing log4net;\n\nnamespace ADEXS.Web.Common.Profile\n{\n\tpublic class ProfileModule : IHttpModule\n\t{\n\t\tprivate static readonly IDiscreetLogger _log = DiscreetLogger.GetLogger(\"ADEXS.Web.Common\");\n\n\n\t\tprivate PerformanceLog _performanceLog;\n\t\tprivate IDisposable _logContext;\n\n\t\t[EventSource(\"Session Size\", \"CLM.SessionState\")]\n\t\t[Counter(\"Session Size\", \"CLM.SessionState\", DisplayUnit = CounterUnit.kilobytes,\n\t\t\tRanges = new double[10] { 1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 20000 },\n\t\t\tMeasureProperty = \"Count\", InstanceProperty = \"Description\", ShowVolume = true)]\n\t\tprivate static readonly CountEventSource _sessionSizeEventSource = new CountEventSource();\n\n\t\t[EventSource(\"Session Serialization Timing\", \"CLM.SessionState\")]\n\t\t[Counter(\"Session Serialization Timing\", \"CLM.SessionState\", DisplayUnit = CounterUnit.milliseconds,\n\t\t\tRanges = new double[10] { 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000 },\n\t\t\tMeasureProperty = \"Duration\", SuccessProperty = \"Success\", InstanceProperty = \"Description\")]\n\t\tprivate static readonly TimingEventSource _sessionSerializationTimingEventSource = new TimingEventSource();\n\n\t\t[EventSource(\"Large Session\", \"CLM.SessionState\")]\n\t\t[Counter(\"Large Session\", \"CLM.SessionState\")]\n\t\tprivate static readonly PropertyBagEventSource _largeSessionEventSource = new PropertyBagEventSource();\n\n\t\t/// <summary>\n\t\t/// You will need to configure this module in the web.config file of your\n\t\t/// web and register it with IIS before being able to use it. For more information\n\t\t/// see the following link: http://go.microsoft.com/?linkid=8101007\n\t\t/// </summary>\n\t\t#region IHttpModule Members\n\n\t\tpublic void Dispose()\n\t\t{\n\t\t\t//clean-up code here.\n\t\t}\n\n\t\tpublic void Init(HttpApplication context)\n\t\t{\n\t\t\t// Below is an example of how you can handle LogRequest event and provide\n\t\t\t// custom logging implementation for it\n\t\t\tcontext.BeginRequest += OnBeginRequest;\n\t\t\tcontext.PreRequestHandlerExecute += OnPreRequestHandlerExecute;\n\t\t\tcontext.PostRequestHandlerExecute += OnPostRequestHandlerExecute;\n\t\t\tcontext.EndRequest += OnEndRequest;\n\t\t\tcontext.Error += OnError;\n\t\t}\n\n\t\t/* IIS request life cycle BeginRequest ->  AuthenticateRequest -> AuthorizeRequest -> ResolveRequestCache -> AcquireRequestState ->\n\t\t * PreRequestHandlerExecute -> ProcessRequest -> PostRequestHandlerExecute -> ReleaseRequestState -> UpdateRequestCache -> EndRequest */\n\n\t\tprivate void OnBeginRequest(object sender, EventArgs e)\n\t\t{\n\t\t\tif (_performanceLog == null)\n\t\t\t\t_performanceLog = new PerformanceLog();\n\n\t\t\t_performanceLog.Start(HttpContext.Current.Request);\n\t\t}\n\n\t\tprivate void OnPostRequestHandlerExecute(object sender, EventArgs e)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(HttpContext.Current);\n\t\t\tLogSessionSize(HttpContext.Current?.Session);\n\t\t\t_performanceLog.SetSession(HttpContext.Current?.Session);\n\t\t}\n\n\t\tprivate void OnPreRequestHandlerExecute(object sender, EventArgs e)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tHttpContext context = HttpContext.Current;\n\t\t\t\tAtlasContext.Reset();\n\n\t\t\t\t// MonitoringContext is initialized in the ScmLogRequestHttpModule module on\n\t\t\t\t// BeginRequest. This runs before this event handler. By this time the\n\t\t\t\t// CorrelationToken is set. Including getting it from the X-DocuSign-CorrelationToken header if available.\n\t\t\t\tGuid corrId = MonitoringContext.CorrelationToken ?? Guid.Empty;\n\t\t\t\tif (Guid.Empty == corrId)\n\t\t\t\t{\n\t\t\t\t\t// Only in extremely unlikely scenario\n\t\t\t\t\tGuid.TryParse(AtlasContext.Current.TransactionId, out corrId);\n\t\t\t\t\tMonitoringContext.CorrelationToken = corrId;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tAtlasContext.Current.TransactionId = corrId.ToString();\n\t\t\t\t}\n\n\t\t\t\t_logContext?.Dispose();\n\t\t\t\t// Now we'll have TransactionId, CorrelationId, and CorrelationToken all set to the same value. Three is a crowd?...\n\t\t\t\t_logContext = LogContext.Set(AtlasContext.Current.TransactionId);\n\n\t\t\t\tif (_log.IsDebugEnabled)\n\t\t\t\t{\n\t\t\t\t\t_log.DebugNoPII($\"ServiceLocator:\\n{ServiceLocator.Container.WhatDoIHave(typeof(ILogContextStore))}\");\n\t\t\t\t}\n\n\t\t\t\tif (_performanceLog != null) _performanceLog.Reset();\n\t\t\t\tif (context != null)\n\t\t\t\t{\n\t\t\t\t\tif (context.Request != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tAtlasContext.Current.ClientIpAddress = IPAddressUtil.FetchIpAddress(context.Request);\n\t\t\t\t\t\tAtlasContext.Current.ClientUserAgent = context.Request.UserAgent;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Similar code exists for web services, which don't use session.\n\t\t\t\t\t// That code is in SetContextIds\n\t\t\t\t\tHttpSessionState session = context.Session;\n\t\t\t\t\tif (session != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tUserAccount user = CommonData.CurrentUser;\n\t\t\t\t\t\tif (user != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tAtlasContext.Current.AccountId = user.AccountId;\n\t\t\t\t\t\t\tAtlasContext.Current.UserAccountUid = user.Uid;\n\t\t\t\t\t\t\tLogicalThreadContext.Properties[\"accountid\"] = user.AccountId == int.MinValue ? \"null\" : user.AccountId.ToString();\n\n\t\t\t\t\t\t\tvar userContextSetter = AtlasWebDependencyResolver.ScopedInstance?.GetService<IUserContextSetter>();\n\t\t\t\t\t\t\tif (userContextSetter != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_log.InfoNoPII($\"The user's AccountId: {user.AccountId} for user id: {user.Uid} in OnPreRequestHandlerExecute.\");\n\t\t\t\t\t\t\t\t// ensure that DI consumers have access the user/account context\n\t\t\t\t\t\t\t\tuserContextSetter.AccountId = user.AccountId;\n\t\t\t\t\t\t\t\tuserContextSetter.UserId = user.Uid;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t_log.WarnNoPII(\"No UserContextSetter is available - account context propagation will not work.\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar docusignAccountId = CommonData.DocuSignAccountId;\n\t\t\t\t\t\t\tif (!string.IsNullOrEmpty(docusignAccountId))\n\t\t\t\t\t\t\t\tAtlasContext.Current.DocuSignAccountId = docusignAccountId;\n\n\t\t\t\t\t\t\tvar docusignUserId = CommonData.DocuSignUserId;\n\t\t\t\t\t\t\tif (!string.IsNullOrEmpty(docusignUserId))\n\t\t\t\t\t\t\t\tAtlasContext.Current.DocuSignUserId = docusignUserId;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII(\"Trouble OnPreRequestHandlerExecute in ProfileModule.\", ex);\n\t\t\t\tex.Report();\n\t\t\t}\n\t\t}\n\n\t\t/// <summary>\n\t\t/// Measuring session size ATL-56207\n\t\t/// </summary>\n\t\tprivate static void LogSessionSize(HttpSessionState session)\n\t\t{\n\t\t\tif (session == null || !Configuration.GetBooleanAppSetting(\"EnableSessionSizeLogging\", false))\n\t\t\t\treturn;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tlong totalSessionBytes = 0;\n\t\t\t\tstring largestItemKey = string.Empty;\n\t\t\t\tlong largestItemSizeBytes = 0;\n\t\t\t\tint itemCount = 0;\n\n\t\t\t\tusing (OperationTimer sessionSerializationTimer = _sessionSerializationTimingEventSource.CreateTimer())\n\t\t\t\t{\n\t\t\t\t\tBinaryFormatter formatter = new BinaryFormatter();\n\t\t\t\t\tforeach (var sessionKey in session)\n\t\t\t\t\t{\n\t\t\t\t\t\tusing (Stream s = new MemoryStream())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstring key = (string)sessionKey;\n\t\t\t\t\t\t\tvar item = session[key];\n\t\t\t\t\t\t\tif (item != null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\titemCount++;\n\n\t\t\t\t\t\t\t\tformatter.Serialize(s, item);\n\n\t\t\t\t\t\t\t\tif (s.Length > largestItemSizeBytes)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlargestItemKey = key;\n\t\t\t\t\t\t\t\t\tlargestItemSizeBytes = s.Length;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ttotalSessionBytes += s.Length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tsessionSerializationTimer.SetResult(true);\n\t\t\t\t}\n\n\t\t\t\t_sessionSizeEventSource.Emit(totalSessionBytes);\n\n\t\t\t\tif (totalSessionBytes > Configuration.GetInt64AppSetting(\"LargeSessionSizeLoggingThreshold\", 1000000)) // default to 1MB\n\t\t\t\t{\n\t\t\t\t\tstring aid = AtlasContext.Current?.AccountId.ToString();\n\t\t\t\t\tstring userId = AtlasContext.Current?.UserAccountUid.ToString();\n\n\t\t\t\t\tusing (var propertyBag = _largeSessionEventSource.CreateEventPropertyBag())\n\t\t\t\t\t{\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"AccountId\", aid);\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"UserAccountUid\", userId);\n\n\t\t\t\t\t\tif (_log.IsDebugEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"SessionId\", session.SessionID);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"SessionSizeInBytes\", totalSessionBytes.ToString());\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"LargestSessionItemKey\", largestItemKey);\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"LargestSessionItemSizeInBytes\", largestItemSizeBytes.ToString());\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"TotalSessionItemCount\", itemCount.ToString());\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"ThreadId\", Thread.CurrentThread.ManagedThreadId.ToString());\n\t\t\t\t\t}\n\n\t\t\t\t\t_log.InfoNoPII($\"Detected Large SessionState. AccountId {aid} UserAccountUid {userId} SessionId {session.SessionID} SessionSizeInBytes {totalSessionBytes} TotalItemCount {itemCount} Largest Item Key {largestItemKey} ({largestItemSizeBytes})\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII(\"Exception occurred while attempting to measure session.\", ex);\n\t\t\t\tex.Report();\n\t\t\t}\n\t\t}\n\n\t\tprivate void OnError(object sender, EventArgs e)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t//get latest exception (top level exception is probably an HTTPUnhandledException which contains underlying exceptions via .InnerException)\n\n\t\t\t\tException baseException = null;\n\t\t\t\tvar lastError = HttpContext.Current.Server.GetLastError();\n\t\t\t\tif (lastError == null)\n\t\t\t\t{\n\t\t\t\t\tvar allError = HttpContext.Current.AllErrors;\n\t\t\t\t\tif (allError != null && allError.Length > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\tbaseException = allError[allError.Length - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbaseException = lastError.GetBaseException();\n\t\t\t\t}\n\n\t\t\t\tif (_performanceLog != null) _performanceLog.Stop(baseException);\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII(\"Trouble OnError in ProfileModule.\", ex);\n\t\t\t\tex.Report();\n\t\t\t}\n\t\t}\n\n\t\tprivate void OnEndRequest(object sender, EventArgs e)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (_performanceLog != null)\n\t\t\t\t{\n\t\t\t\t\t_performanceLog.Stop();\n\t\t\t\t\t_performanceLog.Dispose();\n\t\t\t\t\t_performanceLog = null;\n\t\t\t\t}\n\n\t\t\t\t_logContext?.Dispose();\n\t\t\t\t_logContext = null;\n\t\t\t\tLogicalThreadContext.Properties[\"accountid\"] = \"null\";\n\n\t\t\t\t// we are no longer looking for outstanding DB transactions here.\n\t\t\t\t// because the module does not have to run in the same thread as the request handler\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII(\"Trouble OnEndRequest in ProfileModule.\", ex);\n\t\t\t\tex.Report();\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAtlasContext.Current.CacheClient.FlushCache();\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII(\"Could not clear the user settings on the thread for the request.\", ex);\n\t\t\t\tex.Report();\n\t\t\t}\n\t\t}\n\n\t\t#endregion\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences); Contains method call: SetTag (1 times)",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\nusing ADEXS.Web.Telemetry;\nusing ADEXS.Core.Util.Extensions;\nusing ADEXS.Web.Common.AspNetCore.Extensions;\n\nusing DocuSign.CLM.Monitoring.HttpModules;\nusing DocuSign.Monitoring;\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\nusing DocuSign.Platform;\n\nusing Microsoft.AspNetCore.Http;\nusing ADEXS.Core.Domain.Utilities;\n\nnamespace ADEXS.Web.Middlewares;\n\n/// <summary>\n/// Middleware that logs requests to KazMon. Code ensures monitoring context runs in both IIS HttpContext and async CallContext.\n/// </summary>\npublic class LogAsyncRequestHttpMiddleware : AbstractLogRequestHttpMiddleware\n{\n\t[EventSource(\"LogRequestHttpMiddleware\", \"CLM.WebNet\")]\n\tprivate static readonly PropertyBagEventSource PropBagEvent = new();\n\n\tprivate readonly IServiceInstrumentation _serviceInstrumentation;\n\n\tstatic LogAsyncRequestHttpMiddleware()\n\t{\n\t\t// Indicate that we're running in both IIS HttpContext and async CallContext.\n\t\t// This ensures that logging works properly.\n\t\tSystemUtil.RunningInAsyncAndIisContexts = true;\n\t\tSystemUtil.RunningInDotNetCore = true;\n\t}\n\n\tpublic LogAsyncRequestHttpMiddleware(RequestDelegate next, IServiceInstrumentation serviceInstrumentation)\n\t\t: base(next)\n\t{\n\t\t_serviceInstrumentation = serviceInstrumentation;\n\t}\n\n\tpublic override async Task Invoke(HttpContext context)\n\t{\n\t\tvar activity = Activity.Current;\n\n\t\ttry\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))\n\t\t{\n\t\t\tthrow;\n\t\t}\n\t}\n\n\tprotected override PropertyBagEventSource LogRequestHttpModulePropBagEvent => PropBagEvent;\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences); Telemetry infrastructure: Import: DocuSign.CLM.Monitoring.HttpModules, Import: DocuSign.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions; Matches 3 keywords: SetTag, middleware, OpenTelemetry",
            "search_strategy": "keyword",
            "matching_patterns": [
              "Pattern: OpenTelemetry",
              "Pattern: Monitoring",
              "Pattern: Activity.Current",
              "Import: DocuSign.Monitoring",
              "middleware",
              "OpenTelemetry",
              "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
              "Pattern: Instrumentation",
              "SetTag",
              "Import: DocuSign.CLM.Monitoring.HttpModules"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nusing ADEXS.API.Allocation.Telemetry;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Util.Extensions;\nusing ADEXS.Web.Common.AspNetCore.Extensions;\n\nusing DocuSign.CLM.Monitoring.HttpModules;\nusing DocuSign.Monitoring;\nusing DocuSign.Platform;\n\nusing Microsoft.AspNetCore.Http;\n\nnamespace ADEXS.API.Allocation.Middlewares;\n\n/// <summary>\n/// Middleware that logs requests to KazMon. Code ensures monitoring context runs in both IIS HttpContext and async CallContext.\n/// </summary>\npublic class LogAsyncRequestHttpMiddleware : AbstractLogRequestHttpMiddleware\n{\n\t[EventSource(\"LogRequestHttpMiddleware\", \"CLM.API.Allocation\")]\n\tprivate static readonly PropertyBagEventSource PropBagEvent = new();\n\n\tprivate readonly IServiceInstrumentation _serviceInstrumentation;\n\n\tstatic LogAsyncRequestHttpMiddleware()\n\t{\n\t\t// Indicate that we're running in both IIS HttpContext and async CallContext.\n\t\t// This ensures that logging works properly.\n\t\tSystemUtil.RunningInAsyncAndIisContexts = true;\n\t\tSystemUtil.RunningInDotNetCore = true;\n\t}\n\n\tpublic LogAsyncRequestHttpMiddleware(RequestDelegate next, IServiceInstrumentation serviceInstrumentation)\n\t\t: base(next)\n\t{\n\t\t_serviceInstrumentation = serviceInstrumentation;\n\t}\n\n\tpublic override async Task Invoke(HttpContext context)\n\t{\n\t\tvar activity = Activity.Current;\n\n\t\ttry\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))\n\t\t{\n\t\t\tthrow;\n\t\t}\n\t}\n\n\tprotected override PropertyBagEventSource LogRequestHttpModulePropBagEvent => PropBagEvent;\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag",
              "middleware"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.Web.Common.Session;\n\nusing DocuSign.CLM.Monitoring;\nusing DocuSign.Monitoring;\n\nusing log4net;\n\nusing Microsoft.AspNetCore.Http;\n\nusing Microsoft.AspNetCore.Http.Features;\n\nnamespace ADEXS.Web.Common.AspNetCore.Middlewares;\n\npublic sealed class ProfileMiddleware : IDisposable\n{\n\tprivate static readonly IDiscreetLogger Log = DiscreetLogger.GetLogger(typeof(ProfileMiddleware));\n\tprivate readonly RequestDelegate _next;\n\tprivate IDisposable? _logContext;\n\n\t[EventSource(\"Session Size\", \"CLM.SessionState\")]\n\t[Counter(\n\t\t\"Session Size\",\n\t\t\"CLM.SessionState\",\n\t\tDisplayUnit = CounterUnit.kilobytes,\n\t\tRanges = new double[10] { 1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 20000 },\n\t\tMeasureProperty = \"Count\",\n\t\tInstanceProperty = \"Description\",\n\t\tShowVolume = true)]\n\tprivate static readonly CountEventSource SessionSizeEventSource = new CountEventSource();\n\n\t[EventSource(\"Session Serialization Timing\", \"CLM.SessionState\")]\n\t[Counter(\n\t\t\"Session Serialization Timing\",\n\t\t\"CLM.SessionState\",\n\t\tDisplayUnit = CounterUnit.milliseconds,\n\t\tRanges = new double[10] { 10, 20, 50, 100, 200, 500, 1000, 2000, 5000, 10000 },\n\t\tMeasureProperty = \"Duration\",\n\t\tSuccessProperty = \"Success\",\n\t\tInstanceProperty = \"Description\")]\n\tprivate static readonly TimingEventSource SessionSerializationTimingEventSource = new TimingEventSource();\n\n\t[EventSource(\"Large Session\", \"CLM.SessionState\")]\n\t[Counter(\"Large Session\", \"CLM.SessionState\")]\n\tprivate static readonly PropertyBagEventSource LargeSessionEventSource = new PropertyBagEventSource();\n\n\t// Avoid using HttpContext.Session directly because it will throw an exception if the session is not available.\n\tprivate static bool HasSession(HttpContext context) =>\n\t\tcontext?.Features?.Get<ISessionFeature>() != null && context?.Session != null;\n\n\tpublic ProfileMiddleware(RequestDelegate next)\n\t{\n\t\t_next = next;\n\t}\n\n\tpublic async Task InvokeAsync(HttpContext context)\n\t{\n\t\tif (context != null)\n\t\t{\n\t\t\t// Do something with context near the beginning of request processing.\n\t\t\tOnPreRequestHandlerExecute(context);\n\n\t\t\tawait _next.Invoke(context);\n\n\t\t\t// Clean up.\n\t\t\tOnPostRequestHandlerExecute(context);\n\t\t\tOnEndRequest();\n\t\t}\n\t}\n\n\tpublic void Dispose()\n\t{\n\t\t_logContext?.Dispose();\n\t}\n\n\tprivate void OnPreRequestHandlerExecute(HttpContext context)\n\t{\n\t\ttry\n\t\t{\n\t\t\tLog.DebugNoPII(\"OnPreRequestHandlerExecute called.\");\n\t\t\tAtlasContext.Reset();\n\n\t\t\t// MonitoringContext is initialized in the AbstractLogRequestHttpMiddleware on\n\t\t\t// BeginRequest. This runs before this event handler. By this time the\n\t\t\t// CorrelationToken is set. Including getting it from the X-DocuSign-CorrelationToken header if available.\n\t\t\tvar corrId = MonitoringContext.CorrelationToken ?? Guid.Empty;\n\t\t\tif (corrId == Guid.Empty)\n\t\t\t{\n\t\t\t\t// Only in extremely unlikely scenario\n\t\t\t\tif (Guid.TryParse(AtlasContext.Current.TransactionId, out corrId))\n\t\t\t\t{\n\t\t\t\t\tLog.WarnNoPII(\n\t\t\t\t\t\t\"MonitoringContext.CorrelationToken was not set, but AtlasContext.Current.TransactionId was set. Using it to set MonitoringContext.CorrelationToken.\");\n\t\t\t\t\tMonitoringContext.CorrelationToken = corrId;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLog.WarnNoPII(\n\t\t\t\t\t\t\"MonitoringContext.CorrelationToken was not set, and AtlasContext.Current.TransactionId was not a valid Guid. Using Guid.Empty.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog.DebugNoPII($\"MonitoringContext.CorrelationToken set to: {corrId}\");\n\t\t\t\tAtlasContext.Current.TransactionId = corrId.ToString();\n\t\t\t}\n\n\t\t\t// Overwrite TransactionId to use Activity.Current.Id\n\t\t\tif (!string.IsNullOrWhiteSpace(Activity.Current?.Id))\n\t\t\t{\n\t\t\t\tLog.DebugNoPII($\"Activity.Current.Id is set to: {Activity.Current.Id}. Overwriting AtlasContext.Current.TransactionId.\");\n\t\t\t\tAtlasContext.Current.TransactionId = Activity.Current.Id;\n\t\t\t}\n\n\t\t\tLog.DebugNoPII($\"AtlasContext.Current.TransactionId set to: {AtlasContext.Current.TransactionId}\");\n\t\t\t_logContext?.Dispose();\n\t\t\t_logContext = LogContext.Set(AtlasContext.Current.TransactionId);\n\n\t\t\tif (Log.IsDebugEnabled)\n\t\t\t{\n\t\t\t\tLog.DebugNoPII($\"ServiceLocator:\\n{ServiceLocator.Container.WhatDoIHave(typeof(ILogContextStore))}\");\n\t\t\t}\n\n\t\t\tif (context.Connection != null)\n\t\t\t{\n\t\t\t\tLog.DebugNoPII($\"Connection RemoteIpAddress: {context.Connection.RemoteIpAddress?.ToString()}\");\n\t\t\t\tAtlasContext.Current.ClientIpAddress = context.Connection.RemoteIpAddress?.ToString();\n\t\t\t}\n\n\t\t\tif (context.Request != null)\n\t\t\t{\n\t\t\t\tLog.DebugNoPII($\"Request Path: {context.Request.Path}\");\n\t\t\t\tAtlasContext.Current.ClientUserAgent = context.Request.Headers?.UserAgent.ToString();\n\t\t\t}\n\n\t\t\t// Similar code exists for web services, which don't use session.\n\t\t\t// That code is in SetContextIds\n\t\t\tif (HasSession(context))\n\t\t\t{\n\t\t\t\tLog.DebugNoPII($\"Session Id: {context.Session.Id}\");\n\t\t\t\tvar user = CommonData.CurrentUser;\n\t\t\t\tif (user != null)\n\t\t\t\t{\n\t\t\t\t\tLog.DebugNoPII($\"User AccountId: {user.AccountId}, User Uid: {user.Uid}\");\n\t\t\t\t\tAtlasContext.Current.AccountId = user.AccountId;\n\t\t\t\t\tAtlasContext.Current.UserAccountUid = user.Uid;\n\t\t\t\t\tLogicalThreadContext.Properties[\"accountid\"] =\n\t\t\t\t\t\tuser.AccountId == int.MinValue ? \"null\" : user.AccountId.ToString();\n\n\t\t\t\t\tvar docusignAccountId = CommonData.DocuSignAccountId;\n\t\t\t\t\tif (!string.IsNullOrEmpty(docusignAccountId))\n\t\t\t\t\t{\n\t\t\t\t\t\tLog.DebugNoPII($\"DocuSign AccountId: {docusignAccountId}\");\n\t\t\t\t\t\tAtlasContext.Current.DocuSignAccountId = docusignAccountId;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar docusignUserId = CommonData.DocuSignUserId;\n\t\t\t\t\tif (!string.IsNullOrEmpty(docusignUserId))\n\t\t\t\t\t{\n\t\t\t\t\t\tLog.DebugNoPII($\"DocuSign UserId: {docusignUserId}\");\n\t\t\t\t\t\tAtlasContext.Current.DocuSignUserId = docusignUserId;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLog.DebugNoPII(\"No user found in session.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tLog.DebugNoPII(\"No session found.\");\n\t\t\t}\n\t\t}\n#pragma warning disable CA1031 // Do not catch general exception types\n\t\tcatch (Exception ex)\n#pragma warning restore CA1031 // Do not catch general exception types\n\t\t{\n\t\t\tLog.WarnNoPII(\"Error setting AtlasContext.Current properties.\", ex);\n\t\t\tex.Report();\n\t\t}\n\t}\n\n\tprivate static void OnPostRequestHandlerExecute(HttpContext context)\n\t{\n\t\tActivity.Current?.SetTagsWithCommonFields(context);\n\t\tif (HasSession(context))\n\t\t{\n\t\t\tLogSessionSize(context.Session);\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// Measuring session size ATL-56207\n\t/// </summary>\n\tprivate static void LogSessionSize(ISession session)\n\t{\n\t\tif (!Configuration.GetBooleanAppSetting(\"EnableSessionSizeLogging\", false))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tlong totalSessionBytes = 0;\n\t\t\tvar largestItemKey = string.Empty;\n\t\t\tlong largestItemSizeBytes = 0;\n\t\t\tvar itemCount = 0;\n\n\t\t\tusing (var sessionSerializationTimer = SessionSerializationTimingEventSource.CreateTimer())\n\t\t\t{\n\t\t\t\tforeach (var sessionKey in session.Keys)\n\t\t\t\t{\n\t\t\t\t\tif (session.TryGetValue(sessionKey, out var bytes))\n\t\t\t\t\t{\n\t\t\t\t\t\titemCount++;\n\t\t\t\t\t\tif (bytes.Length > largestItemSizeBytes)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlargestItemKey = sessionKey;\n\t\t\t\t\t\t\tlargestItemSizeBytes = bytes.Length;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttotalSessionBytes += bytes.Length;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsessionSerializationTimer.SetResult(true);\n\t\t\t}\n\n\t\t\tSessionSizeEventSource.Emit(totalSessionBytes);\n\n\t\t\t// default to 1MB\n\t\t\tif (totalSessionBytes > Configuration.GetInt64AppSetting(\"LargeSessionSizeLoggingThreshold\", 1000000))\n\t\t\t{\n\t\t\t\tvar aid = AtlasContext.Current?.AccountId.ToString();\n\t\t\t\tvar userId = AtlasContext.Current?.UserAccountUid.ToString();\n\n\t\t\t\tusing (var propertyBag = LargeSessionEventSource.CreateEventPropertyBag())\n\t\t\t\t{\n\t\t\t\t\tpropertyBag.AddOrUpdate(\"AccountId\", aid);\n\t\t\t\t\tpropertyBag.AddOrUpdate(\"UserAccountUid\", userId);\n\n\t\t\t\t\tif (Log.IsDebugEnabled)\n\t\t\t\t\t{\n\t\t\t\t\t\tpropertyBag.AddOrUpdate(\"SessionId\", session.Id);\n\t\t\t\t\t}\n\n\t\t\t\t\tpropertyBag.AddOrUpdate(\"SessionSizeInBytes\", totalSessionBytes.ToString());\n\t\t\t\t\tpropertyBag.AddOrUpdate(\"LargestSessionItemKey\", largestItemKey);\n\t\t\t\t\tpropertyBag.AddOrUpdate(\"LargestSessionItemSizeInBytes\", largestItemSizeBytes.ToString());\n\t\t\t\t\tpropertyBag.AddOrUpdate(\"TotalSessionItemCount\", itemCount.ToString());\n\t\t\t\t\tpropertyBag.AddOrUpdate(\"ThreadId\", Environment.CurrentManagedThreadId.ToString());\n\t\t\t\t}\n\n\t\t\t\tLog.InfoNoPII(\n\t\t\t\t\t$\"Detected Large SessionState. AccountId {aid} UserAccountUid {userId} SessionId {session.Id} SessionSizeInBytes {totalSessionBytes} TotalItemCount {itemCount} Largest Item Key {largestItemKey} ({largestItemSizeBytes})\");\n\t\t\t}\n\t\t}\n#pragma warning disable CA1031 // Do not catch general exception types\n\t\tcatch (Exception ex)\n#pragma warning restore CA1031 // Do not catch general exception types\n\t\t{\n\t\t\tLog.WarnNoPII(\"Exception occurred while attempting to measure session.\", ex);\n\t\t\tex.Report();\n\t\t}\n\t}\n\n\tprivate void OnEndRequest()\n\t{\n\t\ttry\n\t\t{\n\t\t\t_logContext?.Dispose();\n\t\t\t_logContext = null;\n\t\t\tLogicalThreadContext.Properties[\"accountid\"] = \"null\";\n\n\t\t\t// we are no longer looking for outstanding DB transactions here.\n\t\t\t// because the module does not have to run in the same thread as the request handler\n\t\t}\n#pragma warning disable CA1031 // Do not catch general exception types\n\t\tcatch (Exception ex)\n#pragma warning restore CA1031 // Do not catch general exception types\n\t\t{\n\t\t\tLog.WarnNoPII(\"Trouble OnEndRequest in ProfileModule.\", ex);\n\t\t\tex.Report();\n\t\t}\n\n\t\ttry\n\t\t{\n\t\t\tAtlasContext.Current.CacheClient.FlushCache();\n\t\t}\n#pragma warning disable CA1031 // Do not catch general exception types\n\t\tcatch (Exception ex)\n#pragma warning restore CA1031 // Do not catch general exception types\n\t\t{\n\t\t\tLog.WarnNoPII(\"Could not clear the user settings on the thread for the request.\", ex);\n\t\t\tex.Report();\n\t\t}\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag",
              "middleware"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Util.Extensions;\nusing ADEXS.Web.Common.AspNetCore.Extensions;\nusing ADEXS.Web.Common.AspNetCore.Telemetry;\n\nusing DocuSign.CLM.Monitoring.HttpModules;\nusing DocuSign.Platform;\n\nusing Microsoft.AspNetCore.Http;\n\nnamespace ADEXS.Web.Common.AspNetCore.Middlewares;\n\n/// <summary>\n/// Middleware that logs requests to KazMon. Code ensures monitoring context runs in both IIS HttpContext and async CallContext.\n/// </summary>\npublic abstract class ScmLogAsyncRequestHttpMiddleware : AbstractLogRequestHttpMiddleware\n{\n\tprivate readonly IServiceInstrumentation _serviceInstrumentation;\n\n\tstatic ScmLogAsyncRequestHttpMiddleware()\n\t{\n\t\t// Indicate that we're running in both IIS HttpContext and async CallContext.\n\t\t// This ensures that logging works properly.\n\t\tSystemUtil.RunningInAsyncAndIisContexts = true;\n\t\tSystemUtil.RunningInDotNetCore = true;\n\t}\n\n\tprotected ScmLogAsyncRequestHttpMiddleware(RequestDelegate next, IServiceInstrumentation serviceInstrumentation)\n\t\t: base(next)\n\t{\n\t\t_serviceInstrumentation = serviceInstrumentation;\n\t}\n\n\tpublic override async Task Invoke(HttpContext context)\n\t{\n\t\tvar activity = Activity.Current;\n\n\t\ttry\n\t\t{\n\t\t\tcontext.AddKazMonServerVariables();\n\t\t\tactivity?.SetTagsWithCommonFields(context);\n\t\t\tawait base.Invoke(context);\n\t\t\tactivity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\n\t\t}\n\t\tcatch (Exception ex) when (ex.TraceAndIgnore(activity, ActivityStatusCode.Error))\n\t\t{\n\t\t\tthrow;\n\t\t}\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences); Matches 2 keywords: SetTag, middleware",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag",
              "middleware"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\n#if NETFRAMEWORK\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\nusing ADEXS.Web.CommonUI.Helpers;\n#else\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.AspNetCore.Http;\n#endif\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.FeatureFlags;\nusing ADEXS.Core.Domain.Exceptions;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Extensions;\n\nusing DocuSign.CLM.Monitoring;\nusing DocuSign.DynamicSettings;\nusing DocuSign.Monitoring;\nusing ADEXS.Core.Domain.Utilities;\n\nnamespace ADEXS.Web.CommonUI.MVC.Filters\n{\n\tpublic abstract class MvcAuditedRequestAttribute : ActionFilterAttribute, IActionFilter, IExceptionFilter\n\t{\n\t\t/// <summary>\n\t\t/// Should always return the same *statically* allocated instance. Example:\n\t\t/// [EventSource(\"Request Duration\", \"CLM.API\")]\n\t\t/// [Counter(\"Request Duration\", \"CLM.API\",\n\t\t/// InstanceProperty = \"Description\",\n\t\t/// DisplayUnit = CounterUnit.milliseconds,\n\t\t/// Ranges = new double[10] { 10, 25, 50, 100, 200, 500, 1000, 2000, 5000, 10000 },\n\t\t/// MeasureProperty = \"Duration\",\n\t\t/// SuccessProperty = \"Success\")]\n\t\t/// static readonly TimingEventSource apiEventSource = new TimingEventSource();\n\t\t/// </summary>\n\t\tprotected abstract TimingEventSource ApiEventSource { get; }\n\n\t\t/// <summary>\n\t\t/// Should always return the same *statically* allocated instance. Example:\n\t\t/// [EventSource(\"Request Attempts\", \"CLM.API\")]\n\t\t/// [Counter(\"Request Attempts\", \"CLM.API\", InstanceProperty = \"Description\")]\n\t\t/// static readonly SimpleEventSource attemptEventSource = new SimpleEventSource();\n\t\t/// </summary>\n\t\tprotected abstract SimpleEventSource AttemptEventSource { get; }\n\n\t\t/// <summary>\n\t\t/// Name of the property under which the timing Stopwatch instance will be stored.\n\t\t/// Example: \"ClmApi.Stopwatch\"\n\t\t/// </summary>\n\t\tprotected abstract string PropName_StopWatch { get; }\n\n\t\t/// <summary>\n\t\t/// Name of the property under which the the name of the counter instance will be stored.\n\t\t/// Example: \"ClmApi.InstanceName\"\n\t\t/// </summary>\n\t\tprotected abstract string PropName_CounterInstance { get; }\n\n\t\tprivate static string NO_CONTROLLER_STRING = \"_no-controller_\";\n\t\tprivate static string NO_ACTION_NAME = \"_no-action_\";\n\t\tprivate static string NO_HTTP_VERB = \"_no-verb_\";\n\n\t\tpublic override void OnActionExecuting(ActionExecutingContext filterContext)\n\t\t{\n#if NETFRAMEWORK\n\t\t\tstring controllerName = filterContext.ActionDescriptor.ControllerDescriptor.ControllerName;\n\t\t\tServiceContext.Log(DataPoint.ApiController, controllerName);\n\t\t\tstring actionName = filterContext.ActionDescriptor.ActionName;\n\t\t\tServiceContext.Log(DataPoint.Action, actionName);\n#else\n\t\t\tvar controllerName = filterContext.ActionDescriptor.RouteValues[\"controller\"] ?? NO_CONTROLLER_STRING;\n\t\t\tServiceContext.Log(DataPoint.ApiController, controllerName);\n\t\t\tvar actionName = filterContext.ActionDescriptor.RouteValues[\"action\"] ?? NO_ACTION_NAME;\n\t\t\tServiceContext.Log(DataPoint.Action, actionName);\n#endif\n\n\t\t\tif (ApplicationSettings.EnableFeatureFlagsContext)\n\t\t\t{\n\t\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.ControllerName] = controllerName;\n\t\t\t\tDynamicSettingsContext.Items[DynamicSettingsContextItems.ActionName] = actionName;\n\t\t\t}\n\n\t\t\tvar httpContext = filterContext.HttpContext;\n#if NETFRAMEWORK\n\t\t\tstring counterInstanceName = FormatInstanceName(controllerName, actionName, httpContext.Request.HttpMethod);\n#else\n\t\t\tvar counterInstanceName = FormatInstanceName(controllerName, actionName, httpContext.Request.Method);\n#endif\n\t\t\tAttemptEventSource.Emit(counterInstanceName);\n\n#if NETFRAMEWORK\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext?.ApplicationInstance?.Context);\n#else\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n#endif\n\n\t\t\tStopwatch sw = Stopwatch.StartNew();\n\t\t\thttpContext.Items[PropName_StopWatch] = sw;\n\t\t\thttpContext.Items[PropName_CounterInstance] = counterInstanceName;\n\n\t\t\tif (ApplicationSettings.EnableFeatureFlags && ApplicationSettings.TestFeatureFlagEvaluation)\n\t\t\t{\n\t\t\t\tint intSetting = AtlasFeatureFlags.DummyIntSetting;\n\t\t\t\tstring stringSetting = AtlasFeatureFlags.DummyStringSetting;\n\t\t\t\tServiceContext.Log(\n\t\t\t\t\tDataPoint.ApiRequestLogging,\n\t\t\t\t\t$\"intSetting: {intSetting} | stringSetting: {stringSetting}\");\n\t\t\t}\n\t\t}\n\n\t\tpublic override void OnActionExecuted(ActionExecutedContext filterContext)\n\t\t{\n\t\t\tSetCommonDataPoints();\n\n\t\t\t(Stopwatch sw, string instanceName) = GetStopWatchAndInstanceName(filterContext.HttpContext);\n\t\t\tFinalizeLogging(sw, instanceName, false);\n\t\t}\n\n\t\tpublic virtual void OnException(ExceptionContext filterContext)\n\t\t{\n\t\t\t(Stopwatch sw, string instanceName) = GetStopWatchAndInstanceName(filterContext.HttpContext);\n\t\t\tbool isServerError = IsServerError(filterContext.Exception);\n\t\t\tif (filterContext.Exception != null)\n\t\t\t{\n\t\t\t\tfilterContext.Exception.Trace().Report();\n\t\t\t\tServiceContext.Log(DataPoint.ApiErrorMessage, filterContext.Exception.Message);\n\t\t\t}\n\n\t\t\tFinalizeLogging(sw, instanceName, isServerError);\n\t\t}\n\n#if NETFRAMEWORK\n\t\tprivate (Stopwatch sw, string instanceName) GetStopWatchAndInstanceName(HttpContextBase context)\n\t\t{\n\t\t\tStopwatch sw = context.Items[PropName_StopWatch] as Stopwatch;\n\t\t\tif (null == sw)\n\t\t\t{\n\t\t\t\tsw = Stopwatch.StartNew();\n\t\t\t}\n\n\t\t\tstring instanceName = context.Items[PropName_CounterInstance] as string;\n\t\t\tif (null == instanceName)\n\t\t\t{\n\t\t\t\tinstanceName = FormatInstanceName(context);\n\t\t\t}\n\n\t\t\treturn (sw, instanceName);\n\t\t}\n#else\n\t\tprivate (Stopwatch sw, string instanceName) GetStopWatchAndInstanceName(HttpContext context)\n\t\t{\n\t\t\tvar sw = context.Items[PropName_StopWatch] as Stopwatch ?? Stopwatch.StartNew();\n\n\t\t\tvar instanceName = context.Items[PropName_CounterInstance] as string ?? FormatInstanceName(context);\n\n\t\t\treturn (sw, instanceName);\n\t\t}\n#endif\n\n#if NETFRAMEWORK\n\t\tprotected virtual string FormatInstanceName(HttpContextBase httpContext)\n\t\t{\n\t\t\tstring controllerName = NO_CONTROLLER_STRING;\n\t\t\tstring actionName = NO_ACTION_NAME;\n\t\t\tstring httpMethod = NO_HTTP_VERB;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tRouteData rd = httpContext.Request.RequestContext.RouteData;\n\t\t\t\tactionName = rd.GetRequiredString(\"action\");\n\t\t\t\tcontrollerName = rd.GetRequiredString(\"controller\");\n\t\t\t\thttpMethod = httpContext.Request.HttpMethod;\n\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{\n\t\t\t\tex.Report();\n\t\t\t}\n\t\t\treturn FormatInstanceName(controllerName, actionName, httpMethod);\n\t\t}\n#else\n\t\tprotected virtual string FormatInstanceName(HttpContext httpContext)\n\t\t{\n\t\t\tobject? actionNameObj = null;\n\t\t\tobject? controllerNameObj = null;\n\t\t\tvar httpMethod = NO_HTTP_VERB;\n\t\t\ttry\n\t\t\t{\n\t\t\t\thttpContext.Request.RouteValues.TryGetValue(\"action\", out actionNameObj);\n\t\t\t\thttpContext.Request.RouteValues.TryGetValue(\"controller\", out controllerNameObj);\n\t\t\t\thttpMethod = httpContext.Request.Method;\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tex.Report();\n\t\t\t}\n\n\t\t\tvar controllerName = controllerNameObj as string ?? NO_CONTROLLER_STRING;\n\t\t\tvar actionName = actionNameObj as string ?? NO_ACTION_NAME;\n\t\t\treturn FormatInstanceName(controllerName, actionName, httpMethod);\n\t\t}\n#endif\n\n\t\tprotected virtual string FormatInstanceName(string controllerName, string actionName, string httpMethod)\n\t\t{\n\t\t\treturn $\"{controllerName}.{actionName}.{httpMethod}\";\n\t\t}\n\n\t\tprivate void FinalizeLogging(Stopwatch sw, string instanceName, bool isError)\n\t\t{\n\t\t\tTimeSpan apiRunTime = TimeSpan.MinValue;\n\t\t\tif (sw != null)\n\t\t\t{\n\t\t\t\tapiRunTime = sw.Elapsed;\n\t\t\t}\n\n\t\t\tApiEventSource.Emit(apiRunTime, !isError, instanceName);\n\t\t}\n\n\t\tprotected virtual bool IsServerError(Exception exception)\n\t\t{\n\t\t\tbool isError = !(exception is AdexsDisplayException);\n\n\t\t\treturn isError;\n\t\t}\n\n\n\t\tpublic static void SetCommonDataPoints()\n\t\t{\n\t\t\tif (AtlasContext.Current.AccountId != int.MinValue)\n\t\t\t\tServiceContext.Log(DataPoint.AccountId, AtlasContext.Current.AccountId);\n\t\t\tif (AtlasContext.Current.UserAccountUid != Guid.Empty)\n\t\t\t\tServiceContext.Log(DataPoint.UserId, AtlasContext.Current.UserAccountUid);\n\t\t\tif (AtlasContext.Current.UserAccount != null)\n\t\t\t\tServiceContext.Log(DataPoint.AccountType, Enum.GetName(typeof(Enums.AccountType), AtlasContext.Current.UserAccount.Account.AccountType));\n\t\t}\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Exceptions;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Types;\nusing ADEXS.Core.Util.Extensions;\nusing DocuSign.CLM.Monitoring;\nusing DocuSign.Monitoring;\n\nnamespace ADEXS.Web.CommonUI.Helpers\n{\n\tpublic abstract class HttpRequestAuditHelper\n\t{\n\t\t/// <summary>\n\t\t/// Should always return the same *statically* allocated instance. Example:\n\t\t/// [EventSource(\"Request Duration\", \"CLM.API\")]\n\t\t/// [Counter(\"Request Duration\", \"CLM.API\",\n\t\t///\tInstanceProperty = \"Description\",\n\t\t///\tDisplayUnit = CounterUnit.milliseconds,\n\t\t///\tRanges = new double[10] { 10, 25, 50, 100, 200, 500, 1000, 2000, 5000, 10000 },\n\t\t///\tMeasureProperty = \"Duration\",\n\t\t///\tSuccessProperty = \"Success\")]\n\t\t/// static readonly TimingEventSource apiEventSource = new TimingEventSource();\n\t\t/// </summary>\n\t\tprotected abstract TimingEventSource ApiEventSource { get; }\n\n\t\t/// <summary>\n\t\t/// Should always return the same *statically* allocated instance. Example:\n\t\t/// [EventSource(\"Request Attempts\", \"CLM.API\")]\n\t\t/// [Counter(\"Request Attempts\", \"CLM.API\", InstanceProperty = \"Description\")]\n\t\t/// static readonly SimpleEventSource attemptEventSource = new SimpleEventSource();\n\t\t/// </summary>\n\t\tprotected abstract SimpleEventSource AttemptEventSource { get; }\n\n\t\t/// <summary>\n\t\t/// Name of the property under which the timing Stopwatch instance will be stored.\n\t\t/// Example: \"ClmApi.Stopwatch\"\n\t\t/// </summary>\n\t\tprotected abstract string PropName_StopWatch { get; }\n\n\t\t/// <summary>\n\t\t/// Name of the property under which the the name of the counter instance will be stored.\n\t\t/// Example: \"ClmApi.InstanceName\"\n\t\t/// </summary>\n\t\tprotected abstract string PropName_CounterInstance { get; }\n\n\t\t/// <summary>\n\t\t/// Name of the property under which any error will be stored.\n\t\t/// Example: \"ClmApi.Error\"\n\t\t/// </summary>\n\t\tprotected abstract string PropName_Error { get; }\n\n\t\t/// <summary>\n\t\t/// Implementations are intended to be used as singletons.\n\t\t/// </summary>\n\t\tprotected HttpRequestAuditHelper()\n\t\t{\n\t\t}\n\n\t\tpublic static void SetCommonDataPoints()\n\t\t{\n\t\t\tif (AtlasContext.Current.AccountId != int.MinValue)\n\t\t\t\tServiceContext.Log(DataPoint.AccountId, AtlasContext.Current.AccountId);\n\t\t\tif (AtlasContext.Current.UserAccountUid != Guid.Empty)\n\t\t\t\tServiceContext.Log(DataPoint.UserId, AtlasContext.Current.UserAccountUid);\n\t\t\tif (AtlasContext.Current.UserAccount != null)\n\t\t\t\tServiceContext.Log(DataPoint.AccountType, Enum.GetName(typeof(Enums.AccountType), AtlasContext.Current.UserAccount.Account.AccountType));\n\t\t}\n\n\t\tpublic virtual void BeginRequest(HttpContext httpContext)\n\t\t{\n\t\t\tActivity.Current?.SetTagsWithCommonFields(httpContext);\n\n\t\t\tif (httpContext.Handler is MvcHandler)\n\t\t\t{\n\t\t\t\t// Handled via MvcAuditedRequestAttribute\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstring counterInstanceName = FormatInstanceName(httpContext);\n\t\t\tAttemptEventSource.Emit(counterInstanceName);\n\n\t\t\tStopwatch sw = Stopwatch.StartNew();\n\t\t\thttpContext.Items[PropName_StopWatch] = sw;\n\t\t\thttpContext.Items[PropName_CounterInstance] = counterInstanceName;\n\t\t}\n\n\t\tpublic virtual void EndRequest(HttpContext httpContext)\n\t\t{\n\t\t\tif(httpContext.Handler is MvcHandler)\n\t\t\t{\n\t\t\t\t// Handled via MvcAuditedRequestAttribute\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSetCommonDataPoints();\n\t\t\t(Stopwatch sw, string instanceName) = GetStopWatchAndInstanceName(httpContext);\n\n\t\t\tbool isError = false;\n\t\t\tException exError = httpContext.Items[PropName_Error] as Exception;\n\t\t\tif (null != exError && !(exError is AdexsDisplayException))\n\t\t\t{\n\t\t\t\tisError = true;\n\t\t\t}\n\n\t\t\tFinalizeLogging(sw, instanceName, isError);\n\t\t}\n\n\t\tpublic virtual void SetError(HttpContext httpContext, Exception ex)\n\t\t{\n\t\t\tif(httpContext.Handler is MvcHandler)\n\t\t\t{\n\t\t\t\t// Handled via MvcAuditedRequestAttribute\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(null != ex)\n\t\t\t{\n\t\t\t\tex.Trace().Report();\n\t\t\t\tServiceContext.Log(DataPoint.ApiErrorMessage, ex.Message);\n\t\t\t\thttpContext.Items[PropName_Error] = ex;\n\t\t\t}\n\t\t}\n\n\t\tprivate (Stopwatch, string) GetStopWatchAndInstanceName(HttpContext httpContext)\n\t\t{\n\t\t\tStopwatch sw = httpContext.Items[PropName_StopWatch] as Stopwatch;\n\t\t\tif (null == sw)\n\t\t\t{\n\t\t\t\tsw = Stopwatch.StartNew();\n\t\t\t}\n\n\t\t\tstring instanceName = httpContext.Items[PropName_CounterInstance] as string;\n\t\t\tif (null == instanceName)\n\t\t\t{\n\t\t\t\tinstanceName = FormatInstanceName(httpContext);\n\t\t\t}\n\n\t\t\treturn (sw, instanceName);\n\t\t}\n\n\t\tprotected virtual string FormatInstanceName(HttpContext httpContext)\n\t\t{\n\t\t\tvar pageName = \"_no-page_\";\n\t\t\tvar httpMethod = \"_no-verb_\";\n\t\t\ttry\n\t\t\t{\n\t\t\t\thttpMethod = httpContext.Request.HttpMethod;\n\t\t\t\tpageName = httpContext.Request.Url.Segments.Last();\n\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{\n\t\t\t\tex.Report();\n\t\t\t}\n\t\t\t\n\t\t\treturn FormatInstanceName(pageName, httpMethod);\n\t\t}\n\n\t\tprotected virtual string FormatInstanceName(string pageName, string httpMethod)\n\t\t{\n\t\t\treturn $\"{pageName}.{httpMethod}\";\n\t\t}\n\n\t\tprivate void FinalizeLogging(Stopwatch sw, string instanceName, bool isError)\n\t\t{\n\t\t\tTimeSpan apiRunTime = TimeSpan.MinValue;\n\t\t\tif (sw != null)\n\t\t\t{\n\t\t\t\tapiRunTime = sw.Elapsed;\n\t\t\t}\n\n\t\t\tApiEventSource.Emit(apiRunTime, !isError, instanceName);\n\t\t}\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (1 occurrences)",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
            "content": "\ufeffusing System;\nusing System.Diagnostics;\nusing System.Web;\nusing System.Xml;\nusing ADEXS.Core.Domain.Repository.SSO;\nusing ADEXS.Core.Domain.Model;\nusing ADEXS.Core.Domain.Repository.User;\nusing ADEXS.Web.Common;\nusing ADEXS.Core.Types;\nusing ADEXS.Web.AtlasUrl;\nusing ADEXS.Web.Common.Logger;\nusing ADEXS.Web.Common.Helpers;\nusing System.Web.SessionState;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.DocuSignSync.Exceptions;\n\nusing CLM.MessageDefines.Event;\nusing ADEXS.Core.Domain.Persistence.Model;\nusing ADEXS.Core.Domain.Repository.EventRepository;\nusing ADEXS.Core.Domain.Repository.OAuth;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.Web.Common.Client;\nusing ADEXS.Web.Common.Exceptions;\nusing ADEXS.Web.Common.Interfaces;\nusing ADEXS.Core.Domain.FeatureFlags;\nusing ADEXS.Core.Domain.RequestHeaders;\n\nnamespace ADEXS.Web.SSO\n{\n\t/// <summary>\n\t/// Summary description for $codebehindclassname$\n\t/// </summary>\n\tpublic class SSOEndpoint : BaseApiHandler, IRequiresSessionState\n\t{\n\t\tprotected static readonly IDiscreetWebLog _log = DiscreetWebLogger.GetLogger(typeof(SSOEndpoint));\n\n\t\tpublic override bool IsReusable\n\t\t{\n\t\t\t// Return false in case your Managed Handler cannot be reused for another request.\n\t\t\t// Usually this would be false in case you have some state information preserved per request.\n\t\t\tget { return true; }\n\t\t}\n\n\t\tprotected override string Path => \"A/SSO/SSOEndpoint\";\n\n\t\tprotected override void HandleRequest(HttpContext context)\n\t\t{\n\t\t\tGuid errorReferenceId = Guid.NewGuid();\n\t\t\tXmlElement samlResponse = null;\n\n\t\t\tif (context == null)\n\t\t\t{\n\t\t\t\tthrow new ArgumentNullException(nameof(context));\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n#if NETFRAMEWORK\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context.ApplicationInstance?.Context);\n#else\n\t\t\t\tActivity.Current?.SetTagsWithCommonFields(context);\n#endif\n\n\t\t\t\tif (!string.IsNullOrEmpty(context.Request[Constants.QueryStringParameters.SAMLResponse]))\n\t\t\t\t{\n\t\t\t\t\t//Ok so check if samlResponse, if not check for aid, if not check domain\n\t\t\t\t\t//if samlresponse load account from idp stuff\n\t\t\t\t\tstring relayState;\n\t\t\t\t\tvar ssoHelper = ServiceLocator.GetInstance<ISsoHelper>();\n\n\t\t\t\t\tssoHelper.ReceiveSAMLResponse(context, out samlResponse, out relayState);\n\n\t\t\t\t\tUserAccount user = ssoHelper.GetUserFromContext(context, samlResponse);\n\t\t\t\t\t//No SSO for APIUsers\n\t\t\t\t\tif (user == null || user.IsApiUser)\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.InfoNoPII($\"SSO Failed for client: could not load user or user is an API user.  Reference Id: {errorReferenceId}\");\n\t\t\t\t\t\tcontext.Response.Redirect(WebUrl.Common.ErrorReferenceId(Resources.SSO.error_FailedSSO, errorReferenceId));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstring samlCookie = CookieHelper.Get3PCookie(context.Request.Cookies, Constants.HttpContextCookie.SamlCookie,\n\t\t\t\t\t\tConstants.HttpContextCookie.SamlCookiePartitioned)?.Value;\n\t\t\t\t\tbool success = false;\n\t\t\t\t\tstring message = string.Empty;\n\t\t\t\t\tstring responseUrl = WebUrl.Common.ErrorReferenceId(Resources.SSO.error_FailedSSO, errorReferenceId);\n\t\t\t\t\tstring issuer = string.Empty;\n\t\t\t\t\tstring sessionIndex = string.Empty;\n\t\t\t\t\tstring targetRestriction = string.Empty;\n\t\t\t\t\tstring ipAddress = IPAddressUtil.FetchIpAddress(context.Request);\n\t\t\t\t\tif (ServiceLocator.GetInstance<ISSORepository>().ValidateSamlResponse(samlResponse, user.Account, samlCookie, out message, out issuer, out sessionIndex, out targetRestriction))\n\t\t\t\t\t{\n\t\t\t\t\t\tSAMLToken token = new SAMLToken();\n\t\t\t\t\t\ttoken.TokenId = samlResponse.Attributes[\"ID\"].Value;\n\t\t\t\t\t\ttoken.AccountId = user.AccountId;\n\t\t\t\t\t\tstring msg = string.Empty;\n\t\t\t\t\t\tif (ServiceLocator.GetInstance<ISSORepository>().Create(user, token, ref msg))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!ApplicationSettings.AllowInternetExplorer && UserAgent.Instance.IsIe && IsValidOAuthClient(relayState, out Guid clientId))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Desktop Applications authenticate with IE, an unsupported browser, so this condition determines if the login request came from a desktop application by checking if\n\t\t\t\t\t\t\t\t// the clientId is coming from an app registered in the DB. We read and clear this cookie in SessionData.Login()\n\t\t\t\t\t\t\t\t// See ATL-64113\n\t\t\t\t\t\t\t\t_log.InfoNoPII($\"Login request came from an OAuth client through an unsupported browser. ClientId: {clientId}\");\n\t\t\t\t\t\t\t\tvar cookieValue = Guid.NewGuid().ToString();\n\t\t\t\t\t\t\t\tCookieHelper.AddPartitioned3PCookies(context.Response?.Cookies,\n\t\t\t\t\t\t\t\t\tnew CreateCookieOptions(Constants.HttpContextCookie.IE11DeprecationOAuthClient, cookieValue, new BaseUrlprovider().BaseDomain(context.Request?.Url))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tExpires = DateTime.UtcNow.AddSeconds(120),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnew CreateCookieOptions(Constants.HttpContextCookie.IE11DeprecationOAuthClientPartitioned, cookieValue, new BaseUrlprovider().BaseDomain(context.Request?.Url))\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tExpires = DateTime.UtcNow.AddSeconds(120),\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tSessionData.Clear();\n\t\t\t\t\t\t\tbool isPasswordLogin = (!user.Account.SSOEnabled || SSORepository.IsAuthenticationApplicationRequest(issuer));\n\t\t\t\t\t\t\tSessionData.Login(user, ipAddress, out message, isPasswordLogin, false, false, (isPasswordLogin ? Enums.LoginAccessPoint.WebUI : Enums.LoginAccessPoint.SSO));\n\t\t\t\t\t\t\tif (string.IsNullOrEmpty(message))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tServiceLocator.GetInstance<IUserAccountRepository>().MarkUserActive(user);\n\n\t\t\t\t\t\t\t\t//Used for Single Logout\n\t\t\t\t\t\t\t\tif (issuer.Trim() != Constants.Authentication.AUTHENTICATION_APPLICATION_ISSUER)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSessionData.IsFederatedSession = true;\n\t\t\t\t\t\t\t\t\tSessionData.SSOSessionIndex = sessionIndex;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t//Restriction is only supported for MVC controllers currently, but can be extended to web forms pages if needed\n\t\t\t\t\t\t\t\tSessionData.RestrictedTo = targetRestriction;\n\n\t\t\t\t\t\t\t\tHttpCookie atlasCookie = context.Response.Cookies[Constants.HttpContextCookie.COOKIE_NAME];\n\t\t\t\t\t\t\t\tif (atlasCookie == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t(new UserCookie(context.Request) { FederatedAccountID = user.AccountId, UserId = user.Uid }).Set(context.Response);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tUserCookie userCookie = new UserCookie(atlasCookie);\n\t\t\t\t\t\t\t\t\tuserCookie.FederatedAccountID = user.AccountId;\n\t\t\t\t\t\t\t\t\tuserCookie.UserId = user.Uid;\n\t\t\t\t\t\t\t\t\tuserCookie.Set(context.Response);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tEventRepository.Instance.FireEvent(user, new UserLoginEvent(user.AccountId, user.Uid, Guid.Empty, 0, user.LastLoginDate));\n\t\t\t\t\t\t\t\tsuccess = true;\n\n\t\t\t\t\t\t\t\tif (!string.IsNullOrEmpty(relayState))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trelayState = WebUrl.EnsureSpringUrl(relayState);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!string.IsNullOrEmpty(relayState) && !relayState.Contains(\"/atlas/Login\"))\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresponseUrl = relayState;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresponseUrl = WebUrl.Common.LandingPage;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (ServiceLocator.GetInstance<IUserAccountRepository>().LoadReplicatedUserAndWaitForSecurityCalc(user.AccountId, user.Uid) == null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tresponseUrl = WebUrl.Atlas.FirstTimeUserSplashPage(responseUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tresponseUrl = WebUrl.Common.Error(message, WebUrl.Auth.DefaultLogoutRedirectUrl());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_log.WarnNoPII($\"Invalid SAMLResponse msg: {msg}  Reference Id: {errorReferenceId}\");\n\t\t\t\t\t\t\tresponseUrl = WebUrl.Common.ErrorReferenceId(msg, errorReferenceId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUrl = WebUrl.Common.ErrorReferenceId(message, errorReferenceId);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!success)\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.WarnNoPII($\"Invalid SAMLResponse Xml Reference Id: {errorReferenceId}\");\n\t\t\t\t\t\t_log.DebugNoPII(samlResponse.OuterXml);\n\n\t\t\t\t\t\tCore.Domain.Model.Login login = ServiceLocator.GetInstance<ILoginRepository>().LoadLoginByAccountIdAndUserAccountUid(user.AccountId, user.Uid);\n\t\t\t\t\t\t//if the sso failed and the user has a password set then send them to login page\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(login?.AuthenticationHash ?? string.Empty) && user.Account.SSOEnabled && !SSORepository.IsAuthenticationApplicationRequest(issuer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresponseUrl = WebUrl.Auth.Login();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!string.IsNullOrWhiteSpace(message))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t_log.WarnNoPII($\"Invalid SAMLResponse Reference Id: {errorReferenceId}\");\n\t\t\t\t\t\t\t_log.DebugNoPII(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!SSORepository.IsAuthenticationApplicationRequest(issuer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tServiceLocator.GetInstance<IUserLoginLogPersistence>().LogInvalidLogin(user.AccountId, Guid.Empty, user.Uid, ipAddress, user.EmailAddress, Enums.LoginAccessPoint.SSO);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t_log.InfoNoPII(\"Valid SAMLResponse Xml\");\n\t\t\t\t\t\t_log.DebugNoPII(samlResponse.OuterXml);\n\t\t\t\t\t\tif (!SSORepository.IsAuthenticationApplicationRequest(issuer))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tServiceLocator.GetInstance<IUserLoginLogPersistence>().Log(user.AccountId, Guid.Empty, user.Uid, ipAddress, Enums.ActionType.LogIn, user.EmailAddress, Enums.LoginAccessPoint.SSO);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.Response.Redirect(responseUrl);\n\t\t\t\t}\n\t\t\t\t//Expect Initial Request and need AuthnRequest\n\t\t\t\t//For some reason the redirect doesn't happen, need to talk to ComponentSpace\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSSOHelper.AttemptSPInitiatedSSO(context);\n\t\t\t\t\t_log.WarnNoPII($\"SSO Failed for client. Non active account. Reference Id: {errorReferenceId}\");\n\t\t\t\t\tcontext.Response.Redirect(WebUrl.Common.ErrorReferenceId(Resources.SSO.error_FailedSSO, errorReferenceId));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (System.Threading.ThreadAbortException) { }\n\t\t\tcatch (UserNotEnabledForCLMException e)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII($\"SSO failed. DocuSign User is not enabled for CLM {errorReferenceId}\", e);\n\t\t\t\tcontext.Response.Redirect(WebUrl.Common.ErrorReferenceId(Resources.SSO.error_CLMNotEnabled, errorReferenceId, false));\n\t\t\t}\n\t\t\tcatch (UnsupportedBrowserException)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII($\"User is trying to access Docusign CLM from an unsupported browser {errorReferenceId}\");\n\t\t\t\tthrow;\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\t_log.WarnNoPII($\"SSO Failed for client.  Reference Id: {errorReferenceId}\", e);\n\t\t\t\tif (samlResponse != null)\n\t\t\t\t{\n\t\t\t\t\t_log.DebugNoPII($\"SamlResponse: {samlResponse.OuterXml}\");\n\t\t\t\t}\n\t\t\t\tcontext.Response.Redirect(WebUrl.Common.ErrorReferenceId(Resources.SSO.error_FailedSSO, errorReferenceId));\n\t\t\t}\n\t\t}\n\n\t\tprotected override bool ShouldRedirect() => AshxToControllerMigrationFeatureFlag.UseSSOEndpointController;\n\n#pragma warning disable CA1822 // Member 'IsValidOAuthClient' does not access instance data and can be marked as static\n\t\tprivate bool IsValidOAuthClient(string returnUrl, out Guid clientId)\n#pragma warning restore CA1822 // Member 'IsValidOAuthClient' does not access instance data and can be marked as static\n\t\t{\n\t\t\tclientId = Guid.Empty;\n\t\t\tif (string.IsNullOrEmpty(returnUrl))\n\t\t\t{\n\t\t\t\t_log.InfoNoPII(\"OAuth Client validation - Relay State is empty\");\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t_log.InfoNoPII($\"OAuth Client validation - Relay State: {returnUrl}\");\n\n\t\t\tint indexOfParams = returnUrl.IndexOf('?');\n\t\t\tstring query = indexOfParams >= 0 ? returnUrl.Substring(indexOfParams) : \"\";\n\n\t\t\tif (returnUrl.IndexOf(\"oauth/authorize\", StringComparison.OrdinalIgnoreCase) >= 0 &&\n\t\t\t\tGuid.TryParse(HttpUtility.ParseQueryString(query).Get(Constants.QueryStringParameters.ClientId), out clientId) ||\n\t\t\t\t(returnUrl.IndexOf(\"oauth\", StringComparison.OrdinalIgnoreCase) >= 0 &&\n\t\t\t\tGuid.TryParse(HttpUtility.ParseQueryString(query).Get(Constants.QueryStringParameters.ApiKey), out clientId) &&\n\t\t\t\tApplicationSettings.AllowUnsupportedBrowserClientIds.Contains(clientId)))\n\t\t\t{\n\t\t\t\tvar oAuthClient = ServiceLocator.GetInstance<IOAuthRepository>().FindByClientId(clientId);\n\t\t\t\t_log.InfoNoPII($\"OAuth client details. ClientId: {clientId}, ClientName: {oAuthClient?.ProductName}\");\n\t\t\t\treturn oAuthClient != null;\n\t\t\t}\n\n\t\t\t_log.InfoNoPII($\"OAuth client not found for client id: {clientId}\");\n\t\t\treturn false;\n\t\t}\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (2 occurrences); Contains method call: SetTag (2 times)",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
            "content": "\ufeffusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Net;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Web.Mvc;\nusing System.Web.SessionState;\nusing ADEXS.Core.Domain.Model;\nusing ADEXS.Core.Domain.Repository.DocumentRepository;\nusing ADEXS.Web.Common;\nusing ADEXS.Web.DocExplorer.Models.PanelModels;\nusing ADEXS.Web.MVC;\nusing ADEXS.Core.Domain.Persistence.Model;\nusing ADEXS.Core.Domain.Repository.MetadataRepository;\nusing ADEXS.Core.Types;\nusing ADEXS.Web.Common.Helpers;\nusing ADEXS.Core.Util.Text;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Exceptions;\nusing ADEXS.Core.Domain.FeatureFlags;\nusing ADEXS.Core.Domain.Repository.User;\nusing ADEXS.Core.Domain.Translation.Utilities;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.SqlCorePersistence;\nusing ADEXS.Web.AtlasUrl;\nusing ADEXS.Web.MVC.Filters;\nusing Newtonsoft.Json;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.Web.Addressbook.Controls.ContactChooser;\nusing static ADEXS.Core.Types.Constants;\nusing Newtonsoft.Json.Linq;\nusing ADEXS.Web.Addressbook.MVC.Models;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Web.Telemetry;\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\n\nnamespace ADEXS.Web.DocExplorer.Controllers.PanelControllers\n{\n\t[RequireAuthentication(true, true, Enums.Privileges.HasGuestRights)]\n\t[SessionState(SessionStateBehavior.ReadOnly)]\n\tpublic class AttributesController : AtlasController\n\t{\n\t\t#region Properties and Variables\n\n\t\tprotected static readonly IDiscreetLogger _log = DiscreetLogger.GetLogger(typeof(AttributesController));\n\n\t\tprivate readonly IDocumentRepository _documentRepository;\n\t\tprivate readonly IFolderRepository _folderRepository;\n\t\tprivate readonly IMetadataRepository _metadataRepository;\n\t\tprivate readonly IMetadataGroupRepository _metadataGroupRepository;\n\t\tprivate readonly IServiceInstrumentation _serviceInstrumentation;\n\n\t\tprivate IRetrieveTranslationUtility _translationUtility;\n\t\tprivate IRetrieveTranslationUtility TranslationUtility\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (_translationUtility == null)\n\t\t\t\t{\n\t\t\t\t\t_translationUtility = ServiceLocator.GetInstance<IRetrieveTranslationUtility>();\n\t\t\t\t\t_translationUtility.SetDefaultNamespace(Enums.TranslationNamespace.Attributes);\n\t\t\t\t}\n\t\t\t\treturn _translationUtility;\n\t\t\t}\n\t\t}\n\n\t\tprivate Metadatas _persistedDocMetadatas;  // make this a private variable so that it doesn't have to be passed around\n\t\tprivate HashSet<Guid> _visibleGroupUids;\n\n\t\tprivate Dictionary<string, List<string>> keys = new Dictionary<string, List<string>>();\n\n\t\t#endregion\n\n\t\t#region Constructor\n\n\t\tpublic AttributesController(\n\t\t\tIDocumentRepository documentRepository,\n\t\t\tIFolderRepository folderRepository,\n\t\t\tIMetadataRepository metadataRepository,\n\t\t\tIMetadataGroupRepository metadataGroupRepository,\n\t\t\tIServiceInstrumentation serviceInstrumentation)\n\t\t{\n\t\t\t_documentRepository = documentRepository;\n\t\t\t_folderRepository = folderRepository;\n\t\t\t_metadataRepository = metadataRepository;\n\t\t\t_metadataGroupRepository = metadataGroupRepository;\n\t\t\t_serviceInstrumentation = serviceInstrumentation;\n\t\t}\n\n\t\t#endregion\n\n\t\tpublic ActionResult Index(string id, Guid docUid, Guid folderUid, int priority = 0)\n\t\t{\n\t\t\tLoadAndValidateDocument(docUid);\n\t\t\tLoadAndValidateFolder(folderUid);\n\n\t\t\tvar currentUser = SessionData.CurrentUser;\n\n\t\t\t// don't load up the whole view model here, angular will lazy load it because the Attributes panel is not the first visible panel on the page\n\t\t\tAttributesViewModel vm = new AttributesViewModel\n\t\t\t{\n\t\t\t\tAccountId = currentUser.AccountId,\n\t\t\t\tId = id,\n\t\t\t\tdocUid = docUid,\n\t\t\t\tfolderUid = folderUid,\n\t\t\t\tPriority = priority,\n\t\t\t\tGroupType = Enums.ToStringIntDictionary<Enums.GroupType>(),\n\t\t\t\tChooserUrl = WebUrl.AddressBook.GetContacts,\n\t\t\t\tCanViewAttributes =  currentUser.Account.Settings.AllowAttributes && HasSufficientRightsToView(),\n\t\t\t\tShowDocumentDetails = ShouldShowDocumentDetails(currentUser)\n\t\t\t};\n\n\t\t\treturn PartialView(\"~/Views/DocExplorer/PanelViews/_AttributesPanel.cshtml\", vm);\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult SaveAttributes(string attrvm)\n\t\t{\n\t\t\tusing var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes));\n\t\t\tsaveActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar stopwatch = Stopwatch.StartNew();\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tattrvm = WebUtility.HtmlDecode(attrvm);\n\t\t\t\tvar attributes = attrvm.ToObject<AttributesViewModel>();\n\t\t\t\tsaveActivity?.SetTag(\"docusign.document.id\", attributes.docUid);\n\n\t\t\t\tvar document = LoadAndValidateDocument(attributes.docUid);\n\n\t\t\t\tif (AttributesShouldBeReadOnly(document))\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"Attributes failed to save, document is read only.\");\n\t\t\t\t}\n\n\t\t\t\t_persistedDocMetadatas = _metadataRepository.Load(SessionData.CurrentUser, document.Type, document.Uid);\n\t\t\t\tsaveActivity?.AddEvent(new ActivityEvent(\"Preparing the save\", saveActivity.StartTimeUtc.Add(stopwatch.Elapsed)));\n\n\t\t\t\t// Perform setup work before saving, compare attributes that already exist on the document vs the attributes coming in from the client.\n\t\t\t\t// If a change is found, ensure the new values are validated and then build the Metadata objects that the MetadataRepository expects for saving.\n\t\t\t\tvar result = FindMetadatasThatNeedUpdating(attributes, document);\n\t\t\t\tsaveActivity?.AddEvent(new ActivityEvent(nameof(FindMetadatasThatNeedUpdating), saveActivity.StartTimeUtc.Add(stopwatch.Elapsed)));\n\n\t\t\t\tif (result.ErrorMessages != null && result.ErrorMessages.Count > 0)\n\t\t\t\t{\n\t\t\t\t\tstatusMessages.AddErrorMessages(result.ErrorMessages);\n\t\t\t\t}\n\t\t\t\telse if (result.UpdatingMetadatas.Count == 0 && result.DeletingMetadatas.Count == 0 && result.DeletingGroups.Count == 0)\n\t\t\t\t{\n\t\t\t\t\tstatusMessages.AddInfoMessage(Resources.Admin.DocExplorer_NoChangesNothingSaved);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tusing (new DatabaseConnectionSwitch(SessionData.CurrentUser))\n\t\t\t\t\t{\n\t\t\t\t\t\tusing (DatabaseTransaction transaction = DatabaseConnection.ThreadConnection.BeginTransaction())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar errors = new List<string>();\n\t\t\t\t\t\t\tif (result.UpdatingMetadatas.Count > 0 || result.DeletingMetadatas.Count > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t/////***** Perform the Metedata SAVE here *****/////\n\t\t\t\t\t\t\t\terrors.AddRange(_metadataRepository.Save(SessionData.CurrentUser, result.UpdatingMetadatas, document, result.DeletingMetadatas));\n\n\t\t\t\t\t\t\t\tif (errors.Count == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tServiceLocator.GetInstance<IUserActionRepository>().LogUserAction(SessionData.CurrentUser, Enums.ActionType.MetadataChanged);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (errors.Count == 0 && result.DeletingGroups.Count > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t/////***** Perform the Group SAVE here *****/////\n\t\t\t\t\t\t\t\terrors.AddRange(SaveDeletedGroups(result.DeletingGroups, document));\n\n\t\t\t\t\t\t\t\tif (errors.Count == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvar _userAccount = SessionData.CurrentUser;\n\t\t\t\t\t\t\t\t\tstring groups = string.Join(Resources.Atlas.js_CommaSpace, result.DeletingGroups.Select(c => c.Name));\n\t\t\t\t\t\t\t\t\tJObject dataBag = new DocumentHistoryData(_userAccount).ToJObject();\n\t\t\t\t\t\t\t\t\tdataBag.Add(Constants.HistoryData.GROUPS, new JValue(groups));\n\t\t\t\t\t\t\t\t\tServiceLocator.GetInstance<IObjectHistoryUtility>().LogDocumentAction(_userAccount, document, Enums.ActionType.MetadataChanged, dataBag, Enums.HistoryMessageIdentifiers.Deleted);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsaveActivity?.AddEvent(new ActivityEvent(nameof(SaveAttributes), saveActivity.StartTimeUtc.Add(stopwatch.Elapsed)));\n\t\t\t\t\t\t\tif (errors.Count > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstatusMessages.AddErrorMessages(errors);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttransaction.Commit();\n\n\t\t\t\t\t\t\t\tif (SessionData.CurrentUser.Settings.EnableABACSecurity && _documentRepository.GetUpdatedDocumentSecurity(SessionData.CurrentUser, document) < Enums.Security.Write)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSessionData.Messages.AddSuccessMessage(Resources.Admin.AttributesSaved);\n\t\t\t\t\t\t\t\t\tsaveActivity?.SetStatus(ActivityStatusCode.Ok);\n\n\t\t\t\t\t\t\t\t\treturn new JsonResult\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tData = new { success = true, ReloadRequired = true }\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tstatusMessages.AddSuccessMessage(Resources.Admin.AttributesSaved);\n\n\t\t\t\t\t\t\t\tAttributesViewModel vm = null;\n\t\t\t\t\t\t\t\tif (SessionData.CurrentUser.Account.Settings.EnableCreateAttributeViewModelForDocExplorer)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tvm = CreateAttributesViewModel(document);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsaveActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\t\t\t\t\treturn new JsonResult\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tData = new { success = true, messages = statusMessages, vm = vm },\n\t\t\t\t\t\t\t\t\tMaxJsonLength = int.MaxValue\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsaveActivity?.SetStatus(ActivityStatusCode.Ok);\n\n\t\t\t\treturn Json(new { success = true, messages = statusMessages });\n\t\t\t}\n\t\t\tcatch(AdexsDisplayException ex)\n\t\t\t{\n\t\t\t\tstatusMessages.AddWarningMessage(ex.Message);\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult LoadAttributes(Guid docUid, Guid folderUid)\n\t\t{\n\t\t\tusing var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\tif (!HasSufficientRightsToView())\n\t\t\t{\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Atlas.error_YouDoNotHaveTheRequiredSecurityToAccessThisPage);\n\t\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAttributesViewModel viewModel;\n\t\t\t\tif (docUid != Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tvar document = LoadAndValidateDocument(docUid);\n\t\t\t\t\tviewModel = CreateAttributesViewModel(document);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar folder = LoadAndValidateFolder(folderUid);\n\t\t\t\t\tviewModel = CreateAttributesViewModel(folder);\n\t\t\t\t}\n\n\t\t\t\tloadActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\treturn new JsonResult\n\t\t\t\t{\n\t\t\t\t\tData = new { success = true, messages = statusMessages, vm = viewModel },\n\t\t\t\t\tMaxJsonLength = int.MaxValue\n\t\t\t\t};\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult LoadGroupSchema(Guid groupUid, Guid docUid, Guid folderUid)\n\t\t{\n\t\t\tusing var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadGroupSchemaActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (groupUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Group Uid must be provided\");\n\t\t\t\t}\n\n\t\t\t\tvar group = _metadataGroupRepository.LoadByUid(groupUid);\n\t\t\t\tif (group == null)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException($\"Group {groupUid} not found\");\n\t\t\t\t}\n\n\t\t\t\tgroup.SetTranslationUtility(TranslationUtility);\n\n\t\t\t\tLoadAndValidateDocument(docUid);\n\t\t\t\tLoadAndValidateFolder(folderUid);\n\t\t\t\t_persistedDocMetadatas = new Metadatas();  // Important! to get the groups schema only, we fake having NO metadata info\n\t\t\t\tvar groupViewModel = CreateGroupViewModelWithoutMetadata(new Dictionary<Guid, MetadataGroup> { [groupUid] = group }, folderUid, docUid, false).First();\n\n\t\t\t\tloadGroupSchemaActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\treturn Json(new { success = true, messages = statusMessages, gvm = groupViewModel });\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\tpublic JsonResult Refresh(Guid docUid)\n\t\t{\n\t\t\tusing var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\trefreshActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\n\t\t\tif (!HasSufficientRightsToView())\n\t\t\t{\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Atlas.error_YouDoNotHaveTheRequiredSecurityToAccessThisPage);\n\t\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tAttributesViewModel viewModel;\n\t\t\t\tif (docUid != Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tvar document = LoadAndValidateDocument(docUid);\n\t\t\t\t\tviewModel = CreateAttributesViewModel(document);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception();\n\t\t\t\t}\n\n\t\t\t\trefreshActivity?.SetStatus(ActivityStatusCode.Ok);\n\t\t\t\treturn new JsonResult\n\t\t\t\t{\n\t\t\t\t\tData = new { success = true, messages = statusMessages, viewModel = viewModel.ToJson() },\n\t\t\t\t\tMaxJsonLength = int.MaxValue\n\t\t\t\t};\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t[HttpPost]\n\t\t[CompressContentAttribute]\n\t\tpublic JsonResult LoadCascadingDropdownOptions(Guid metadataFieldUid, Guid metadataSetUid, Guid docUid, string keyPath)\n\t\t{\n\t\t\tusing var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid);\n\t\t\tloadCascadingDropdownOptionsActivity?.SetTagsWithCommonFields(System.Web.HttpContext.Current);\n\n\t\t\tvar statusMessages = new Messages();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (metadataFieldUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(@\"Parameter cannot be an empty guid.\", nameof(metadataFieldUid));\n\t\t\t\t}\n\n\t\t\t\tif (metadataSetUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(@\"Parameter cannot be an empty guid.\", nameof(metadataSetUid));\n\t\t\t\t}\n\n\t\t\t\tif (docUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tstatusMessages.AddInfoMessage(Resources.Documents.YouMustSaveThisDocumentBeforeCascadingDropdownsCanBeLoaded);\n\t\t\t\t\treturn Json(new { success = false, messages = statusMessages});\n\t\t\t\t}\n\t\t\t\tvar keyPathList = keyPath == null ? new List<string>() : keyPath.ToObject<List<string>>();\n\n\t\t\t\tLoadAndValidateDocument(docUid);\n\n\t\t\t\tvar options = _metadataRepository.GetCascadingTypeAheadValues(metadataSetUid, metadataFieldUid, keyPathList, SessionData.CurrentAccountId);\n\n\t\t\t\tloadCascadingDropdownOptionsActivity?.SetStatus(ActivityStatusCode.Ok);\n\n\t\t\t\treturn Json(new { success = true, messages = statusMessages, options = options.Values });\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII(ex);\n\t\t\t\tstatusMessages.AddErrorMessage(Resources.Documents.AnUnknownErrorHasOccurred);\n\t\t\t}\n\n\t\t\treturn Json(new { success = false, messages = statusMessages });\n\t\t}\n\n\t\t#region Private functions\n\n\t\tpublic Document LoadAndValidateDocument(Guid docUid)\n\t\t{\n\t\t\tDocument document = null;\n\t\t\tif (docUid != Guid.Empty)\n\t\t\t{\n\t\t\t\tdocument = _documentRepository.LoadByUid(SessionData.CurrentUser, docUid);\n\t\t\t\tif (document == null)\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"Document does not exist or current user does not have permissions to view this document.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn document;\n\t\t}\n\t\tpublic Folder LoadAndValidateFolder(Guid folderUid)\n\t\t{\n\t\t\tFolder folder = null;\n\t\t\tif (folderUid != Guid.Empty)\n\t\t\t{\n\t\t\t\tfolder = _folderRepository.LoadByUid(SessionData.CurrentUser, folderUid);\n\t\t\t\tif (folder == null)\n\t\t\t\t{\n\t\t\t\t\tthrow new Exception(\"Folder does not exist or current user does not have access to this folder.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn folder;\n\t\t}\n\n\t\tprivate bool AttributesShouldBeReadOnly(Document document)\n\t\t{\n\t\t\tif(document == null)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (document.IsViewOnly(SessionData.CurrentUser))  // checked out / locked status\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (!document.HasSecurity(Enums.Security.Write))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (_documentRepository.IsTrashed(SessionData.CurrentUser, document))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate bool IsGroupAvailable(MetadataGroup metadataGroup, Guid folderUid)\n\t\t{\n\t\t\tif(_visibleGroupUids == null)\n\t\t\t{\n\t\t\t\t_visibleGroupUids = _metadataGroupRepository.LoadDisplayByAccountIdAndFolderUid(SessionData.CurrentAccountId, folderUid) ?? new HashSet<Guid>();\n\t\t\t}\n\n\t\t\tif (_visibleGroupUids.Count > 0 && !_visibleGroupUids.Contains(metadataGroup.Uid))\n\t\t\t{\n\t\t\t\treturn false;  // this group is not available because the parent folder is hiding this attribute group\n\t\t\t}\n\n\t\t\treturn !metadataGroup.Hidden;\n\t\t}\n\n\t\tprivate bool HasSufficientRightsToView()\n\t\t{\n\t\t\treturn SessionData.CurrentUser.Role <= SessionData.CurrentUser.Account.Settings.AllowToViewAttributesRole;\n\t\t}\n\n\t\t// Methods used for LOADING metadata\n\t\tprivate AttributesViewModel CreateAttributesViewModel(Folder folder)\n\t\t{\n\t\t\tMetadataGroups allGroups = _metadataGroupRepository.LoadByAccountId(SessionData.CurrentAccountId);\n\t\t\t_persistedDocMetadatas = new Metadatas(); // there is no document, so there are no metadatas\n\n\t\t\t//Start building the view model for the attributes page\n\t\t\tAttributesViewModel vm = new AttributesViewModel();\n\t\t\tvm.folderUid = folder.Uid;\n\t\t\tvm.docUid = Guid.Empty;\n\t\t\tvm.ReadOnly = false; // todo: should we check if the user has permissions to create a document in this folder?\n\t\t\tvm.CanViewAttributes = HasSufficientRightsToView();\n\t\t\tvm.ShowDocumentDetails = ShouldShowDocumentDetails(SessionData.CurrentUser);\n\t\t\tvm.groups = CreateGroupViewModelWithoutMetadata(allGroups.ToDictionary(x => x.Uid, x => x), folder.Uid, Guid.Empty, vm.ReadOnly);\n\t\t\t\n\t\t\treturn vm;\n\t\t}\n\t\tprivate AttributesViewModel CreateAttributesViewModel(Document document)\n\t\t{\n\t\t\tMetadataGroups allGroups = _metadataGroupRepository.LoadByAccountId(SessionData.CurrentAccountId);\n\t\t\t_persistedDocMetadatas = _metadataRepository.Load(SessionData.CurrentUser, document.Type, document.Uid);\n\n\t\t\t//Start building the view model for the attributes page\n\t\t\tAttributesViewModel vm = new AttributesViewModel();\n\t\t\tvm.folderUid = document.FolderUid;\n\t\t\tvm.docUid = document.Uid;\n\t\t\tvm.ReadOnly = AttributesShouldBeReadOnly(document);\n\t\t\tvm.groups = CreateGroupsViewModelWithMetadata(allGroups, document.FolderUid, document.Uid, vm.ReadOnly).ToList();\n\t\t\tvm.EnableCreateAttributeViewModelForDocExplorer =\n\t\t\t\tShouldEnableCreateAttributeViewModel(SessionData.CurrentUser);\n\n\t\t\treturn vm;\n\t\t}\n\n\t\tprivate IEnumerable<AttributeGroupViewModel> CreateGroupsViewModelWithMetadata(MetadataGroups allGroups, Guid folderUid, Guid documentUid, bool docIsReadOnly)\n\t\t{\n\t\t\tvar groupsRemaining = allGroups.ToDictionary(x => x.Uid, x => x);\n\t\t\tbool isLoadingAllAttributeGroupFieldOptions =\n\t\t\t\tDocumentAttributesFeatureFlags.EnableLoadingAllAttributeGroupFieldOptions;\n\t\t\tvar groups = ProcessMetadataIntoModels(\n\t\t\t\tmetadatas: _persistedDocMetadatas,\n\t\t\t\tgroupsRemaining: groupsRemaining,\n\t\t\t\tisAttached: true,\n\t\t\t\tdocumentUid: documentUid,\n\t\t\t\tdocIsReadOnly: docIsReadOnly,\n\t\t\t\tgroupFields: new Dictionary<Guid, MetadataFields>(),\n\t\t\t\tshouldLoadAllMetadataFieldOptions: isLoadingAllAttributeGroupFieldOptions);\n\n\t\t\tgroups.AddRange(CreateGroupViewModelWithoutMetadata(groupsRemaining, folderUid, documentUid, docIsReadOnly, isLoadingAllAttributeGroupFieldOptions));\n\n\t\t\treturn groups.OrderBy(x => x.position);\n\t\t}\n\n\t\tprivate List<AttributeGroupViewModel> CreateGroupViewModelWithoutMetadata(Dictionary<Guid, MetadataGroup> allGroups, Guid folderUid, Guid documentUid, bool docIsReadOnly, bool shouldLoadAllMetadataFieldOptions = true)\n\t\t{\n\t\t\tMetadatas groupMetadatas = new Metadatas();\n\t\t\tDictionary<Guid, MetadataFields> groupFields = new Dictionary<Guid, MetadataFields>();\n\t\t\tforeach (MetadataGroup metadataGroup in allGroups.Values.Where(x => IsGroupAvailable(x, folderUid)))\n\t\t\t{\n\t\t\t\t// the group is not attached, so lets create a Metadata object that acts as a template for a field\n\t\t\t\tgroupFields[metadataGroup.Uid] =\n\t\t\t\t\t_metadataRepository.GetMetadataFieldsByMetadataGroupUid(SessionData.CurrentAccountId,\n\t\t\t\t\t\tmetadataGroup.Uid);\n\t\t\t\tforeach (MetadataField metadataField in groupFields[metadataGroup.Uid])\n\t\t\t\t{\n\t\t\t\t\tMetadata metadataTemplate = new Metadata(SessionData.CurrentAccountId, metadataField,\n\t\t\t\t\t\tmetadataField.MetadataSetNumber, Enums.ObjectType.Document, Guid.Empty, null);\n\t\t\t\t\tgroupMetadatas.Add(metadataTemplate);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ProcessMetadataIntoModels(groupMetadatas, allGroups, false, documentUid, docIsReadOnly, groupFields, shouldLoadAllMetadataFieldOptions);\n\t\t}\n\n\t\tprivate List<AttributeGroupViewModel> ProcessMetadataIntoModels(Metadatas metadatas, Dictionary<Guid, MetadataGroup> groupsRemaining, bool isAttached, Guid documentUid, bool docIsReadOnly, Dictionary<Guid, MetadataFields> groupFields, bool shouldLoadAllMetadataFieldOptions = true)\n\t\t{\n\t\t\tList<AttributeGroupViewModel> groups = new List<AttributeGroupViewModel>();\n\t\t\t//_metadataRepository.LoadByDocumentUid shall be called only when allowAllAttributes == FALSE , in case of TRUE documentMetadataUids will not be used. Avoiding unnecessary in case of TRUE \n\t\t\tvar documentMetadataUids = shouldLoadAllMetadataFieldOptions ? new HashSet<Guid>() : _metadataRepository.LoadByDocumentUid(SessionData.CurrentAccountId, documentUid).Select(m => m.MetadataFieldUid).ToHashSet();\n\t\t\tGuid currentGroupUid = Guid.Empty;\n\t\t\tAttributeGroupViewModel currentGroupModel = null;\n\t\t\tAttributeGroupItemViewModel currentGroupItemModel = new AttributeGroupItemViewModel();\n\t\t\t// first process any groups that are already attached to the document\n\t\t\tforeach (Metadata metadata in metadatas)\n\t\t\t{\n\t\t\t\t// filter out protected AOM system metadata groups because these are made editable on the panel via DocumentDetailsController\n\t\t\t\t// metadata groups are retained on the folders/documents for use in search and reporting\n\t\t\t\tif (metadata.MetadataGroupName == SystemMetadataGroupNames.CLM_PARTY || metadata.MetadataGroupName == SystemMetadataGroupNames.CLM_AGREEMENT_DETAILS)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmetadata.SetTranslationUtility(TranslationUtility);\n\t\t\t\t// metadata is loaded ordered by group position and than name so all rows from the same group are naturally clustered together and when we see a new groupUid, we know we can are done with the previous group and can start processing the new one\n\t\t\t\tif (metadata.MetadataGroupUid != currentGroupUid)\n\t\t\t\t{\n\t\t\t\t\tcurrentGroupUid = metadata.MetadataGroupUid;\n\t\t\t\t\tcurrentGroupModel = new AttributeGroupViewModel\n\t\t\t\t\t{\n\t\t\t\t\t\tid = currentGroupUid.ToString(),\n\t\t\t\t\t\tname = metadata.LocalizedGroupName,\n\t\t\t\t\t\tposition = metadata.MetadataGroupPosition,\n\t\t\t\t\t\titems = new List<AttributeGroupItemViewModel>(),\n\t\t\t\t\t\tattached = isAttached,\n\t\t\t\t\t\tdefinitionHash = groupFields.ContainsKey(currentGroupUid) ? HashObject(Transform(groupFields[currentGroupUid])) : CreateMetadataGroupHash(currentGroupUid),\n\t\t\t\t\t\tisSystem = groupsRemaining[currentGroupUid].System\n\t\t\t\t\t};\n\t\t\t\t\tgroups.Add(currentGroupModel);\n\t\t\t\t\tgroupsRemaining.Remove(currentGroupUid);\n\t\t\t\t}\n\n\t\t\t\t// metadata loaded is further ordered by metadata set number and name which ensures that all metadata from the same set is clustered together\n\t\t\t\tif (metadata.MetadataSetUid == Guid.Empty)\n\t\t\t\t{\n\t\t\t\t\tcurrentGroupItemModel = CreateAttributeGroupItemViewModelFromField(metadata);\n\t\t\t\t\tcurrentGroupModel.items.Add(currentGroupItemModel);\n\t\t\t\t}\n\t\t\t\telse if (metadata.MetadataSetUid.ToString() != currentGroupItemModel.setid || metadata.MetadataSetPosition != currentGroupItemModel.position || (metadata.MetadataSetRepeating ? metadata.MetadataSetNumber : 0) != currentGroupItemModel.number)\n\t\t\t\t{\n\t\t\t\t\tcurrentGroupItemModel = CreateSetAttributeGroupItemViewModelFromSet(metadata);\n\t\t\t\t\tcurrentGroupModel.items.Add(currentGroupItemModel);\n\t\t\t\t}\n\t\t\t\tbool populateOptions = shouldLoadAllMetadataFieldOptions || documentMetadataUids.Contains(metadata.MetadataFieldUid);\n\t\t\t\tcurrentGroupItemModel.fields.Add(CreateAttributeFieldViewModel(metadata, documentUid, docIsReadOnly, populateOptions));\n\t\t\t}\n\n\t\t\treturn groups;\n\t\t}\n\n\t\tprivate AttributeGroupItemViewModel CreateAttributeGroupItemViewModelFromField(Metadata docMetadata)\n\t\t{\n\t\t\tAttributeGroupItemViewModel groupItemVm = new AttributeGroupItemViewModel();\n\t\t\tgroupItemVm.type = \"field\";\n\t\t\tgroupItemVm.id = Guid.NewGuid().ToString();\n\t\t\tgroupItemVm.fieldid = docMetadata.MetadataFieldUid.ToString();\n\t\t\tgroupItemVm.groupid = docMetadata.MetadataGroupUid.ToString();\n\t\t\tgroupItemVm.position = docMetadata.MetadataFieldPosition;\n\t\t\tgroupItemVm.name = docMetadata.LocalizedName;\n\t\t\tgroupItemVm.number = docMetadata.Repeating ? docMetadata.MetadataSetNumber : 0;\n\t\t\tgroupItemVm.repeating = docMetadata.Repeating;\n\t\t\tgroupItemVm.fields = new List<AttributeFieldViewModel>();\n\t\t\treturn groupItemVm;\n\t\t}\n\t\tprivate AttributeGroupItemViewModel CreateSetAttributeGroupItemViewModelFromSet(Metadata docMetadata)\n\t\t{\n\t\t\tAttributeGroupItemViewModel groupItemVm = new AttributeGroupItemViewModel();\n\t\t\tgroupItemVm.type = \"set\";\n\t\t\tgroupItemVm.id = Guid.NewGuid().ToString();\n\t\t\tgroupItemVm.setid = docMetadata.MetadataSetUid.ToString();\n\t\t\tgroupItemVm.groupid = docMetadata.MetadataGroupUid.ToString();\n\t\t\tgroupItemVm.position = docMetadata.MetadataSetPosition;\n\t\t\tgroupItemVm.name = docMetadata.LocalizedSetName;\n\t\t\tgroupItemVm.number = docMetadata.MetadataSetRepeating ? docMetadata.MetadataSetNumber : 0;\n\t\t\tgroupItemVm.repeating = docMetadata.MetadataSetRepeating;\n\t\t\tgroupItemVm.fields = new List<AttributeFieldViewModel>();\n\t\t\treturn groupItemVm;\n\t\t}\n\t\tprivate AttributeFieldViewModel CreateAttributeFieldViewModel(\n\t\t\tMetadata docMetadata,\n\t\t\tGuid documentUid,\n\t\t\tbool docIsReadonly,\n\t\t\tbool populateOptions = true)\n\t\t{\n\t\t\tvar fieldvm = new AttributeFieldViewModel();\n\t\t\tfieldvm.id = Guid.NewGuid().ToString();\n\t\t\tfieldvm.metadataid = docMetadata.Uid.ToString();\n\t\t\tfieldvm.fieldid = docMetadata.MetadataFieldUid.ToString();\n\t\t\tfieldvm.name = docMetadata.LocalizedName;\n\t\t\tfieldvm.dataType = (int)docMetadata.DataType;\n\t\t\tfieldvm.value = MetadataRepository.FormatMetaValue(docMetadata.LocalizedValue, docMetadata.DataType, SessionData.CurrentCulture);\n\t\t\tfieldvm.required = docMetadata.IsRequiredAttribute;\n\t\t\tfieldvm.readOnly = docIsReadonly || docMetadata.ReadOnly;\n\t\t\tfieldvm.customErrorMessage = docMetadata.LocalizedCustomValidationErrMsg;\n\t\t\tfieldvm.validationRegEx = docMetadata.LocalizedCustomValidation;\n\t\t\tfieldvm.position = docMetadata.MetadataFieldPosition;\n\t\t\t//String datatype and isLink check\n\t\t\tfieldvm.isLink = docMetadata.DataType == Enums.DataType.String && Uri.IsWellFormedUriString(fieldvm.value, UriKind.Absolute);\n\t\t\t//docMetadata.Definition  // what is this?\n\t\t\tif (docMetadata.DataType == Enums.DataType.Number || docMetadata.DataType == Enums.DataType.Decimal)\n\t\t\t{\n\t\t\t\tfieldvm.decimalChar = SessionData.CurrentCulture.NumberFormat.NumberDecimalSeparator;\n\t\t\t\tfieldvm.groupingChar = SessionData.CurrentCulture.NumberFormat.NumberGroupSeparator;\n\t\t\t}\n\t\t\t//Special casing for various data types\n\t\t\tif (docMetadata.DataType == Enums.DataType.Date)\n\t\t\t{\n\t\t\t\tfieldvm.value = Regex.Replace(fieldvm.value, Constants.SpecialDateTimeFormatCharactersRegexPattern, string.Empty);\n\t\t\t\tfieldvm.dateFormat = \"M/d/yyyy\"; // default value\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tfieldvm.dateFormat = SessionData.CurrentCulture.DateTimeFormat.ShortDatePattern;\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex)\n\t\t\t\t{\n\t\t\t\t\t_log.InfoNoPII(\"Unable to retrieve users date pattern\", ex);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (docMetadata.DataType == Enums.DataType.DropDown || docMetadata.DataType == Enums.DataType.MagicDropDown)\n\t\t\t{\n\t\t\t\tvar options = new List<string>();\n\t\t\t\tif (populateOptions)\n\t\t\t\t{\n\t\t\t\t\toptions.AddRange(docMetadata.LocalizedAllowedDropDownValues().Distinct());\n\t\t\t\t}\n\t\t\t\t// if the value is not in the allowed values (e.g., set via workflow), add that value to the list so the field populates\n\t\t\t\tif (!string.IsNullOrEmpty(fieldvm.value) && !options.Contains(fieldvm.value))\n\t\t\t\t{\n\t\t\t\t\toptions.Add(fieldvm.value);\n\t\t\t\t}\n\n\t\t\t\tfieldvm.options = options;\n\t\t\t}\n\t\t\tif (docMetadata.DataType == Enums.DataType.Cascade)\n\t\t\t{\n\t\t\t\tstring myKey = $\"{docMetadata.MetadataSetUid}-{docMetadata.MetadataSetNumber}\";\n\t\t\t\tif (!keys.ContainsKey(myKey))\n\t\t\t\t{\n\t\t\t\t\tkeys.Add(myKey, new List<string>());\n\t\t\t\t}\n\n\t\t\t\tvar keyPath = keys[myKey];\n\t\t\t\tif (populateOptions && (keyPath.Count <= 0 || !string.IsNullOrEmpty(keyPath.Last())))\n\t\t\t\t{\n\t\t\t\t\tbool enableCascadingAttributesCacheOptimization =\n\t\t\t\t\t\tDocumentAttributesFeatureFlags.EnableCascadingAttributesCacheOptimization;\n\t\t\t\t\tSortedList<string, string> options = new SortedList<string, string>();\n\t\t\t\t\tif (enableCascadingAttributesCacheOptimization)\n\t\t\t\t\t{\n\t\t\t\t\t\toptions = _metadataRepository.GetCascadingTypeAheadValues(docMetadata.MetadataSetUid, docMetadata.MetadataFieldUid, keyPath, docMetadata.AccountId, new Dictionary<Guid, CascadingFieldSet>());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\toptions = _metadataRepository.GetCascadingTypeAheadValues(docMetadata.MetadataSetUid, docMetadata.MetadataFieldUid, keyPath, docMetadata.AccountId);\n\t\t\t\t\t}\n\n\t\t\t\t\tfieldvm.options = options.Values.ToList();\n\t\t\t\t\t\n\t\t\t\t\tif(!string.IsNullOrEmpty(fieldvm.value))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (options.ContainsKey(fieldvm.value))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldvm.value = options[fieldvm.value];\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!options.ContainsValue(fieldvm.value))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfieldvm.options.Add(fieldvm.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfieldvm.options = new List<string>();\n\t\t\t\t}\n\n\t\t\t\tif(docMetadata.Value == null)\n\t\t\t\t{\n\t\t\t\t\t_log.InfoNoPII($\"DocMetadata value was null and added to keypath which may result in a null reference exception.\" +\n\t\t\t\t\t\t$\" DocMetadata Field Id: {docMetadata.MetadataFieldUid}, DocMetadata Field's Group Uid: {docMetadata.MetadataGroupUid}.\");\n\t\t\t\t}\n\t\t\t\tkeyPath.Add(docMetadata.Value);\n\t\t\t}\n\t\t\tif (docMetadata.DataType == Enums.DataType.Actor)\n\t\t\t{\n\t\t\t\tfieldvm.chooserDataSource = EntityDataSource.GetActorEntityDataSource(ActorAttributeRestriction.LoadFromMetadata(docMetadata.Definition, docMetadata.AccountId, docMetadata.MetadataFieldUid));\n\t\t\t}\n\t\t\treturn fieldvm;\n\t\t}\n\n\n\t\t// Methods used for SAVING metadata\n\n\t\tprivate List<string> SaveDeletedGroups(MetadataGroups deletingGroups, Document document)\n\t\t{\n\t\t\tList<string> errorMessages = new List<string>();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tforeach (MetadataGroup mg in deletingGroups)\n\t\t\t\t{\n\t\t\t\t\t_metadataRepository.DeleteByMetadataGroupUid(SessionData.CurrentAccountId, mg.Uid, document.Type, document.Uid);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_log.ErrorNoPII($\"Failed to delete attributes from document '{document.Uid}' with group uids {string.Join(\", \", deletingGroups.Select(c => c.Uid).ToList())}.\", ex);\n\t\t\t\terrorMessages.Add(Resources.Admin.AttributesSaveGroupsFailed);\n\t\t\t}\n\t\t\treturn errorMessages;\n\t\t}\n\n\t\tprivate ChangedMetadatasResult FindMetadatasThatNeedUpdating(AttributesViewModel attributes, Document document)\n\t\t{\n\t\t\tMetadatas updateMetadatas = new Metadatas();\n\t\t\tMetadatas deleteMetadatas = new Metadatas();\n\t\t\tMetadataGroups deletingGroups = new MetadataGroups();\n\t\t\tList<string> errorMessages = new List<string>();\n\t\t\tDictionary<string, List<AttributeGroupItemViewModel>> repeatingItems = new Dictionary<string, List<AttributeGroupItemViewModel>>();\n\t\t\tforeach (AttributeGroupViewModel group in attributes.groups)\n\t\t\t{\n\t\t\t\tif (IsSystemGroup(group))\n\t\t\t\t{\n\t\t\t\t\tcontinue;  // system level groups can not get modified by end users\n\t\t\t\t}\n\n\t\t\t\tswitch (GetGroupDocState(group))\n\t\t\t\t{\n\t\t\t\t\tcase GroupDocState.GroupContinueBeingDetached:\n\t\t\t\t\t\tcontinue; // no need to process this groups items, this group is NOT attached to this document\n\t\t\t\t\tcase GroupDocState.GroupDetaching:\n\t\t\t\t\t\tdeletingGroups.Add(new MetadataGroup { Uid = Guid.Parse(group.id), Name = group.name });\n\t\t\t\t\t\tcontinue; // no need to process this groups items, they will all get deleted\n\t\t\t\t\tcase GroupDocState.GroupAttaching:\n\t\t\t\t\t\tupdateMetadatas.Add(CreateMetadataPlaceHolderForGroup(group, document));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase GroupDocState.GroupContinueBeingAttached:\n\t\t\t\t\t\t// nothing special here, process items below to check for updates \n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tValidateGroup(group);\n\n\t\t\t\tforeach (AttributeGroupItemViewModel item in group.items)\n\t\t\t\t{\n\t\t\t\t\t// HANDLE REPEATING ITEMS (collect repeating fields, and process them later)\n\t\t\t\t\tif (item.repeating)\n\t\t\t\t\t{\n\t\t\t\t\t\tstring itemTypeId = item.type == \"field\" ? item.fieldid : item.setid;\n\t\t\t\t\t\tif (!repeatingItems.ContainsKey(itemTypeId))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trepeatingItems.Add(itemTypeId, new List<AttributeGroupItemViewModel>());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trepeatingItems[itemTypeId].Add(item);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// HANDLE NON-REPEATING ITEMS\n\t\t\t\t\tforeach (AttributeFieldViewModel field in item.fields)\n\t\t\t\t\t{\n\t\t\t\t\t\tGuid metadataUid = Guid.Parse(field.metadataid);\n\t\t\t\t\t\tMetadata persistedMetadata = metadataUid == Guid.Empty\n\t\t\t\t\t\t\t? _persistedDocMetadatas.FirstOrDefault(c => c.MetadataFieldUid == Guid.Parse(field.fieldid))\n\t\t\t\t\t\t\t: _persistedDocMetadatas.SingleOrDefault(c => c.Uid == metadataUid);\n\t\t\t\t\t\tif (persistedMetadata == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// this is a field from a GROUP that is being added to the document, retrieve the MetadataField to create a Metadata object\n\t\t\t\t\t\t\tMetadataField metaField = _metadataRepository.GetMetadataField(SessionData.CurrentAccountId, Guid.Parse(field.fieldid));\n\t\t\t\t\t\t\tmetaField.SetTranslationUtility(TranslationUtility);\n\t\t\t\t\t\t\tpersistedMetadata = new Metadata(SessionData.CurrentAccountId, metaField, document.Type, document.Uid, null);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tMetadataFieldResult result;\n\t\t\t\t\t\tif (IsFieldMarkedForDelete(field, item, group))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = DeleteMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (metadataUid == Guid.Empty)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = CreateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = UpdateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result.Proceed && result.ResultType == MetadataFieldResultType.Update)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tupdateMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (result.Proceed && result.ResultType == MetadataFieldResultType.Delete)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleteMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!string.IsNullOrEmpty(result.ErrorMessage))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terrorMessages.Add(result.ErrorMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach (KeyValuePair<string, List<AttributeGroupItemViewModel>> repeatedItem in repeatingItems)\n\t\t\t{\n\t\t\t\tList<AttributeGroupItemViewModel> items = repeatedItem.Value; // items is a list of all instances of a repeated item or set\n\n\t\t\t\t// retrieve the existing persisted metadatas on the document for the repeating items\n\t\t\t\t// this does not include synthesized rows(aka fake/non-actual rows), also these values come back in a SPECIFIC ORDER)\n\t\t\t\tList<Metadata> persistedMetadatas = GetPersistedMetadatasForRepeatableItem(items[0]);\n\n\t\t\t\tAttributeGroupViewModel group = attributes.groups.First(c => c.id == items[0].groupid);\n\n\t\t\t\tint currentMaxSetNumber = persistedMetadatas.Count == 0 ? 0 : persistedMetadatas.Max(c => c.MetadataSetNumber);\n\n\t\t\t\t// handle deleting items first! Important: remove them from the persistedMetadatas collection\n\t\t\t\tMetadataFieldResult result;\n\t\t\t\tforeach (AttributeGroupItemViewModel item in items)\n\t\t\t\t{\n\t\t\t\t\tif (!IsItemMarkedForDelete( item, group))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tforeach (AttributeFieldViewModel field in item.fields)\n\t\t\t\t\t{\n\t\t\t\t\t\tGuid metadataUid = Guid.Parse(field.metadataid);\n\t\t\t\t\t\tif (metadataUid != Guid.Empty) // empty guid would indicate that this is a field that has yet to be created (therefore do nothing, because there is nothing to delete)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tMetadata persistedMetadata = persistedMetadatas.Single(c => c.Uid == metadataUid); // this has to be here, or there is nothing to delete\n\t\t\t\t\t\t\tresult = DeleteMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t\tif (result.Proceed)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdeleteMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if (!string.IsNullOrEmpty(result.ErrorMessage))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\terrorMessages.Add(result.ErrorMessage);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tpersistedMetadatas.Remove(persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// handle non-deleting items, existing metadatas will be used first so that we can preserve the clients order of the repeatable fields\n\t\t\t\tQueue<int> metadataSetNumbersQueue = new Queue<int>(persistedMetadatas.Select(c => c.MetadataSetNumber).Distinct().OrderBy(c => c));\n\t\t\t\tforeach (AttributeGroupItemViewModel item in items)\n\t\t\t\t{\n\t\t\t\t\tif (IsItemMarkedForDelete(item, group))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tint metadataSetNumberToUse = metadataSetNumbersQueue.Count > 0 ? metadataSetNumbersQueue.Dequeue() : (currentMaxSetNumber += 1);\n\n\t\t\t\t\tforeach (AttributeFieldViewModel field in item.fields)\n\t\t\t\t\t{\n\t\t\t\t\t\t// DO NOT retrieve by metadatauid, we use the metadatasetnumber to preserve the ORDER the client wants\n\t\t\t\t\t\tMetadata persistedMetadata = persistedMetadatas.FirstOrDefault(c => c.MetadataSetNumber == metadataSetNumberToUse && (int)c.DataType == field.dataType && c.MetadataFieldUid == Guid.Parse(field.fieldid));\n\n\t\t\t\t\t\tif (persistedMetadata != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpersistedMetadatas.Remove(persistedMetadata);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (persistedMetadata == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpersistedMetadata = _persistedDocMetadatas.FirstOrDefault(c => c.MetadataFieldUid == Guid.Parse(field.fieldid) && c.Uid == Guid.Empty);\n\t\t\t\t\t\t\tif (persistedMetadata == null)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// this is a field from a GROUP that is being added to the document, retrieve the MetadataField to create a Metadata object\n\t\t\t\t\t\t\t\tMetadataField metaField = _metadataRepository.GetMetadataField(SessionData.CurrentAccountId, Guid.Parse(field.fieldid));\n\t\t\t\t\t\t\t\tmetaField.SetTranslationUtility(TranslationUtility);\n\t\t\t\t\t\t\t\tpersistedMetadata = new Metadata(SessionData.CurrentAccountId, metaField, document.Type, document.Uid, null);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpersistedMetadata.MetadataSetNumber = metadataSetNumberToUse;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (IsFieldMarkedForDelete(field, item, group))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = DeleteMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (persistedMetadata.Uid == Guid.Empty)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = CreateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tresult = UpdateMetadataField(field, item, group, persistedMetadata);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (result.Proceed && result.ResultType == MetadataFieldResultType.Update)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tupdateMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (result.Proceed && result.ResultType == MetadataFieldResultType.Delete)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdeleteMetadatas.Add(result.ResultMetadata);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!string.IsNullOrEmpty(result.ErrorMessage))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\terrorMessages.Add(result.ErrorMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new ChangedMetadatasResult\n\t\t\t{\n\t\t\t\tUpdatingMetadatas = updateMetadatas,\n\t\t\t\tDeletingMetadatas = deleteMetadatas,\n\t\t\t\tDeletingGroups = deletingGroups,\n\t\t\t\tErrorMessages = errorMessages\n\t\t\t};\n\t\t}\n\n\t\tprivate Metadata CreateMetadataPlaceHolderForGroup(AttributeGroupViewModel groupvm, Document document)\n\t\t{\n\t\t\treturn new Metadata(SessionData.CurrentAccountId, Guid.Parse(groupvm.id), Guid.Empty, document.Type, document.Uid, null) {MetadataGroupName = groupvm.name};\n\t\t}\n\n\t\tprivate GroupDocState GetGroupDocState(AttributeGroupViewModel groupvm)\n\t\t{\n\t\t\t// group is marked as attached to doc, and there are NO existing metadatas on the document\n\t\t\tGuid groupUid = Guid.Parse(groupvm.id);\n\t\t\tbool hasExistingMetadatas = _persistedDocMetadatas.Any(c => c.MetadataGroupUid == groupUid);\n\t\t\tif (groupvm.attached)\n\t\t\t{\n\t\t\t\treturn hasExistingMetadatas ? GroupDocState.GroupContinueBeingAttached : GroupDocState.GroupAttaching;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn hasExistingMetadatas ? GroupDocState.GroupDetaching : GroupDocState.GroupContinueBeingDetached;\n\t\t\t}\n\t\t}\n\n\t\tpublic enum GroupDocState\n\t\t{\n\t\t\tGroupAttaching,\n\t\t\tGroupDetaching,\n\t\t\tGroupContinueBeingAttached,\n\t\t\tGroupContinueBeingDetached\n\t\t}\n\n\t\tpublic class ChangedMetadatasResult\n\t\t{\n\t\t\tpublic Metadatas UpdatingMetadatas { get; set; }\n\t\t\tpublic Metadatas DeletingMetadatas { get; set; }\n\t\t\tpublic MetadataGroups DeletingGroups { get; set; }\n\t\t\tpublic List<string> ErrorMessages { get; set; }\n\t\t}\n\n\t\tprivate MetadataFieldResult UpdateMetadataField(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group, Metadata persistedMetadata)\n\t\t{\n\t\t\tstring outMessage;\n\t\t\tstring value = field.value;\n\t\t\tbool isValid = MetadataRepository.ValidateTypeAndFormat(ref value, persistedMetadata, SessionData.CurrentCulture, out outMessage);\n\n\t\t\tMetadataFieldResult rslt = new MetadataFieldResult { Proceed = true, ResultType = MetadataFieldResultType.Update};\n\n\t\t\t// is the metadata allowed to change?\n\t\t\tif (persistedMetadata.ReadOnly && !persistedMetadata.IsCalculatedDataType())\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\tif (persistedMetadata.System)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\t// did anything actually change? if metadata value and order are the same, do nothing\n\t\t\tif (value == persistedMetadata.Value)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\t// are metadata changes valid?\n\t\t\tif (rslt.Proceed && string.IsNullOrEmpty(value))\n\t\t\t{\n\t\t\t\t// this 'if' condition should be impossible, empty/null field values get marked for delete, therefore they should be going to a different code path, this is just in case\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\t\t\tif (rslt.Proceed && value.Length > Metadata.LENGTH_OBJECTMETADATAVALUES_VALUE)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t\trslt.ErrorMessage = string.Format(Resources.Admin.error_AttributeTooLong, persistedMetadata.Name, Metadata.LENGTH_OBJECTMETADATAVALUES_VALUE);\n\t\t\t}\n\t\t\tif (rslt.Proceed && !isValid)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t\trslt.ErrorMessage = outMessage;\n\t\t\t}\n\t\t\t\n\n\t\t\t// if everything is good, create the updated metadata object\n\t\t\tif (rslt.Proceed) {\n\t\t\t\trslt.ResultMetadata = new Metadata(persistedMetadata, persistedMetadata.MetadataSetNumber, value) { Uid = persistedMetadata.Uid };\n\t\t\t}\n\n\t\t\treturn rslt;\n\t\t}\n\t\tprivate MetadataFieldResult CreateMetadataField(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group, Metadata persistedMetadata)\n\t\t{\n\t\t\tpersistedMetadata.Uid = Guid.Empty;\n\t\t\tpersistedMetadata.Value = null;\n\t\t\treturn UpdateMetadataField(field, item, group, persistedMetadata);\n\t\t}\n\t\tprivate MetadataFieldResult DeleteMetadataField(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group, Metadata persistedMetadata)\n\t\t{\n\t\t\tMetadataFieldResult rslt = new MetadataFieldResult {Proceed = true, ResultType = MetadataFieldResultType.Delete};\n\t\t\tif (persistedMetadata.IsRequiredAttribute && !persistedMetadata.Repeating && !persistedMetadata.MetadataSetRepeating && !persistedMetadata.ReadOnly)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t\trslt.ErrorMessage = $\"Attribute {persistedMetadata.Name} is required\";\n\t\t\t}\n\t\t\tif (persistedMetadata.ReadOnly && !persistedMetadata.IsCalculatedDataType())\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\tif (rslt.Proceed && persistedMetadata.Uid == Guid.Empty)\n\t\t\t{\n\t\t\t\trslt.Proceed = false;\n\t\t\t}\n\n\t\t\t// everything is good, set the deletable metadata object\n\t\t\tif (rslt.Proceed)\n\t\t\t{\n\t\t\t\trslt.ResultMetadata = persistedMetadata;\n\t\t\t}\n\n\t\t\treturn rslt;\n\t\t}\n\n\t\tpublic class MetadataFieldResult\n\t\t{\n\t\t\tpublic bool Proceed { get; set; }\n\t\t\tpublic Metadata ResultMetadata { get; set; }\n\t\t\tpublic MetadataFieldResultType ResultType { get; set; }\n\t\t\tpublic string ErrorMessage { get; set; }\n\t\t}\n\n\t\tpublic enum MetadataFieldResultType\n\t\t{\n\t\t\tUpdate = 0,\n\t\t\tDelete = 1\n\t\t}\n\n\t\tprivate List<Metadata> GetPersistedMetadatasForRepeatableItem(AttributeGroupItemViewModel item)\n\t\t{\n\t\t\tList<Metadata> persistedMetadatas = new List<Metadata>();\n\t\t\tif (item.type == \"field\")\n\t\t\t{\n\t\t\t\tpersistedMetadatas = _persistedDocMetadatas.Where(c => c.Repeating && c.MetadataFieldUid == Guid.Parse(item.fieldid) && c.Uid != Guid.Empty).OrderBy(c => c.MetadataSetNumber).ToList();\n\t\t\t}\n\t\t\telse if (item.type == \"set\")\n\t\t\t{\n\t\t\t\tpersistedMetadatas = _persistedDocMetadatas.Where(c => c.MetadataSetRepeating && c.MetadataSetUid == Guid.Parse(item.setid) && c.Uid != Guid.Empty).ToList();\n\t\t\t}\n\n\t\t\treturn persistedMetadatas;\n\t\t}\n\n\t\tprivate bool IsItemMarkedForDelete(AttributeGroupItemViewModel item, AttributeGroupViewModel group)\n\t\t{\n\t\t\tif (!group.attached)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (item.isDeleting)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (item.fields.Count == item.fields.Count(f => string.IsNullOrEmpty(f.value) && f.dataType != (int)Enums.DataType.AutoNumber))\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate bool IsFieldMarkedForDelete(AttributeFieldViewModel field, AttributeGroupItemViewModel item, AttributeGroupViewModel group)\n\t\t{\n\t\t\tif (!group.attached)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (item.isDeleting)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (string.IsNullOrEmpty(field.value) && field.dataType != (int)Enums.DataType.AutoNumber)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tprivate void ValidateGroup(AttributeGroupViewModel groupvm)\n\t\t{\n\t\t\tMetadataFields groupFields = _metadataRepository.GetMetadataFieldsByMetadataGroupUid(SessionData.CurrentAccountId, Guid.Parse(groupvm.id));\n\t\t\tstring latestDefinitionHash = HashObject(Transform(groupFields));\n#pragma warning disable CA1309 // Use ordinal stringcomparison\n\t\t\tif (!string.Equals(groupvm.definitionHash, latestDefinitionHash))\n\t\t\t{\n\t\t\t\t_log.InfoNoPII(\"Attributes were modified by a different process\");\n\t\t\t\tthrow new AdexsDisplayException(Resources.Admin.AttributesConfigurationModifiedMessage);\n\t\t\t}\n#pragma warning restore CA1309 // Use ordinal stringcomparison\n\t\t}\n\n\t\tprivate bool IsSystemGroup(AttributeGroupViewModel groupvm)\n\t\t{\n\t\t\tif (groupvm.isSystem)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t// can't trust the groupvm because it can be modified from the client side, have to check the db to know for sure\n\t\t\tMetadataGroup group = _metadataGroupRepository.LoadByUid(SessionData.CurrentAccountId, Guid.Parse(groupvm.id));\n\t\t\treturn group != null && group.System;\n\t\t}\n\n\t\tprivate string CreateMetadataGroupHash(Guid groupUid)\n\t\t{\n\t\t\tMetadataFields groupFields = _metadataRepository.GetMetadataFieldsByMetadataGroupUid(SessionData.CurrentAccountId, groupUid);\n\t\t\treturn HashObject(Transform(groupFields));\n\t\t}\n\n\t\tprivate static IEnumerable<object> Transform(MetadataFields groupFields)\n\t\t{\n\t\t\tforeach (MetadataField f in groupFields)\n\t\t\t{\n\t\t\t\tvar transformed = new { f.Uid, f.Name, f.Position, f.DataType, f.IsRequiredAttribute, f.ReadOnly, f.Repeating, f.CustomValidationErrMsg, f.CustomValidation, f.AllowedValues };\n\t\t\t\tyield return transformed;\n\t\t\t}\n\t\t}\n\n\t\tprivate bool ShouldShowDocumentDetails(UserAccount userAccount)\n\t\t{\n\t\t\tvar accountSettings = userAccount.Account.Settings;\n\t\t\treturn (accountSettings.EnableCounterpartyManagement || !accountSettings.ShowPartyFieldsOnDocInfoPanel)\n\t\t\t\t|| accountSettings.ShowKeywords\n\t\t\t\t|| accountSettings.ShowFileNameAndFolder;\n\t\t}\n\t\tprivate bool ShouldEnableCreateAttributeViewModel(UserAccount userAccount)\n\t\t{\n\t\t\treturn userAccount.Account.Settings.EnableCreateAttributeViewModelForDocExplorer;\n\t\t}\n\n\t\t#endregion\n\n\t\tpublic string HashObject<T>(T objectToHash)\n\t\t{\n\t\t\tif (objectToHash == null)\n\t\t\t{\n\t\t\t\treturn string.Empty;\n\t\t\t}\n\n\t\t\tstring serializedObject = JsonConvert.SerializeObject(objectToHash);\n\t\t\tbyte[] serializedObjectBytes = Encoding.UTF8.GetBytes(serializedObject);\n\t\t\tbyte[] serializedObjectHashBytes = Hash.SHA1Hash(serializedObjectBytes);\n\t\t\t// Use BitConverter to convert the raw hash bytes to a hex string. We use a hex string because it is a much easier string to work with (because it has a limited character set a-f0-9); \n\t\t\t// if we had decoded the raw hash bytes using UTF8 or something like that we could end up with bizarre or non printable characters, which are more difficult to work with.\n\t\t\tstring serializedObjectHashString = BitConverter.ToString(serializedObjectHashBytes).Replace(\"-\", \"\").ToLower();  \n\t\t\treturn serializedObjectHashString;\n\t\t}\n\t}\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (15 occurrences); Telemetry infrastructure: Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes)), Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid); Contains method call: SetTag (15 times); Matches 3 keywords: SetTag, ActivitySource, OpenTelemetry",
            "search_strategy": "keyword",
            "matching_patterns": [
              "Import: var saveActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(SaveAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(SaveAttributes))",
              "Pattern: OpenTelemetry",
              "Import: var loadCascadingDropdownOptionsActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadCascadingDropdownOptions))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
              "Pattern: ActivitySource",
              "Pattern: StartActivity",
              "OpenTelemetry",
              "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
              "Pattern: SetAttribute",
              "Pattern: Instrumentation",
              "ActivitySource",
              "SetTag",
              "Import: var loadGroupSchemaActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadGroupSchema))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadGroupSchema))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
              "Import: var refreshActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(Refresh))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(Refresh))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)",
              "Import: var loadActivity = _serviceInstrumentation?.ActivitySource\n\t\t\t\t?.StartActivity(nameof(LoadAttributes))\n\t\t\t\t?.SetStatus(ActivityStatusCode.Error)\n\t\t\t\t?.SetTag(TraceSemanticConventions.AttributeCodeFunction, nameof(LoadAttributes))\n\t\t\t\t?.SetTag(\"docusign.document.id\", docUid)"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
            "content": "\ufeffusing System.Diagnostics;\nusing System.Linq;\n\n\n#if NETFRAMEWORK\nusing System.Web;\n#else\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Http.Features;\n#endif\n\nusing DocuSign.Monitoring;\n\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\n\nnamespace ADEXS.Core.Domain.Utilities;\npublic static class ActivityEnricher\n{\n\tpublic static void SetTagsWithCommonFields(this Activity activity, HttpContext context)\n\t{\n\t\tif (activity == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tSetAccountIdTag(activity);\n\t\tSetUserIdTag(activity);\n\t\tSetSessionIdTag(activity, context);\n\t}\n\n\tprivate static void SetAccountIdTag(Activity activity)\n\t{\n\t\tif (AtlasContext.Current != null && AtlasContext.Current.AccountId != 0 && AtlasContext.Current.AccountId != int.MinValue)\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, AtlasContext.Current.AccountId);\n\t\t\treturn;\n\t\t}\n\n\t\tvar dataPointCollection = ServiceContext.Current?.DataPointCollection?.GetDataPointValues(DataPoint.AccountId);\n\t\tif (dataPointCollection != null)\n\t\t{\n\t\t\tvar account = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(account))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignAccountId, account);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static void SetUserIdTag(Activity activity)\n\t{\n\t\tif (AtlasContext.Current != null && !System.Guid.Empty.Equals(AtlasContext.Current.UserAccountUid))\n\t\t{\n\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, AtlasContext.Current.UserAccountUid);\n\t\t\treturn;\n\t\t}\n\n\t\tvar dataPointCollection = ServiceContext.Current?.DataPointCollection?.GetDataPointValues(DataPoint.UserId);\n\t\tif (dataPointCollection != null)\n\t\t{\n\t\t\tvar userId = dataPointCollection.FirstOrDefault();\n\t\t\tif (!string.IsNullOrEmpty(userId))\n\t\t\t{\n\t\t\t\tactivity.SetTag(TraceSemanticConventions.AttributeDocuSignUserId, userId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\n#if NETFRAMEWORK\n\tprivate static void SetSessionIdTag(Activity activity, HttpContext context)\n\t{\n\t\tif (!string.IsNullOrEmpty(context?.Session?.SessionID))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, context?.Session?.SessionID);\n\t\t}\n\t}\n#else\n\tprivate static void SetSessionIdTag(Activity activity, HttpContext context)\n\t{\n\t\tvar session = context == null ? null : GetSession(context);\n\t\tif (!string.IsNullOrEmpty(session?.Id))\n\t\t{\n\t\t\tactivity.SetTag(OtelSemanticConventions.SessionId, session?.Id);\n\t\t}\n\t}\n\n\tprivate static ISession GetSession(HttpContext context)\n\t{\n\t\tvar sessionFeature = context?.Features?.Get<ISessionFeature>();\n\t\treturn sessionFeature == null ? null : context.Session;\n\t}\n#endif\n\n}\n",
            "search_score": 100,
            "search_reasoning": "Direct match for 'SetTag' (7 occurrences); Contains method call: SetTag (7 times)",
            "search_strategy": "keyword",
            "matching_patterns": [
              "SetTag"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
            "content": "\ufeff// BUGBUG: ATL-71924 Move code dependent on System.Web out of Core.Domain\n#if NETFRAMEWORK\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing System.Web;\n\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.Utilities;\nusing ADEXS.Core.ServiceFramework;\nusing ADEXS.Core.ServiceFramework.Helpers;\nusing ADEXS.Core.Util.Config;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.FeatureFlags;\nusing ADEXS.Web.Common.Session;\n\nusing DocuSign.CLM.Monitoring;\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\n\nusing log4net;\nusing log4net.Config;\n\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nusing ApplicationInfo = ADEXS.Core.Domain.Utilities.ApplicationInfo;\n\nnamespace ADEXS.Web.Common;\n\n/// <summary>\n/// Base class for all SCM web applications.\n/// </summary>\npublic abstract class ScmHttpApplication : HttpApplication\n{\n\tprivate ICoreInstrumentationLifetimeService _coreInstrumentationLifetimeService;\n\n\t/// <summary>\n\t/// Don't use the standard Application_Start(). .Net picks one via reflection\n\t/// and runs it. Ends up being this one here, not the one in the derived class.\n\t/// </summary>\n\tprotected void ApplicationStart()\n\t{\n\t\t// log4net initialization\n\t\tFileInfo logConfigFileInfo = new FileInfo(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);\n\t\tXmlConfigurator.ConfigureAndWatch(logConfigFileInfo);\n\n\t\tConfigurationHelper.InitializeConfiguration();\n\n\t\tif (ConfigWrapper.UseOneConfig)\n\t\t{\n\t\t\tBootstrap();\n\t\t}\n\n\t\t// Use MSF specific env variable, fallback to app settings.\n\t\tvar appName = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_APPLICATION\") ?? AppConfig.AppName(ApplicationInfo.Name);\n\t\tvar site = SiteConfig.Site(ApplicationSettings.Site);\n\t\tvar environment = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_ENVIRONMENT\") ?? SiteConfig.Environment(\"Unknown\");\n\t\tvar partition = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_PARTITION\");\n\n\t\tKazmonMonitoring.InitializeKazmon(\n\t\t\tapplicationName: appName,\n\t\t\tappVersion: typeof(ScmHttpApplication).Assembly.GetName().Version.ToString(),\n\t\t\tenvironmentName: environment,\n\t\t\tsiteName: site,\n\t\t\tpartitionName: partition,\n\t\t\tshouldEnableKazmon: () => ApplicationSettings.KazmonEnableMonitoring,\n\t\t\tshouldEnableSmartMon: () => ApplicationSettings.SmartMonEnable,\n\t\t\tshouldEnableLogFileListener: () => Configuration.GetBooleanAppSetting(\"KazmonEnableLogFileListener\", false));\n\n\t\tif (Configuration.GetBooleanAppSetting(\"UseOpenTelemetryNetFramework\", true))\n\t\t{\n\t\t\t_coreInstrumentationLifetimeService = ServiceLocator.Container.TryGetInstance<ICoreInstrumentationLifetimeService>();\n\n\t\t\tif (_coreInstrumentationLifetimeService != null)\n\t\t\t{\n\t\t\t\t// Run synchronously\n\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\tassembly: typeof(ScmHttpApplication).Assembly,\n\t\t\t\t\tconfigureTracer: tracerProviderBuilder =>\n\t\t\t\t\t{\n\t\t\t\t\t\t_ = tracerProviderBuilder\n\t\t\t\t\t\t\n\t\t\t\t\t\t.AddAspNetInstrumentation(options =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t})\n\t\t\t\t\t.AddSource(typeof(RedisSessionStateProviderWrapper).FullName);\n\t\t\t\t\t},\n\t\t\t\t\tconfigureMeter: o => o.AddAspNetInstrumentation(options => options.Enrich = (HttpContext context, ref TagList tags) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (!tags.Any(t => t.Key == \"http.route\") &&\n\t\t\t\t\t\t\tcontext.Request != null &&\n\t\t\t\t\t\t\t(context.Request.Url.AbsolutePath.EndsWith(\"aspx\", StringComparison.OrdinalIgnoreCase) ||\n\t\t\t\t\t\t\t context.Request.Url.AbsolutePath.EndsWith(\"asmx\", StringComparison.OrdinalIgnoreCase) ||\n\t\t\t\t\t\t\t context.Request.Url.AbsolutePath.EndsWith(\"ashx\", StringComparison.OrdinalIgnoreCase)))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttags.Add(\"url.path\", context.Request.Url.AbsolutePath);\n\t\t\t\t\t\t}\n\t\t\t\t\t}))).GetAwaiter().GetResult();\n\t\t\t}\n\t\t}\n\n\t\tif (!ConfigWrapper.UseOneConfig)\n\t\t{\n\t\t\tBootstrap();\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// This one stays the standard Application_End(), as no derive class overrides it.\n\t/// </summary>\n\tprotected virtual void Application_End()\n\t{\n\t\ttry\n\t\t{\n\t\t\tLogManager.Shutdown();\n\t\t}\n\t\tcatch { }\n\n\t\tUninitializeFeatureFlags();\n\n\t\tif (_coreInstrumentationLifetimeService != null)\n\t\t{\n\t\t\t// Run synchronously\n\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StopAsync()).GetAwaiter().GetResult();\n\t\t}\n\n\t\tKazmonMonitoring.ShutdownKazmon();\n\t}\n\n\t/// <summary>\n\t/// This method is called once during application startup to initialize feature flags.\n\t/// </summary>\n\tprotected virtual void InitializeFeatureFlags()\n\t{\n\t\tif (ApplicationSettings.EnableFeatureFlags)\n\t\t{\n\t\t\tFeatureFlagsBootstrap.Init(ApplicationSettings.Site);\n\t\t}\n\t\telse if (ApplicationSettings.EnableFeatureFlagsContext)\n\t\t{\n\t\t\tFeatureFlagsBootstrap.InitializeContextOnly();\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// This method is called once during application shutdown to uninitialize feature flags.\n\t/// </summary>\n\tprotected virtual void UninitializeFeatureFlags()\n\t{\n\t\tif (ApplicationSettings.EnableFeatureFlags || ApplicationSettings.EnableFeatureFlagsContext)\n\t\t{\n\t\t\tFeatureFlagsBootstrap.UnInitialize();\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// This method is called once during application startup to bootstrap the dependency injection container.\n\t/// </summary>\n\tprotected virtual void Bootstrap()\n\t{\n\t}\n}\n\n#endif\n",
            "search_score": 100,
            "search_reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions, Import: OpenTelemetry.Metrics",
            "search_strategy": "pattern",
            "matching_patterns": [
              "Import: DocuSign.CLM.Monitoring",
              "Import: DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions",
              "Import: OpenTelemetry.Metrics",
              "Import: OpenTelemetry.Trace",
              "Pattern: OpenTelemetry",
              "Pattern: Instrumentation",
              "Pattern: Monitoring",
              "Pattern: Metrics",
              "Pattern: UseOpenTelemetry"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs",
            "content": "using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing System.Web;\n\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.ServiceFramework;\nusing ADEXS.Core.ServiceFramework.Helpers;\nusing ADEXS.Core.Util.Config;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.Extensions;\nusing ADEXS.Core.Util.FeatureFlags;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.Core.Workflow;\nusing ADEXS.ElasticCore;\nusing ADEXS.FeatureFlags;\nusing ADEXS.MQ;\nusing DocuSign.CLM.Monitoring;\nusing log4net.Config;\n\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nusing Constants = ADEXS.Core.Types.Constants;\n\nnamespace AtlasCustomerSupport\n{\n\t/// <summary>\n\t/// Summary description for Global.\n\t/// </summary>\n\tpublic class Global : System.Web.HttpApplication\n\t{\n\n\t\tprivate static readonly IDiscreetLogger _log = DiscreetLogger.GetLogger(typeof(Global));\n\n\t\tprivate ICoreInstrumentationLifetimeService _coreInstrumentationLifetimeService;\n\n\n\t\t/// <summary>\n\t\t/// Required designer variable.\n\t\t/// </summary>\n\t\tprivate System.ComponentModel.IContainer components = null;\n\n\t\tpublic Global()\n\t\t{\n\t\t\tInitializeComponent();\n\t\t}\n\n\t\tprotected void Application_Start(Object sender, EventArgs e)\n\t\t{\n\t\t\t// Initialize log4net.  This should eventually be replaced by\n\t\t\t// code in AssemblyInfo.cs once the new log4net version is out.\n\t\t\t// (Added for log4net 1.2.0 Beta 8).\n\t\t\t// TODO: we are using log4net 2.0.8, so this is not needed, we should migrate this code to use AssemblyInfo.cs.\n\t\t\tFileInfo logConfigFileInfo = new FileInfo(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);\n\t\t\tXmlConfigurator.ConfigureAndWatch(logConfigFileInfo);\n\n\t\t\tConfigurationHelper.InitializeConfiguration();\n\n\t\t\tBootstrapper.Bootstrap(() => new List<IServiceRegistry> {\n\t\t\t\tnew MessageQueueRegistry(),\n\t\t\t\tnew WebCoreDomainRegistry(),\n\t\t\t\tnew CoreWorkflowRegistry(WebCoreDomainRegistry.OneConfigPath),\n\t\t\t\tnew ElasticCoreRegistry(),\n\t\t\t\tnew FeatureFlagRegistry(WebCoreDomainRegistry.OneConfigPath),\n\t\t\t\tnew AppFeatureFlagsRegistry<PSOToolFeatureFlagsConfiguration>(),\n\t\t\t\tnew OneConfigServiceRegistry(WebCoreDomainRegistry.OneConfigPath),\n\t\t\t\tnew ServiceConfigServiceRegistry(WebCoreDomainRegistry.OneConfigPath, \"PsoToolConfig.ini\"),\n\t\t\t\tnew AtlasCustomerSupportRegistry(WebCoreDomainRegistry.OneConfigPath),\n\t\t\t\tnew CoreServiceFrameworkRegistry(),\n\t\t\t});\n\n\t\t\t// Use MSF specific env variable, fallback to app settings.\n\t\t\tvar appName = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_APPLICATION\") ?? AppConfig.AppName(\"PSOTool\");\n\t\t\tvar site = SiteConfig.Site(ApplicationSettings.Site);\n\t\t\tvar environment = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_ENVIRONMENT\") ?? SiteConfig.Environment(\"Unknown\");\n\t\t\tvar partition = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_PARTITION\");\n\n\t\t\tKazmonMonitoring.InitializeKazmon(\n\t\t\t\tapplicationName: appName,\n\t\t\t\tappVersion: typeof(Global).Assembly.GetName().Version.ToString(),\n\t\t\t\tenvironmentName: environment,\n\t\t\t\tsiteName: site,\n\t\t\t\tpartitionName: partition,\n\t\t\t\tshouldEnableKazmon: () => ApplicationSettings.KazmonEnableMonitoring,\n\t\t\t\tshouldEnableSmartMon: () => ApplicationSettings.SmartMonEnable,\n\t\t\t\tshouldEnableLogFileListener: () => Configuration.GetBooleanAppSetting(\"KazmonEnableLogFileListener\", false));\n\n\t\t\tif (Configuration.GetBooleanAppSetting(\"UseOpenTelemetryNetFramework\", true))\n\t\t\t{\n\t\t\t\t_coreInstrumentationLifetimeService = ServiceLocator.Container.TryGetInstance<ICoreInstrumentationLifetimeService>();\n\n\t\t\t\tif (_coreInstrumentationLifetimeService != null)\n\t\t\t\t{\n\t\t\t\t\t// Run synchronously\n\t\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StartAsync(\n\t\t\t\t\t\tassembly: typeof(Global).Assembly,\n\t\t\t\t\t\tconfigureTracer: o => o.AddAspNetInstrumentation(),\n\t\t\t\t\t\tconfigureMeter: o => o.AddAspNetInstrumentation(options => options.Enrich = (HttpContext context, ref TagList tags) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (!tags.Any(t => t.Key == \"http.route\") &&\n\t\t\t\t\t\t\t\tcontext.Request != null &&\n\t\t\t\t\t\t\t\t(context.Request.Url.AbsolutePath.EndsWith(\"aspx\", StringComparison.OrdinalIgnoreCase) ||\n\t\t\t\t\t\t\t\t context.Request.Url.AbsolutePath.EndsWith(\"asmx\", StringComparison.OrdinalIgnoreCase) ||\n\t\t\t\t\t\t\t\t context.Request.Url.AbsolutePath.EndsWith(\"ashx\", StringComparison.OrdinalIgnoreCase)))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttags.Add(\"url.path\", context.Request.Url.AbsolutePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}))).GetAwaiter().GetResult();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ApplicationSettings.EnableFeatureFlags)\n\t\t\t{\n\t\t\t\tFeatureFlagsBootstrap.Init(ApplicationSettings.Site);\n\t\t\t}\n\t\t\telse if (ApplicationSettings.EnableFeatureFlagsContext)\n\t\t\t{\n\t\t\t\tFeatureFlagsBootstrap.InitializeContextOnly();\n\t\t\t}\n\t\t}\n\n\t\tprotected void Session_Start(Object sender, EventArgs e)\n\t\t{\n\n\t\t}\n\n\t\tprotected void Application_BeginRequest(Object sender, EventArgs e)\n\t\t{\n\n\t\t}\n\n\t\tprotected void Application_EndRequest(Object sender, EventArgs e)\n\t\t{\n\n\t\t}\n\n\t\tprotected void Application_AuthenticateRequest(Object sender, EventArgs e)\n\t\t{\n\n\t\t}\n\n\t\tprotected void Application_Error(Object sender, EventArgs e)\n\t\t{\n\t\t\tException exception = Server.GetLastError();\n\t\t\tif (exception == null)\n\t\t\t{\n\t\t\t\tException[] allError = HttpContext.Current?.AllErrors;\n\t\t\t\tif (allError != null && allError.Length > 0)\n\t\t\t\t\texception = allError[allError.Length - 1];\n\t\t\t}\n\t\t\tvar guid = Activity.Current?.Id ?? Guid.NewGuid().ToString();\n\t\t\tvar message = $\"An unhandled exception occured. ReferenceId: {guid}\";\n\t\t\t_log.ErrorNoPII(message, exception);\n\t\t\tResponse.Redirect($\"Error.aspx?{Constants.QueryStringParameters.MessageRef}={guid}\");\n\n\t\t\texception?.Trace().Report();\n\t\t}\n\n\t\tprotected void Session_End(Object sender, EventArgs e)\n\t\t{\n\n\t\t}\n\n\t\tprotected void Application_End(Object sender, EventArgs e)\n\t\t{\n\t\t\tif (ApplicationSettings.EnableFeatureFlags || ApplicationSettings.EnableFeatureFlagsContext)\n\t\t\t{\n\t\t\t\tFeatureFlagsBootstrap.UnInitialize();\n\t\t\t}\n\n\t\t\tif (_coreInstrumentationLifetimeService != null)\n\t\t\t{\n\t\t\t\t// Run synchronously\n\t\t\t\tTask.Run(() => _coreInstrumentationLifetimeService.StopAsync()).GetAwaiter().GetResult();\n\t\t\t}\n\n\t\t\tKazmonMonitoring.ShutdownKazmon();\n\t\t}\n\n\t\t#region Web Form Designer generated code\n\t\t/// <summary>\n\t\t/// Required method for Designer support - do not modify\n\t\t/// the contents of this method with the code editor.\n\t\t/// </summary>\n\t\tprivate void InitializeComponent()\n\t\t{\n\t\t\tthis.components = new System.ComponentModel.Container();\n\t\t}\n\t\t#endregion\n\t}\n}\n\n",
            "search_score": 100,
            "search_reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.Monitoring, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
            "search_strategy": "pattern",
            "matching_patterns": [
              "Import: DocuSign.CLM.Monitoring",
              "Import: OpenTelemetry.Metrics",
              "Import: OpenTelemetry.Trace",
              "Pattern: Activity.Current",
              "Pattern: OpenTelemetry",
              "Pattern: Instrumentation",
              "Pattern: Monitoring",
              "Pattern: Metrics",
              "Pattern: UseOpenTelemetry"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
            "content": "using System.Collections.Generic;\n\nusing ADEXS.Atlas.Workflow.Activities;\nusing ADEXS.Atlas.Workflow.Readers;\nusing ADEXS.Core.Domain;\nusing ADEXS.Core.Domain.DocuSignUrl;\nusing ADEXS.Core.Util.Config;\nusing ADEXS.Core.Util.Core;\nusing ADEXS.Core.Util.ServiceLocator;\nusing ADEXS.Core.Workflow;\nusing ADEXS.ElectronicSignature;\nusing ADEXS.Etl;\nusing ADEXS.HealthCheck.AspNetCore.Extensions;\nusing ADEXS.MQ;\nusing ADEXS.OrchestrationIntegration;\nusing ADEXS.ServiceFramework.Extensions;\nusing ADEXS.SForce.Core;\nusing ADEXS.Web.Common.AspNetCore.Extensions;\n\nusing DocuSign.CLM.API.WorkflowActivities;\nusing DocuSign.CLM.API.WorkflowActivities.Infrastructure.Filters;\nusing DocuSign.CLM.API.WorkflowActivities.Infrastructure.Filters.SwaggerDoc;\nusing DocuSign.CLM.API.WorkflowActivities.Infrastructure.IoC;\nusing DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters;\n\nusing DocuSign.CLM.SmallBenClient;\nusing DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics;\nusing DocuSign.Msf.AspNet.VersionEndpoint.Extensions;\n\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.IdentityModel.Logging;\nusing Microsoft.IdentityModel.Tokens;\nusing Microsoft.OpenApi.Models;\n\nusing OpenTelemetry.Metrics;\n\nvar builder = ScmWebApplication.CreateScmWebService(args);\n\nbuilder.ConfigureDefaultScmWebService(\n\targs,\n\t() => new List<IServiceRegistry>\n\t{\n\t\tnew CoreServiceRegistry(),\n\t\tnew CoreWorkflowRegistry(),\n\t\tnew AtlasWorkflowReadersRegistry(),\n\t\tnew MessageQueueRegistry(),\n\t\tnew SmallBenClientRegistry(),\n\t\tnew CoreDomainRegistry(),\n\t\tnew EtlRegistry(),\n\t\tnew ESignatureRegistry(),\n\t\tnew SalesForceRegistry(),\n\t\tnew MergeEngineServiceRegistry(),\n\t\tnew AtlasWorkflowActivitiesRegistry(),\n\t\tnew OrchestrationIntegrationRegistry()\n\t},\n\tWorkflowActivitiesConstants.ServiceName,\n\tconfigureMeter: options =>\n\t{\n\t\toptions.AddView(instrumentName: \"workflowactivities.api.duration\",\n\t\t\tnew ExplicitBucketHistogramConfiguration\n\t\t\t{\n\t\t\t\tBoundaries = new double[] { 10, 25, 50, 100, 200, 500, 1000, 2000, 5000, 10000 }\n\t\t\t});\n\t},\n\tappConfigFileName: \"WorkflowActivitiesApiConfig.ini\");\n\nbuilder.Services.AddWebCoreBasedConfigProviders();\n\n// We only enable JwtAuth when on-prem due to MSF -> onprem communication\nif (ApplicationSettings.EnvironmentType == EnvironmentType.OnPrem)\n{\n\tbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n\t.AddJwtBearer(options =>\n\t{\n\t\toptions.RequireHttpsMetadata = builder.Configuration.GetValue<bool>(\"Jwt_PublicKeyRequireHttps\", true);\n\t\toptions.Authority = new DocuSignAccountsServerUrl().AuthorityUrl();\n#pragma warning disable CA5404 // Do not disable token validation checks\n\t\toptions.TokenValidationParameters = new TokenValidationParameters { ValidateAudience = false };\n#pragma warning restore CA5404 // Do not disable token validation checks\n\t});\n\tbuilder.Services.AddAuthorization(options =>\n\t{\n\t\toptions.AddPolicy(ADEXS.Core.Types.Constants.WorkflowActivitiesApi.ScopePolicyName, policy =>\n\t\t\tpolicy.RequireClaim(\n\t\t\t\tADEXS.Core.Types.Constants.WorkflowActivitiesApi.ScopeClaimKey,\n\t\t\t\tADEXS.Core.Types.Constants.DocuSignAuthenticationScopes.ClmActivitiesExecute));\n\t\toptions.DefaultPolicy = options.GetPolicy(ADEXS.Core.Types.Constants.WorkflowActivitiesApi.ScopePolicyName);\n\t});\n}\nelse\n{\n\tbuilder.Services.AddAuthentication();\n\tbuilder.Services.AddAuthorization(options =>\n\t{\n\t\toptions.AddPolicy(ADEXS.Core.Types.Constants.WorkflowActivitiesApi.AllowAllPolicyName, policy =>\n\t\t\tpolicy.Requirements.Add(new AllowAnonymousRequirement()));\n\t\toptions.DefaultPolicy = options.GetPolicy(ADEXS.Core.Types.Constants.WorkflowActivitiesApi.AllowAllPolicyName);\n\t});\n\tbuilder.Services.AddSingleton<IAuthorizationHandler, AllowAnonymousHandler>();\n}\n\nbuilder.Services.AddWorkflowActivitiesServices();\n\nbuilder.Services.AddMvc(options =>\n{\n\toptions.Filters.Add(new GlobalActionFilter());\n\toptions.Filters.Add(new AuditedRequestAttribute());\n\toptions.Filters.Add(new WorkflowActivitiesExceptionFilterAttribute());\n});\n\n// Do not remove -- this is required for proper deserialization of InstanceVariables\nbuilder.Services.AddControllers().AddNewtonsoftJson();\nbuilder.Services.AddEndpointsApiExplorer();\n\nbuilder.Services.AddSwaggerGen(options =>\n{\n\toptions.CustomOperationIds(c => $\"{c.ActionDescriptor.RouteValues[\"action\"]}\");\n\toptions.SupportNonNullableReferenceTypes();\n\toptions.UseAllOfForInheritance();\n\toptions.SwaggerDoc(WorkflowActivitiesConstants.ServiceVersion, new OpenApiInfo\n\t{\n\t\tTitle = WorkflowActivitiesConstants.ServiceName,\n\t\tVersion = WorkflowActivitiesConstants.ServiceVersion\n\t});\n\toptions.DocumentFilter<PathFormatDocumentFilter>();\n\toptions.SchemaFilter<EnumNameSchemaFilter>();\n});\n\nbuilder.Services.AddSwaggerGenNewtonsoftSupport();\n\nbuilder.Services.AddSingleton<IMetricsEmitter, WorkflowActivitiesMetricsEmitter>();\n\nbuilder.Services.AddHttpClient();\n\nbuilder.Services.AddComponentsInstrumentation();\n\nvar app = builder.Build();\n\nif (app.Environment.IsDevelopment())\n{\n\tIdentityModelEventSource.ShowPII = true;\n}\n\napp.UseCommonScmServices();\n\napp.UseMiddleware<LogRequestHttpMiddleware>();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.UseSwagger();\napp.UseSwaggerUI();\n\napp.UseStaticFiles();\napp.UseStaticFiles($\"/{WorkflowActivitiesConstants.ServiceUrlPrefixNoTrailingSlash}\");\n\napp.MapServiceHealthChecks();\napp.MapVersionEndpoint($\"{WorkflowActivitiesConstants.ServiceUrlPrefix}version\");\napp.MapVersionEndpoint($\"{WorkflowActivitiesConstants.ServiceVersion}/version\");\napp.MapControllers();\n\napp.RunScmWebService();\n",
            "search_score": 100,
            "search_reasoning": "Telemetry infrastructure: Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics, Import: OpenTelemetry.Metrics; Matches 2 keywords: middleware, OpenTelemetry",
            "search_strategy": "pattern",
            "matching_patterns": [
              "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics",
              "Import: OpenTelemetry.Metrics",
              "Pattern: OpenTelemetry",
              "Config file: program.cs",
              "middleware",
              "OpenTelemetry",
              "Pattern: Instrumentation",
              "Import: DocuSign.CLM.API.WorkflowActivities.Infrastructure.Telemetry.Metrics.MetricsEmitters",
              "Pattern: Metrics"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs",
            "content": "\ufeff#if NET\n#nullable enable\n\nusing ADEXS.Caching.OpenTelemetry.Extensions;\nusing ADEXS.Core.ServiceFramework.Extensions;\nusing ADEXS.Core.Util.Cache;\nusing ADEXS.CqlCorePersistence.AspNet.Logging;\nusing ADEXS.CqlCorePersistence.OpenTelemetry;\nusing ADEXS.CqlCorePersistence;\nusing ADEXS.HealthCheck.AspNetCore.Extensions;\nusing ADEXS.MQ.MqConfiguration;\nusing ADEXS.ServiceFramework.Options;\n\nusing DocuSign.Msf.AspNet.HeaderPropagation.Extensions;\nusing DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions;\nusing DocuSign.Msf.AspNet.OpenTelemetry;\nusing DocuSign.Msf.AspNet.VersionEndpoint.Extensions;\nusing DocuSign.Msf.AspNet.VersionEndpoint.Options;\n\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nusing OpenTelemetry.Exporter;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nusing RabbitMQ.Client;\n\nusing ConfigurationProvider = ADEXS.Core.Util.Cache.ConfigurationProvider;\nusing ADEXS.AtlasDataManipulationService.Extensions;\n\nnamespace ADEXS.AtlasDataManipulationService;\n\npublic class Startup\n{\n\tprivate const string ServiceName = \"clm-data-manipulation\";\n\n\tprivate readonly IConfiguration _configuration;\n\n\tprivate readonly IWebHostEnvironment _webHostEnvironment;\n\n\tpublic Startup(IConfiguration configuration, IWebHostEnvironment webHostEnvironment)\n\t{\n\t\t_configuration = configuration;\n\t\t_webHostEnvironment = webHostEnvironment;\n\t}\n\n\t// This method gets called by the runtime. Use this method to add services to the container.\n\t// For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940\n\tpublic void ConfigureServices(IServiceCollection services)\n\t{\n\t\t// We need to update config sooner than Hosting startup.\n\t\tConfigurationProvider.UseConfiguration(_configuration);\n\t\tApplicationSettingsCache.Flush();\n\n\t\tservices\n\t\t\t.Configure<ServicedComponentHostedServiceOptions>(\n\t\t\t\t_configuration.GetSection(ServicedComponentHostedServiceOptions.Section))\n\t\t\t.Configure<VersionEndpointOptions>(_configuration.GetSection(VersionEndpointOptions.Section))\n\t\t\t.Configure<ForwardedHeadersOptions>(_configuration.GetSection(\"ForwardedHeaders\"))\n\t\t\t.Configure<ForwardedHeadersOptions>(options =>\n\t\t\t{\n\t\t\t\toptions.KnownProxies.Clear();\n\t\t\t\toptions.KnownNetworks.Clear();\n\t\t\t}); ;\n\n\t\tvar telemetryConsoleTargets = _configuration\n\t\t\t.GetSection(\"Telemetry:Console:Targets\")\n\t\t\t?.Get<ConsoleExporterOutputTargets>();\n\n\t\tservices\n\t\t\t.AddHttpContextAccessor()\n\t\t\t.AddServiceHealthChecks(_configuration)\n\t\t\t.AddAtlasDataManipulationHealthChecks(_configuration);\n\n\t\tservices.AddHeaderPropagation(options => options.ConfigureMicroservices())\n\t\t\t.AddComponentsInstrumentation()\n\t\t\t.AddServiceTelemetry(\n\t\t\t\tServiceName,\n\t\t\t\tconfigureTracer: options =>\n\t\t\t\t{\n\t\t\t\t\toptions\n\t\t\t\t\t\t.AddHttpClientInstrumentation()\n\t\t\t\t\t\t.AddSqlClientInstrumentation()\n\t\t\t\t\t\t.AddRedisInstrumentation()\n\t\t\t\t\t\t.ConfigureRedisCacheInstrumentation()\n\t\t\t\t\t\t.AddScmCassandraPersistenceInstrumentation();\n\n\t\t\t\t\tif (telemetryConsoleTargets != null)\n\t\t\t\t\t{\n\t\t\t\t\t\toptions.AddConsoleExporter(o => o.Targets = telemetryConsoleTargets.Value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tconfigureMeter: options =>\n\t\t\t\t{\n\t\t\t\t\toptions\n\t\t\t\t\t\t.AddHttpClientInstrumentation()\n\t\t\t\t\t\t.AddServiceMetrics()\n\t\t\t\t\t\t.AddProcessInstrumentation()\n\t\t\t\t\t\t.AddCassandraInstrumentation()\n\t\t\t\t\t\t.AddScmCassandraPersistenceInstrumentation()\n\t\t\t\t\t\t.AddRedisCacheMetrics();\n\n\t\t\t\t\tif (telemetryConsoleTargets != null)\n\t\t\t\t\t{\n\t\t\t\t\t\toptions.AddConsoleExporter(o => o.Targets = telemetryConsoleTargets.Value);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t.AddVersionEndpoint()\n\t\t\t.AddSingleton<IConnectionFactory>(sp =>\n\t\t\t{\n\t\t\t\tvar configuration = sp.GetRequiredService<RabbitMessageQueueWrapperConnectionConfig>();\n\n\t\t\t\treturn new ConnectionFactory\n\t\t\t\t{\n\t\t\t\t\tUri = RabbitMessageQueueWrapperConnectionConfig.BuildUri(),\n\t\t\t\t\tClientProvidedName = configuration.GetClientDefinedConnectionName(),\n\t\t\t\t\tAutomaticRecoveryEnabled = true\n\t\t\t\t};\n\t\t\t});\n\n\t\tservices.AddSingleton<ICassandraSettings, ScmCassandraSettings>();\n\t\tservices.AddSingleton<IAtlasCassandraCluster, AtlasCassandraCluster>();\n\t}\n\tpublic void Configure(IApplicationBuilder app)\n\t{\n\t\tif (_configuration.GetValue<bool>(\"CassandraWireLogging\"))\n\t\t{\n\t\t\tapp.WireCassandraLogging();\n\t\t}\n\n\t\tif (_webHostEnvironment.IsDevelopment())\n\t\t{\n\t\t\tapp.UseDeveloperExceptionPage();\n\t\t}\n\n\t\tapp.UseHeaderPropagation();\n\n\t\tapp.UseRouting();\n\n\t\tapp.UseEndpoints(endpoints =>\n\t\t{\n\t\t\tendpoints.MapServiceHealthChecks();\n\n\t\t\tendpoints.MapVersionEndpoint($\"{ServiceName}/v1/version\");\n\n\t\t\tendpoints.MapGet(\"/\", () => $\"No WebAPI defined for {ServiceName}\");\n\t\t});\n\t}\n}\n\n#nullable restore\n#endif\n",
            "search_score": 100,
            "search_reasoning": "Telemetry infrastructure: Import: ADEXS.Caching.OpenTelemetry.Extensions, Import: ADEXS.CqlCorePersistence.OpenTelemetry, Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
            "search_strategy": "pattern",
            "matching_patterns": [
              "Import: ADEXS.Caching.OpenTelemetry.Extensions",
              "Import: ADEXS.CqlCorePersistence.OpenTelemetry",
              "Import: DocuSign.Msf.AspNet.OpenTelemetry.ServiceMetrics.Extensions",
              "Import: DocuSign.Msf.AspNet.OpenTelemetry",
              "Import: OpenTelemetry.Exporter",
              "Import: OpenTelemetry.Metrics",
              "Import: OpenTelemetry.Trace",
              "Pattern: OpenTelemetry",
              "Pattern: Instrumentation",
              "Pattern: Metrics",
              "Pattern: ConfigureServices",
              "Config file: startup.cs"
            ],
            "is_main_file": true
          },
          {
            "path": "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/CoreInstrumentationLifetimeService.cs",
            "content": "\ufeff#nullable enable\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nusing ADEXS.Core.Util.Config;\nusing ADEXS.Core.Util.Loggers;\nusing ADEXS.ServiceFramework.OpenTelemetry.Extensions;\n\nusing DocuSign.OneConfig.Extensions;\n\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Trace;\n\nusing StructureMap;\n\nnamespace ADEXS.Core.ServiceFramework;\n\npublic class CoreInstrumentationLifetimeService : ICoreInstrumentationLifetimeService\n{\n\tprivate static readonly IDiscreetLogger Log = DiscreetLogger.GetLogger(typeof(CoreInstrumentationLifetimeService));\n\n\tprivate readonly IContainer _container;\n\n\tprivate IHostedService? _openTelemetryService;\n\n\tpublic CoreInstrumentationLifetimeService(IContainer container)\n\t{\n\t\tif (container == null)\n\t\t{\n\t\t\tthrow new ArgumentNullException(nameof(container));\n\t\t}\n\n\t\t_container = container;\n\t}\n\n\tpublic async Task StartAsync(\n\t\tAssembly? assembly = null,\n\t\tAction<TracerProviderBuilder>? configureTracer = null,\n\t\tAction<MeterProviderBuilder>? configureMeter = null,\n\t\tCancellationToken cancellationToken = default)\n\t{\n\t\tvar appConfig = _container.TryGetInstance<IWatchedSingletonConfig<IAppConfig>>()?.Value;\n\n\t\tif (appConfig == null)\n\t\t{\n\t\t\tLog.ErrorNoPII($\"Unable to resolve {nameof(IAppConfig)}, OpenTelemetry won't be configured.\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar configuration = _container.TryGetInstance<IConfiguration>();\n\t\tif (configuration == null)\n\t\t{\n\t\t\tLog.ErrorNoPII($\"Unable to resolve {nameof(IConfiguration)}, OpenTelemetry won't be configured.\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar serviceName = appConfig.TelemetryAppName;\n\n\t\tif (string.IsNullOrWhiteSpace(serviceName))\n\t\t{\n\t\t\tLog.ErrorNoPII($\"{nameof(IAppConfig)}.{nameof(appConfig.TelemetryAppName)} is not defined, OpenTelemetry won't be configured.\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar cloudNameOverride = Environment.GetEnvironmentVariable(\"MONITORING_SYSTEM_APPLICATION\");\n\n\t\tif (!string.IsNullOrWhiteSpace(cloudNameOverride))\n\t\t{\n\t\t\tserviceName = cloudNameOverride;\n\t\t}\n\n\t\tLog.InfoNoPII($\"Starting OpenTelemetry for {serviceName}.\");\n\n\t\tvar services = new ServiceCollection();\n\n\t\tvar serviceVersion = assembly?.GetName().Version?.ToString();\n\n\t\t// Add logging\n\t\tservices.AddLogging();\n\t\tservices.AddScmCoreInstrumentation(\n\t\t\tconfiguration,\n\t\t\tserviceName!,\n\t\t\tserviceVersion: serviceVersion,\n\t\t\tconfigureTracer: configureTracer,\n\t\t\tconfigureMeter: configureMeter);\n\n\t\t// Ensure original configuration is not overriten.\n\t\tforeach (var serviceDescriptor in services.Where(s => s.ServiceType == typeof(IConfiguration)).ToList())\n\t\t{\n\t\t\tservices.Remove(serviceDescriptor);\n\t\t}\n\n\t\tvar existingHostedServices = _container.GetInstance<IEnumerable<IHostedService>>();\n\n\t\tvar registry = new Registry();\n\t\tregistry.Populate(services);\n\n\t\t_container.Configure(c => c.AddRegistry(registry));\n\n\t\tvar updatedHostedServices = _container.GetInstance<IEnumerable<IHostedService>>();\n\t\t_openTelemetryService = updatedHostedServices.Except(existingHostedServices)\n\t\t\t.Where(s => s.GetType().FullName?.StartsWith(\"OpenTelemetry.\", StringComparison.OrdinalIgnoreCase) == true)\n\t\t\t.Single();\n\n\t\tvar loggerFactory = _container.GetInstance<ILoggerFactory>();\n\t\tMicrosoftLoggingAdapterAppender.Attach(loggerFactory);\n\n\t\tawait _openTelemetryService.StartAsync(cancellationToken);\n\n\t\tMicrosoftLoggingAdapterAppender.ClearLoggerCache();\n\n\t\tLog.InfoNoPII($\"OpenTelemetry started for for {serviceName}.\");\n\t}\n\n\tpublic async Task StopAsync(CancellationToken cancellationToken = default)\n\t{\n\t\tLog.InfoNoPII($\"Stopping OpenTelemetry.\");\n\n\t\tMicrosoftLoggingAdapterAppender.Dettach();\n\n\t\tif (_openTelemetryService == null)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tawait _openTelemetryService.StopAsync(cancellationToken);\n\n\t\tLog.InfoNoPII($\"OpenTelemetry Stopped.\");\n\t}\n}\n#nullable restore\n",
            "search_score": 100,
            "search_reasoning": "Telemetry infrastructure: Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions, Import: OpenTelemetry.Metrics, Import: OpenTelemetry.Trace",
            "search_strategy": "pattern",
            "matching_patterns": [
              "Import: ADEXS.ServiceFramework.OpenTelemetry.Extensions",
              "Import: OpenTelemetry.Metrics",
              "Import: OpenTelemetry.Trace",
              "Pattern: OpenTelemetry",
              "Pattern: Instrumentation",
              "Pattern: Metrics",
              "Pattern: TracerProvider",
              "Pattern: MeterProvider",
              "Config file: coreinstrumentationlifetimeservice.cs"
            ],
            "is_main_file": true
          }
        ],
        "Batch 1 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware sits in the ASP.NET Core request pipeline and already performs span / Activity work (it inherits from AbstractLogRequestHttpMiddleware and references DocuSign.Monitoring).  \n\u2022 Because it receives the HttpContext, it has direct access to both the incoming request headers (for \u201cReferer\u201d) and the outgoing response headers (for \u201cLocation\u201d).  \n\u2022 The middleware executes while the \u201cIncoming HTTP Request\u201d Activity created by the auto-instrumentation is still the current Activity, so we can safely call Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026).  \n\u2022 No other files are required\u2014one strategic middleware can capture both headers for every request, minimising code changes and adhering to the \u201csingle strategic file\u201d rule.\nBatch 2 (BaseApiHandler.cs): \u2022 BaseApiHandler.cs is an IHttpHandler used as the entry point for legacy \u2011> .NET 6 migration calls. It owns the ProcessRequest(HttpContext) method, giving it direct access to:\n  \u2013 HttpContext.Request.Headers (to read \u201cReferer\u201d)  \n  \u2013 HttpContext.Response.Headers (to read or set \u201cLocation\u201d when a redirect is issued).\n\n\u2022 The file already references DocuSign.Monitoring and System.Diagnostics, indicating it creates or enriches Activity/Span objects. Therefore the existing telemetry infrastructure is present and can be extended with Activity.Current?.SetTag(\u2026) (or equivalent) calls.\n\n\u2022 Because every incoming ASHX request flows through this single base handler, adding the two attributes here satisfies \u201cadd HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers as attributes on existing incoming HTTP request spans\u201d for the whole CLM web app without touching other files.\n\n\u2022 No other files are required; this one strategic entry-point file is sufficient and minimizes changes.\nBatch 3 (ProfileModule.cs): \u2022 ProfileModule.cs is an IHttpModule that executes for every incoming HTTP request, giving it direct access to HttpContext, Request headers (e.g., \u201cReferer\u201d) and Response headers (e.g., \u201cLocation\u201d).  \n\u2022 The file already references DocuSign.CLM.Monitoring / DocuSign.Monitoring, indicating that spans or activities are created or at least accessible during request processing.  \n\u2022 Within BeginRequest, EndRequest, or similar handlers, the code can retrieve Activity.Current (or the span object used by the monitoring SDK) and call SetTag / SetAttribute to add:  \n\u2003\u2013 HTTP_REFERER  \u2192 context.Request.Headers[\"Referer\"]  \n\u2003\u2013 HTTP_RESPONSE_REDIRECT_LOCATION \u2192 context.Response.Headers[\"Location\"]  \n\u2022 Because ProfileModule runs for every request and already participates in telemetry, it is a single strategic location that can satisfy the telemetry requirement without touching additional files.\n\nThus, modifying only ProfileModule.cs is sufficient to add the required attributes to the existing incoming HTTP request spans.\nBatch 4 (WinsService.cs): Cannot solve gap - The telemetry requirement targets normal incoming HTTP request spans and needs access to standard HTTP request/response headers (\u201cReferer\u201d and \u201cLocation\u201d).  \n\nWinsService.cs is a gRPC service implementation.  \n\u2022 Its execution context is a gRPC ServerCallContext, not a classic ASP.NET Core HTTP context.  \n\u2022 Redirect-related \u201cLocation\u201d headers do not apply to gRPC calls, and the typical HTTP \u201cReferer\u201d header is usually absent as well.  \n\u2022 Although the file references OpenTelemetry, the spans it deals with are gRPC-specific, not the HTTP spans produced by ASP.NET Core middleware.  \n\nTherefore, this file group cannot meaningfully add the required attributes to the existing incoming HTTP request spans for the CLM web application.\nBatch 5 (WinsService.Trace.cs): Cannot solve gap - The only file in this group (WinsService.Trace.cs) shows a helper that starts Activities for internal service methods (StartActivity). It does not run in the HTTP pipeline, has no access to HttpRequest or HttpResponse objects, and is unrelated to the incoming-request spans produced by ASP.NET. Therefore it cannot capture or add the HTTP_REFERER or HTTP_RESPONSE_REDIRECT_LOCATION attributes required. No files in this group are suitable for the requested instrumentation, so the gap cannot be solved here.\nBatch 6 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware sits in the ASP.NET Core request pipeline and already performs span / activity work for every incoming HTTP call (it inherits from AbstractLogRequestHttpMiddleware and references DocuSign-specific OpenTelemetry helpers).  \n\u2022 Because it receives the HttpContext, it can easily read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"] at the same point where it currently enriches or finalizes the request span.  \n\u2022 Adding two Activity-tag (or SetTag / SetAttribute) calls inside this middleware will attach the required attributes to the existing \u201cIncoming HTTP Request Span,\u201d satisfying the telemetry requirement without touching any other file.  \n\u2022 No other files are necessary; this single strategic middleware covers every incoming request and is the canonical place the app already uses for HTTP telemetry enrichment.\nBatch 7 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware is an ASP.NET Core middleware that already intercepts every incoming HTTP request and has full access to HttpContext.Request and HttpContext.Response.  \n\u2022 The middleware already performs telemetry work (uses PropertyBagEventSource, inherits from AbstractLogRequestHttpMiddleware) so adding extra span attributes fits naturally here.  \n\u2022 Because this code executes both before and after the downstream pipeline (it wraps the await _next(context) call), it can read the Referer header before the call and the final Location header after the call \u2014 exactly the two values required.  \n\u2022 Activity/Span context is available via Activity.Current inside middleware; thus we can directly call Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026).  \n\u2022 No other files are needed: one strategic middleware file can satisfy the entire requirement while keeping changes minimal.\nBatch 8 (ProfileMiddleware.cs): \u2022 ProfileMiddleware.cs is an ASP.NET Core middleware that receives every incoming HTTP request (via HttpContext) and already references DocuSign.Monitoring as well as System.Diagnostics.  \n\u2022 Inside its Invoke / InvokeAsync method it can access both:\n  \u2013 Request.Headers[\"Referer\"] before calling _next()  \n  \u2013 Response.Headers[\"Location\"] after _next() completes.  \n\u2022 The current incoming request span is available as Activity.Current (created by existing ASP.NET Core / OpenTelemetry instrumentation). Adding tags to Activity.Current satisfies \u201cADD_ATTRIBUTES\u201d on the existing span.  \n\u2022 Because this single middleware sits early in the pipeline and already participates in telemetry, no additional files are required. Only ProfileMiddleware.cs needs a few extra lines:\n\n```csharp\nvar activity = Activity.Current;\nif (activity != null)\n{\n    if (context.Request.Headers.TryGetValue(\"Referer\", out var referer))\n        activity.SetTag(\"HTTP_REFERER\", referer.ToString());\n\n    await _next(context);   // continue pipeline\n\n    if (context.Response.Headers.TryGetValue(\"Location\", out var location))\n        activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location.ToString());\n}\nelse\n{\n    await _next(context);\n}\n```\n\nThus the single strategic file ProfileMiddleware.cs can fully implement the telemetry requirement.\nBatch 9 (ScmLogAsyncRequestHttpMiddleware.cs): \u2022 The requirement targets incoming HTTP request spans. ScmLogAsyncRequestHttpMiddleware is the central ASP.NET Core middleware responsible for logging/telemetry of every incoming request (inherits from AbstractLogRequestHttpMiddleware and already uses IServiceInstrumentation).  \n\u2022 Being a middleware, it receives both the HttpContext.Request and HttpContext.Response objects and executes code both before and after the downstream pipeline. This provides direct access to:  \n  \u2013 Request.Headers[\"Referer\"] (needed for HTTP_REFERER)  \n  \u2013 Response.Headers[\"Location\"] (available after the next() call, needed for HTTP_RESPONSE_REDIRECT_LOCATION)  \n\u2022 The middleware already creates/updates telemetry (KazMon / Activity / Span) via IServiceInstrumentation, so adding two additional Activity/Span attributes is a small, localized change.  \n\u2022 No other files are necessary; modifying this single, strategic middleware meets the requirement while respecting the \u201cminimize file count\u201d rule.\nBatch 10 (MvcAuditedRequestAttribute.cs): \u2022 MvcAuditedRequestAttribute is an MVC ActionFilter that runs for every incoming HTTP request (OnActionExecuting / OnActionExecuted).  \n\u2022 The file already references telemetry infrastructure (DocuSign.CLM.Monitoring, DocuSign.Monitoring) and therefore has access to Activity/Span objects currently representing the \u201cIncoming HTTP Request Span\u201d.  \n\u2022 Within this filter we can reliably read:  \n  - Request.Headers[\"Referer\"] (before the action executes)  \n  - Response.Headers[\"Location\"] (after the action executes)  \n\u2022 Because Activity.Current is available inside the filter, we can call `SetTag` (or equivalent attribute-adding API) on the existing span without creating new spans.  \n\u2022 No other files are required\u2014this single, central filter runs on every request and is the minimal, strategic place to attach the two requested attributes.\nBatch 11 (HttpRequestAuditHelper.cs): \u2022 The requirement targets \u201cexisting incoming HTTP request spans.\u201d  \n\u2022 HttpRequestAuditHelper.cs already handles request-level telemetry: it imports DocuSign.CLM.Monitoring / DocuSign.Monitoring and is clearly designed to start / enrich spans or counters for every MVC request.  \n\u2022 Because this helper sits in the request pipeline and receives HttpContext (Request / Response), it can easily read:\n  \u2013 Request.Headers[\"Referer\"]  \n  \u2013 Response.Headers[\"Location\"]  \n  and then call Activity.SetTag / span.SetAttribute on the current span.  \n\u2022 Therefore, modifying this single strategic helper file is sufficient\u2014no other files need changes.\nBatch 12 (SSOEndpoint.ashx.cs): \u2022 SSOEndpoint.ashx.cs is an ASP-NET HttpHandler that directly receives an incoming HTTP request (it implements ProcessRequest on HttpContext) and constructs the HTTP response\u2014including redirects that set Response.Headers[\"Location\"].  \n\u2022 The handler already references System.Diagnostics, so Activity.Current is readily available for extending existing incoming HTTP spans generated by ASP-NET/OpenTelemetry auto-instrumentation.  \n\u2022 From this central request-handling point we can:\n  \u2013 Read the inbound Referer header via context.Request.Headers[\"Referer\"].  \n  \u2013 Inspect the outbound redirect header (context.Response.Headers[\"Location\"]) right before the response is flushed.  \n  \u2013 Add both values to the active span with Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026).  \n\u2022 Because this file fully owns the request/response lifecycle for its endpoint, no additional files or middleware need modification to satisfy the requirement for this execution path, keeping changes minimal as per prioritization rules.\nBatch 13 (UploadFiles.ashx.cs): Cannot solve gap - The requirement is to add the HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers as attributes on every incoming HTTP-request span in the entire CLM web application. That instrumentation should be performed at a centralized entry-point (e.g., Global.asax, an HTTP module, middleware, or another common request pipeline component) so that it uniformly affects every request.\n\nThe only file in this group, UploadFiles.ashx.cs, is a specific IHttpHandler for file uploads.  \n\u2022 It handles just one endpoint, so modifying it would not cover all incoming requests.  \n\u2022 There is no existing Activity/telemetry code here that could be simply extended.  \n\u2022 Adding instrumentation here would only address this single handler, leaving the broader requirement unmet.\n\nBecause this file cannot provide the needed application-wide instrumentation and there is no other strategic file in the group, the group cannot solve the telemetry gap.\nBatch 14 (AttributesController.cs): \u2022 The requirement is to add two tags (HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION) to the existing incoming HTTP-request span.  \n\u2022 In ASP.NET MVC, the active span for an HTTP request is available through System.Diagnostics.Activity.Current while the request is being processed inside a controller action.  \n\u2022 AttributesController.cs is an MVC controller; its action methods execute in the context of the active request Activity, so it can call Activity.Current?.SetTag(..) with the needed header values.  \n\u2022 There is no more strategic, central file (e.g., Global.asax, middleware, or a custom action filter) present in this group. Therefore the simplest, lowest-impact place to instrument is directly inside this controller (or by adding a small private helper inside the same file that runs in OnActionExecuting / OnResultExecuted overrides).  \n\u2022 No other files are needed to meet the requirement, so choosing only AttributesController.cs adheres to the \u201cminimize file count\u201d rule.\nBatch 15 (ActivityEnricher.cs): \u2022 The requirement is to add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to the existing \u201cIncoming HTTP Request\u201d spans.  \n\u2022 ActivityEnricher.cs is already an enrichment utility that receives both the Activity (span) and the HttpContext and sets multiple custom tags using activity.SetTag(...).  \n\u2022 Because it has direct access to context.Request.Headers and context.Response.Headers, this single file can be extended to read:  \n  \u2013 context.Request.Headers[\"Referer\"] \u2192 \u201cHTTP_REFERER\u201d tag  \n  \u2013 context.Response.Headers[\"Location\"] \u2192 \u201cHTTP_RESPONSE_REDIRECT_LOCATION\u201d tag  \n\u2022 No other files are needed; the enrichment logic is centralized here, so modifying ActivityEnricher.cs satisfies the telemetry gap with minimal surface area.\nBatch 16 (ScmHttpApplication.cs): \u2022 The requirement targets incoming HTTP request spans. ScmHttpApplication.cs is the application-wide HTTP entry point (acts like Global.asax) and already wires up OpenTelemetry (see OpenTelemetry.Trace, AddAspNetInstrumentation references).  \n\u2022 Because the OpenTelemetry pipeline is configured here, we can extend it in one place:\n  \u2013 Either via AddAspNetInstrumentation(options => options.Enrich = \u2026) or  \n  \u2013 In Application_BeginRequest / Application_EndRequest by updating Activity.Current.  \n  Both approaches let us add the two headers as attributes on the existing span.\n\u2022 No other files are needed; a small enrichment block in this single strategic file meets the requirement while keeping modification scope minimal.\nBatch 17 (Global.asax.cs): \u2022 Global.asax.cs is the ASP .NET application entry point and already references OpenTelemetry.Trace.  \n\u2022 In Application_BeginRequest/EndRequest (or similar) it has access to HttpContext and Activity.Current, which corresponds to the \u201cIncoming HTTP Request Span\u201d created by ASP.NET instrumentation.  \n\u2022 From that location we can read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"] and attach them to the current Activity with SetTag / SetCustomProperty.  \n\u2022 No other files are needed\u2014adding two lines in Global.asax.cs during the request lifecycle instruments every incoming span, fulfilling the requirement while keeping the change minimal.\nBatch 18 (Program.cs): \u2022 The requirement is to add two HTTP header values (Referer and Location) as attributes on the existing \u201cIncoming HTTP Request\u201d spans.  \n\u2022 Such attributes are normally added through the ASP.NET Core (or general HTTP) instrumentation enrichment delegate that is registered at application start-up.  \n\u2022 Program.cs is the single, strategic bootstrapping file that builds the WebApplication/Host, registers OpenTelemetry tracing, and configures all middleware and services. This is exactly where AddOpenTelemetryTracing / AddAspNetCoreInstrumentation is typically set up.  \n\u2022 By adding or modifying the Enrich callback in Program.cs we can read:\n  \u2013 context.Request.Headers[\"Referer\"] \u2192 set tag \u201cHTTP_REFERER\u201d  \n  \u2013 context.Response.Headers[\"Location\"] \u2192 set tag \u201cHTTP_RESPONSE_REDIRECT_LOCATION\u201d  \n  and attach them to the Activity that represents the incoming HTTP request span.  \n\u2022 No controller, middleware, or other file needs to be touched\u2014one central change in Program.cs is sufficient, satisfying the \u201cprefer single strategic files\u201d rule.\nBatch 19 (Startup.cs): Startup.cs wires up the ASP.NET Core request pipeline and already configures OpenTelemetry components through various \u201c.OpenTelemetry\u201d extension methods. That makes it the single strategic place where we can:\n\n1. Insert a small custom middleware (or register an OpenTelemetry \u201cEnrich\u201d delegate) that runs for every incoming HTTP request.\n2. Read Request.Headers[\"Referer\"] and, after the response is generated, Response.Headers[\"Location\"].\n3. Add those values as tags on the current Activity (the existing \u201cIncoming HTTP Request\u201d span created by ASP.NET Core instrumentation).\n\nBecause Startup.cs controls both service registration and middleware ordering, no other files are required to implement this telemetry enrichment.\nBatch 20 (CoreInstrumentationLifetimeService.cs): \u2022 CoreInstrumentationLifetimeService.cs is the central location where the application wires-up OpenTelemetry (adds TracerProviderBuilder, MeterProviderBuilder, etc.).  \n\u2022 Incoming HTTP request spans are automatically created by the ASP.NET Core instrumentation that is registered from this file; therefore, the file already has direct access to configure enrichment callbacks (e.g., `builder.AddAspNetCoreInstrumentation(options => { \u2026 })`).  \n\u2022 The requirement\u2014adding HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION as attributes on those spans\u2014can be met by adding an `Enrich` or `OnEndActivity`/`OnStartActivity` delegate inside this same builder configuration.  \n\u2022 No other files in the group deal with HTTP processing or OpenTelemetry configuration, so modifying just this strategic file keeps the change minimal and maintainable.\nBatch 21 (WorkflowActivitiesController.cs): Cannot solve gap - \u2022 The requirement is to add the headers as attributes on the existing \u201cincoming HTTP request\u201d span created for every request to the CLM web app.  \n\u2022 That span is started by ASP.NET Core middleware before any controller code runs and is finished after the response is sent.  \n\u2022 Capturing both the request header (\u201cReferer\u201d) and the response header (\u201cLocation\u201d) reliably therefore needs code that executes in the middleware pipeline (or a global action filter) \u2013 not only inside an individual controller action.  \n\u2022 The only file in this group, WorkflowActivitiesController.cs, is a single controller specific to workflow-activities. It cannot see or modify every request/response, and adding SetTag logic here would instrument only this controller\u2019s endpoints, leaving the rest of the app uncovered.  \n\u2022 There is no existing custom middleware or base controller in this file where a reusable instrumentation hook could be placed.  \n\u2022 Consequently, this file group, by itself, cannot implement the telemetry requirement in a correct, application-wide manner, so no file in the group is selected for modification."
      ],
      "error": null,
      "execution_time": 135.10010385513306,
      "cache_hit": false
    },
    "patch_generation": {
      "stage_name": "patch_generation",
      "status": "StageStatus.COMPLETED",
      "result": {
        "diff": "The common helper `ActivityEnricher.SetTagsWithCommonFields` is already invoked at the *beginning* and again at the *end* of every request across\n\u2022 ASP.NET Framework modules (ProfileModule, BaseApiHandler, \u2026)  \n\u2022 ASP.NET Core middleware (ProfileMiddleware, ScmLogAsyncRequestHttpMiddleware, etc.).\n\nBy extending this single, central method we enrich the **same incoming HTTP-request span** with the two new attributes whenever\nthey are available, without touching multiple pipelines.\n\nPath changed:\n\u2022 `src/Core.Domain/Utilities/ActivityEnricher.cs`\n\nAssumptions:\n1. Not every request will have a Referer or a redirect Location header \u2013 we only tag when a value exists.\n2. Multiple calls are harmless; already-set tags are not overwritten.",
        "explanation": "--- a/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs\n+++ b/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs\n@@\n \\t\\tSetAccountIdTag(activity);\n \\t\\tSetUserIdTag(activity);\n \\t\\tSetSessionIdTag(activity, context);\n+\\t\\tSetRequestRefererTag(activity, context);\n+\\t\\tSetResponseRedirectLocationTag(activity, context);\n \\t}\n@@\n \\t}\n \n+#region HTTP header helpers\n+\\tprivate static void SetRequestRefererTag(Activity activity, HttpContext context)\n+\\t{\n+\\t\\t// Do not overwrite if already present (method could be called twice).\n+\\t\\tif (activity.GetTagItem(\\\"HTTP_REFERER\\\") != null)\n+\\t\\t{\n+\\t\\t\\treturn;\n+\\t\\t}\n+\n+#if NETFRAMEWORK\n+\\t\\tvar referer = context?.Request?.Headers?[\\\"Referer\\\"];\n+#else\n+\\t\\tvar referer = context?.Request?.Headers[\\\"Referer\\\"].FirstOrDefault();\n+#endif\n+\\t\\tif (!string.IsNullOrEmpty(referer))\n+\\t\\t{\n+\\t\\t\\tactivity.SetTag(\\\"HTTP_REFERER\\\", referer);\n+\\t\\t}\n+\\t}\n+\n+\\tprivate static void SetResponseRedirectLocationTag(Activity activity, HttpContext context)\n+\\t{\n+\\t\\t// Do not overwrite if already present (method could be called twice).\n+\\t\\tif (activity.GetTagItem(\\\"HTTP_RESPONSE_REDIRECT_LOCATION\\\") != null)\n+\\t\\t{\n+\\t\\t\\treturn;\n+\\t\\t}\n+\n+#if NETFRAMEWORK\n+\\t\\tvar redirectLocation = context?.Response?.Headers?[\\\"Location\\\"];\n+#else\n+\\t\\tvar redirectLocation = context?.Response?.Headers[\\\"Location\\\"].FirstOrDefault();\n+#endif\n+\\t\\tif (!string.IsNullOrEmpty(redirectLocation))\n+\\t\\t{\n+\\t\\t\\tactivity.SetTag(\\\"HTTP_RESPONSE_REDIRECT_LOCATION\\\", redirectLocation);\n+\\t\\t}\n+\\t}\n+#endregion\n+\n #if NETFRAMEWORK\n \\tprivate static void SetSessionIdTag(Activity activity, HttpContext context)\n@@\n #endif\n \n }",
        "selection_reasoning": "Batch 1 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware sits in the ASP.NET Core request pipeline and already performs span / Activity work (it inherits from AbstractLogRequestHttpMiddleware and references DocuSign.Monitoring).  \n\u2022 Because it receives the HttpContext, it has direct access to both the incoming request headers (for \u201cReferer\u201d) and the outgoing response headers (for \u201cLocation\u201d).  \n\u2022 The middleware executes while the \u201cIncoming HTTP Request\u201d Activity created by the auto-instrumentation is still the current Activity, so we can safely call Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026).  \n\u2022 No other files are required\u2014one strategic middleware can capture both headers for every request, minimising code changes and adhering to the \u201csingle strategic file\u201d rule.\nBatch 2 (BaseApiHandler.cs): \u2022 BaseApiHandler.cs is an IHttpHandler used as the entry point for legacy \u2011> .NET 6 migration calls. It owns the ProcessRequest(HttpContext) method, giving it direct access to:\n  \u2013 HttpContext.Request.Headers (to read \u201cReferer\u201d)  \n  \u2013 HttpContext.Response.Headers (to read or set \u201cLocation\u201d when a redirect is issued).\n\n\u2022 The file already references DocuSign.Monitoring and System.Diagnostics, indicating it creates or enriches Activity/Span objects. Therefore the existing telemetry infrastructure is present and can be extended with Activity.Current?.SetTag(\u2026) (or equivalent) calls.\n\n\u2022 Because every incoming ASHX request flows through this single base handler, adding the two attributes here satisfies \u201cadd HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers as attributes on existing incoming HTTP request spans\u201d for the whole CLM web app without touching other files.\n\n\u2022 No other files are required; this one strategic entry-point file is sufficient and minimizes changes.\nBatch 3 (ProfileModule.cs): \u2022 ProfileModule.cs is an IHttpModule that executes for every incoming HTTP request, giving it direct access to HttpContext, Request headers (e.g., \u201cReferer\u201d) and Response headers (e.g., \u201cLocation\u201d).  \n\u2022 The file already references DocuSign.CLM.Monitoring / DocuSign.Monitoring, indicating that spans or activities are created or at least accessible during request processing.  \n\u2022 Within BeginRequest, EndRequest, or similar handlers, the code can retrieve Activity.Current (or the span object used by the monitoring SDK) and call SetTag / SetAttribute to add:  \n\u2003\u2013 HTTP_REFERER  \u2192 context.Request.Headers[\"Referer\"]  \n\u2003\u2013 HTTP_RESPONSE_REDIRECT_LOCATION \u2192 context.Response.Headers[\"Location\"]  \n\u2022 Because ProfileModule runs for every request and already participates in telemetry, it is a single strategic location that can satisfy the telemetry requirement without touching additional files.\n\nThus, modifying only ProfileModule.cs is sufficient to add the required attributes to the existing incoming HTTP request spans.\nBatch 4 (WinsService.cs): Cannot solve gap - The telemetry requirement targets normal incoming HTTP request spans and needs access to standard HTTP request/response headers (\u201cReferer\u201d and \u201cLocation\u201d).  \n\nWinsService.cs is a gRPC service implementation.  \n\u2022 Its execution context is a gRPC ServerCallContext, not a classic ASP.NET Core HTTP context.  \n\u2022 Redirect-related \u201cLocation\u201d headers do not apply to gRPC calls, and the typical HTTP \u201cReferer\u201d header is usually absent as well.  \n\u2022 Although the file references OpenTelemetry, the spans it deals with are gRPC-specific, not the HTTP spans produced by ASP.NET Core middleware.  \n\nTherefore, this file group cannot meaningfully add the required attributes to the existing incoming HTTP request spans for the CLM web application.\nBatch 5 (WinsService.Trace.cs): Cannot solve gap - The only file in this group (WinsService.Trace.cs) shows a helper that starts Activities for internal service methods (StartActivity). It does not run in the HTTP pipeline, has no access to HttpRequest or HttpResponse objects, and is unrelated to the incoming-request spans produced by ASP.NET. Therefore it cannot capture or add the HTTP_REFERER or HTTP_RESPONSE_REDIRECT_LOCATION attributes required. No files in this group are suitable for the requested instrumentation, so the gap cannot be solved here.\nBatch 6 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware sits in the ASP.NET Core request pipeline and already performs span / activity work for every incoming HTTP call (it inherits from AbstractLogRequestHttpMiddleware and references DocuSign-specific OpenTelemetry helpers).  \n\u2022 Because it receives the HttpContext, it can easily read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"] at the same point where it currently enriches or finalizes the request span.  \n\u2022 Adding two Activity-tag (or SetTag / SetAttribute) calls inside this middleware will attach the required attributes to the existing \u201cIncoming HTTP Request Span,\u201d satisfying the telemetry requirement without touching any other file.  \n\u2022 No other files are necessary; this single strategic middleware covers every incoming request and is the canonical place the app already uses for HTTP telemetry enrichment.\nBatch 7 (LogAsyncRequestHttpMiddleware.cs): \u2022 LogAsyncRequestHttpMiddleware is an ASP.NET Core middleware that already intercepts every incoming HTTP request and has full access to HttpContext.Request and HttpContext.Response.  \n\u2022 The middleware already performs telemetry work (uses PropertyBagEventSource, inherits from AbstractLogRequestHttpMiddleware) so adding extra span attributes fits naturally here.  \n\u2022 Because this code executes both before and after the downstream pipeline (it wraps the await _next(context) call), it can read the Referer header before the call and the final Location header after the call \u2014 exactly the two values required.  \n\u2022 Activity/Span context is available via Activity.Current inside middleware; thus we can directly call Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026).  \n\u2022 No other files are needed: one strategic middleware file can satisfy the entire requirement while keeping changes minimal.\nBatch 8 (ProfileMiddleware.cs): \u2022 ProfileMiddleware.cs is an ASP.NET Core middleware that receives every incoming HTTP request (via HttpContext) and already references DocuSign.Monitoring as well as System.Diagnostics.  \n\u2022 Inside its Invoke / InvokeAsync method it can access both:\n  \u2013 Request.Headers[\"Referer\"] before calling _next()  \n  \u2013 Response.Headers[\"Location\"] after _next() completes.  \n\u2022 The current incoming request span is available as Activity.Current (created by existing ASP.NET Core / OpenTelemetry instrumentation). Adding tags to Activity.Current satisfies \u201cADD_ATTRIBUTES\u201d on the existing span.  \n\u2022 Because this single middleware sits early in the pipeline and already participates in telemetry, no additional files are required. Only ProfileMiddleware.cs needs a few extra lines:\n\n```csharp\nvar activity = Activity.Current;\nif (activity != null)\n{\n    if (context.Request.Headers.TryGetValue(\"Referer\", out var referer))\n        activity.SetTag(\"HTTP_REFERER\", referer.ToString());\n\n    await _next(context);   // continue pipeline\n\n    if (context.Response.Headers.TryGetValue(\"Location\", out var location))\n        activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location.ToString());\n}\nelse\n{\n    await _next(context);\n}\n```\n\nThus the single strategic file ProfileMiddleware.cs can fully implement the telemetry requirement.\nBatch 9 (ScmLogAsyncRequestHttpMiddleware.cs): \u2022 The requirement targets incoming HTTP request spans. ScmLogAsyncRequestHttpMiddleware is the central ASP.NET Core middleware responsible for logging/telemetry of every incoming request (inherits from AbstractLogRequestHttpMiddleware and already uses IServiceInstrumentation).  \n\u2022 Being a middleware, it receives both the HttpContext.Request and HttpContext.Response objects and executes code both before and after the downstream pipeline. This provides direct access to:  \n  \u2013 Request.Headers[\"Referer\"] (needed for HTTP_REFERER)  \n  \u2013 Response.Headers[\"Location\"] (available after the next() call, needed for HTTP_RESPONSE_REDIRECT_LOCATION)  \n\u2022 The middleware already creates/updates telemetry (KazMon / Activity / Span) via IServiceInstrumentation, so adding two additional Activity/Span attributes is a small, localized change.  \n\u2022 No other files are necessary; modifying this single, strategic middleware meets the requirement while respecting the \u201cminimize file count\u201d rule.\nBatch 10 (MvcAuditedRequestAttribute.cs): \u2022 MvcAuditedRequestAttribute is an MVC ActionFilter that runs for every incoming HTTP request (OnActionExecuting / OnActionExecuted).  \n\u2022 The file already references telemetry infrastructure (DocuSign.CLM.Monitoring, DocuSign.Monitoring) and therefore has access to Activity/Span objects currently representing the \u201cIncoming HTTP Request Span\u201d.  \n\u2022 Within this filter we can reliably read:  \n  - Request.Headers[\"Referer\"] (before the action executes)  \n  - Response.Headers[\"Location\"] (after the action executes)  \n\u2022 Because Activity.Current is available inside the filter, we can call `SetTag` (or equivalent attribute-adding API) on the existing span without creating new spans.  \n\u2022 No other files are required\u2014this single, central filter runs on every request and is the minimal, strategic place to attach the two requested attributes.\nBatch 11 (HttpRequestAuditHelper.cs): \u2022 The requirement targets \u201cexisting incoming HTTP request spans.\u201d  \n\u2022 HttpRequestAuditHelper.cs already handles request-level telemetry: it imports DocuSign.CLM.Monitoring / DocuSign.Monitoring and is clearly designed to start / enrich spans or counters for every MVC request.  \n\u2022 Because this helper sits in the request pipeline and receives HttpContext (Request / Response), it can easily read:\n  \u2013 Request.Headers[\"Referer\"]  \n  \u2013 Response.Headers[\"Location\"]  \n  and then call Activity.SetTag / span.SetAttribute on the current span.  \n\u2022 Therefore, modifying this single strategic helper file is sufficient\u2014no other files need changes.\nBatch 12 (SSOEndpoint.ashx.cs): \u2022 SSOEndpoint.ashx.cs is an ASP-NET HttpHandler that directly receives an incoming HTTP request (it implements ProcessRequest on HttpContext) and constructs the HTTP response\u2014including redirects that set Response.Headers[\"Location\"].  \n\u2022 The handler already references System.Diagnostics, so Activity.Current is readily available for extending existing incoming HTTP spans generated by ASP-NET/OpenTelemetry auto-instrumentation.  \n\u2022 From this central request-handling point we can:\n  \u2013 Read the inbound Referer header via context.Request.Headers[\"Referer\"].  \n  \u2013 Inspect the outbound redirect header (context.Response.Headers[\"Location\"]) right before the response is flushed.  \n  \u2013 Add both values to the active span with Activity.Current?.SetTag(\"HTTP_REFERER\", \u2026) and Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", \u2026).  \n\u2022 Because this file fully owns the request/response lifecycle for its endpoint, no additional files or middleware need modification to satisfy the requirement for this execution path, keeping changes minimal as per prioritization rules.\nBatch 13 (UploadFiles.ashx.cs): Cannot solve gap - The requirement is to add the HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers as attributes on every incoming HTTP-request span in the entire CLM web application. That instrumentation should be performed at a centralized entry-point (e.g., Global.asax, an HTTP module, middleware, or another common request pipeline component) so that it uniformly affects every request.\n\nThe only file in this group, UploadFiles.ashx.cs, is a specific IHttpHandler for file uploads.  \n\u2022 It handles just one endpoint, so modifying it would not cover all incoming requests.  \n\u2022 There is no existing Activity/telemetry code here that could be simply extended.  \n\u2022 Adding instrumentation here would only address this single handler, leaving the broader requirement unmet.\n\nBecause this file cannot provide the needed application-wide instrumentation and there is no other strategic file in the group, the group cannot solve the telemetry gap.\nBatch 14 (AttributesController.cs): \u2022 The requirement is to add two tags (HTTP_REFERER, HTTP_RESPONSE_REDIRECT_LOCATION) to the existing incoming HTTP-request span.  \n\u2022 In ASP.NET MVC, the active span for an HTTP request is available through System.Diagnostics.Activity.Current while the request is being processed inside a controller action.  \n\u2022 AttributesController.cs is an MVC controller; its action methods execute in the context of the active request Activity, so it can call Activity.Current?.SetTag(..) with the needed header values.  \n\u2022 There is no more strategic, central file (e.g., Global.asax, middleware, or a custom action filter) present in this group. Therefore the simplest, lowest-impact place to instrument is directly inside this controller (or by adding a small private helper inside the same file that runs in OnActionExecuting / OnResultExecuted overrides).  \n\u2022 No other files are needed to meet the requirement, so choosing only AttributesController.cs adheres to the \u201cminimize file count\u201d rule.\nBatch 15 (ActivityEnricher.cs): \u2022 The requirement is to add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to the existing \u201cIncoming HTTP Request\u201d spans.  \n\u2022 ActivityEnricher.cs is already an enrichment utility that receives both the Activity (span) and the HttpContext and sets multiple custom tags using activity.SetTag(...).  \n\u2022 Because it has direct access to context.Request.Headers and context.Response.Headers, this single file can be extended to read:  \n  \u2013 context.Request.Headers[\"Referer\"] \u2192 \u201cHTTP_REFERER\u201d tag  \n  \u2013 context.Response.Headers[\"Location\"] \u2192 \u201cHTTP_RESPONSE_REDIRECT_LOCATION\u201d tag  \n\u2022 No other files are needed; the enrichment logic is centralized here, so modifying ActivityEnricher.cs satisfies the telemetry gap with minimal surface area.\nBatch 16 (ScmHttpApplication.cs): \u2022 The requirement targets incoming HTTP request spans. ScmHttpApplication.cs is the application-wide HTTP entry point (acts like Global.asax) and already wires up OpenTelemetry (see OpenTelemetry.Trace, AddAspNetInstrumentation references).  \n\u2022 Because the OpenTelemetry pipeline is configured here, we can extend it in one place:\n  \u2013 Either via AddAspNetInstrumentation(options => options.Enrich = \u2026) or  \n  \u2013 In Application_BeginRequest / Application_EndRequest by updating Activity.Current.  \n  Both approaches let us add the two headers as attributes on the existing span.\n\u2022 No other files are needed; a small enrichment block in this single strategic file meets the requirement while keeping modification scope minimal.\nBatch 17 (Global.asax.cs): \u2022 Global.asax.cs is the ASP .NET application entry point and already references OpenTelemetry.Trace.  \n\u2022 In Application_BeginRequest/EndRequest (or similar) it has access to HttpContext and Activity.Current, which corresponds to the \u201cIncoming HTTP Request Span\u201d created by ASP.NET instrumentation.  \n\u2022 From that location we can read Request.Headers[\"Referer\"] and Response.Headers[\"Location\"] and attach them to the current Activity with SetTag / SetCustomProperty.  \n\u2022 No other files are needed\u2014adding two lines in Global.asax.cs during the request lifecycle instruments every incoming span, fulfilling the requirement while keeping the change minimal.\nBatch 18 (Program.cs): \u2022 The requirement is to add two HTTP header values (Referer and Location) as attributes on the existing \u201cIncoming HTTP Request\u201d spans.  \n\u2022 Such attributes are normally added through the ASP.NET Core (or general HTTP) instrumentation enrichment delegate that is registered at application start-up.  \n\u2022 Program.cs is the single, strategic bootstrapping file that builds the WebApplication/Host, registers OpenTelemetry tracing, and configures all middleware and services. This is exactly where AddOpenTelemetryTracing / AddAspNetCoreInstrumentation is typically set up.  \n\u2022 By adding or modifying the Enrich callback in Program.cs we can read:\n  \u2013 context.Request.Headers[\"Referer\"] \u2192 set tag \u201cHTTP_REFERER\u201d  \n  \u2013 context.Response.Headers[\"Location\"] \u2192 set tag \u201cHTTP_RESPONSE_REDIRECT_LOCATION\u201d  \n  and attach them to the Activity that represents the incoming HTTP request span.  \n\u2022 No controller, middleware, or other file needs to be touched\u2014one central change in Program.cs is sufficient, satisfying the \u201cprefer single strategic files\u201d rule.\nBatch 19 (Startup.cs): Startup.cs wires up the ASP.NET Core request pipeline and already configures OpenTelemetry components through various \u201c.OpenTelemetry\u201d extension methods. That makes it the single strategic place where we can:\n\n1. Insert a small custom middleware (or register an OpenTelemetry \u201cEnrich\u201d delegate) that runs for every incoming HTTP request.\n2. Read Request.Headers[\"Referer\"] and, after the response is generated, Response.Headers[\"Location\"].\n3. Add those values as tags on the current Activity (the existing \u201cIncoming HTTP Request\u201d span created by ASP.NET Core instrumentation).\n\nBecause Startup.cs controls both service registration and middleware ordering, no other files are required to implement this telemetry enrichment.\nBatch 20 (CoreInstrumentationLifetimeService.cs): \u2022 CoreInstrumentationLifetimeService.cs is the central location where the application wires-up OpenTelemetry (adds TracerProviderBuilder, MeterProviderBuilder, etc.).  \n\u2022 Incoming HTTP request spans are automatically created by the ASP.NET Core instrumentation that is registered from this file; therefore, the file already has direct access to configure enrichment callbacks (e.g., `builder.AddAspNetCoreInstrumentation(options => { \u2026 })`).  \n\u2022 The requirement\u2014adding HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION as attributes on those spans\u2014can be met by adding an `Enrich` or `OnEndActivity`/`OnStartActivity` delegate inside this same builder configuration.  \n\u2022 No other files in the group deal with HTTP processing or OpenTelemetry configuration, so modifying just this strategic file keeps the change minimal and maintainable.\nBatch 21 (WorkflowActivitiesController.cs): Cannot solve gap - \u2022 The requirement is to add the headers as attributes on the existing \u201cincoming HTTP request\u201d span created for every request to the CLM web app.  \n\u2022 That span is started by ASP.NET Core middleware before any controller code runs and is finished after the response is sent.  \n\u2022 Capturing both the request header (\u201cReferer\u201d) and the response header (\u201cLocation\u201d) reliably therefore needs code that executes in the middleware pipeline (or a global action filter) \u2013 not only inside an individual controller action.  \n\u2022 The only file in this group, WorkflowActivitiesController.cs, is a single controller specific to workflow-activities. It cannot see or modify every request/response, and adding SetTag logic here would instrument only this controller\u2019s endpoints, leaving the rest of the app uncovered.  \n\u2022 There is no existing custom middleware or base controller in this file where a reusable instrumentation hook could be placed.  \n\u2022 Consequently, this file group, by itself, cannot implement the telemetry requirement in a correct, application-wide manner, so no file in the group is selected for modification.",
        "patch_reasoning": {
          "strategy": "ReasoningStrategy.CHAIN_OF_THOUGHT",
          "steps": [
            {
              "step_number": 1,
              "description": "3. Implementation is cross-framework (#if NETFRAMEWORK vs ASP.NET Core) and requires no changes elsewhere because all existing middleware / filters already call SetTagsWithCommonFields(\u2026).",
              "reasoning": "3. Implementation is cross-framework (#if NETFRAMEWORK vs ASP.NET Core) and requires no changes elsewhere because all existing middleware / filters already call SetTagsWithCommonFields(\u2026).\n\nCode patch:",
              "conclusion": "Code patch:",
              "confidence": 0.8,
              "evidence": [
                "LLM analysis"
              ]
            }
          ],
          "final_conclusion": "This single edit satisfies the requirement across the entire CLM web application because all existing middleware / filters invoke `SetTagsWithCommonFields`, ensuring every incoming HTTP request span now carries the new attributes.",
          "overall_confidence": 0.8,
          "alternative_approaches": []
        },
        "selected_files": [
          "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/Utilities/ActivityEnricher.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
          "/Users/shuaib.tabit/Documents/Atlas/internal/AtlasCustomerSupport/Global.asax.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Program.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/AtlasDataManipulationService/Startup.cs",
          "/Users/shuaib.tabit/Documents/Atlas/src/Core.ServiceFramework/CoreInstrumentationLifetimeService.cs"
        ],
        "strategy_used": "direct"
      },
      "error": null,
      "execution_time": 68.00957584381104,
      "cache_hit": false
    },
    "report_generation": {
      "stage_name": "report_generation",
      "status": "StageStatus.COMPLETED",
      "result": {
        "report_type": "comprehensive",
        "report_length": 25143
      },
      "error": null,
      "execution_time": 0.0007452964782714844,
      "cache_hit": false
    }
  }
}