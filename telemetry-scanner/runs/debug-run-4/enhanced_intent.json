{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION headers as span attributes to existing ASP.NET request spans in the CLM web app.",
    "search_keywords": [
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "Activity.SetTag",
      "AddTag",
      "middleware",
      "OpenTelemetry"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": "ASP.NET HTTP Request Span",
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"]"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 3,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "id": "codebase_discovery",
        "action": "locate_configuration",
        "description": "Search solution for OpenTelemetry / Activity configuration and existing middleware where span enrichment is done.",
        "search_keywords": [
          "AddOpenTelemetry",
          "ActivitySource",
          "SetTag",
          "Enrich",
          "UseMiddleware",
          "RequestLogging"
        ],
        "expected_files": [
          "Startup.cs / Program.cs",
          "TelemetryConfigExtensions.cs",
          "RequestLoggingMiddleware.cs",
          "any *.Middleware.cs"
        ],
        "validation_criteria": [
          "All entry points that touch Activity.Current are enumerated.",
          "Decision made on whether to extend existing middleware or add new one."
        ]
      },
      {
        "order": 2,
        "id": "design_hook",
        "action": "decide_insertion_point",
        "description": "Pick the exact place in the ASP.NET request pipeline which has access to both HttpContext.Request (for Referer) and later to HttpContext.Response (for redirect Location). Prefer a single custom middleware right after UseRouting().",
        "dependencies": [
          "codebase_discovery"
        ],
        "validation_criteria": [
          "Chosen hook runs for every request.",
          "Activity.Current is non-null in that scope."
        ]
      },
      {
        "order": 3,
        "id": "implement_middleware",
        "action": "implement_changes",
        "description": "Create or update middleware to set the two tags.\n\u2022 BEFORE next(): read `referer = context.Request.Headers[\"Referer\"].FirstOrDefault()` and call `Activity.Current?.SetTag(\"HTTP_REFERER\", referer ?? string.Empty)`.\n\u2022 AFTER pipeline returns (or with `context.Response.OnStarting`) when `context.Response.StatusCode` in [301,302,303,307,308]: read `location = context.Response.Headers[\"Location\"].FirstOrDefault()` and call `Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location ?? string.Empty)`.",
        "sample_file": "RefererRedirectEnrichmentMiddleware.cs",
        "expected_code_fragments": [
          "public async Task Invoke(HttpContext context)",
          "context.Response.OnStarting(() => { var loc = ...; Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", loc ?? string.Empty); return Task.CompletedTask; });"
        ],
        "dependencies": [
          "design_hook"
        ],
        "validation_criteria": [
          "Build passes.",
          "Null-safe calls (no exception on missing headers).",
          "No duplicate tags when header absent."
        ]
      },
      {
        "order": 4,
        "id": "register_middleware",
        "action": "update_startup",
        "description": "Add `app.UseMiddleware<RefererRedirectEnrichmentMiddleware>();` right after `UseRouting()` in Startup / Program.",
        "dependencies": [
          "implement_middleware"
        ],
        "validation_criteria": [
          "Application starts locally without errors.",
          "Middleware executes for sample requests."
        ]
      },
      {
        "order": 5,
        "id": "unit_integration_tests",
        "action": "add_tests",
        "description": "Add unit test for middleware using TestServer:\n\u2022 Verify that for request with Referer header the span contains HTTP_REFERER value.\n\u2022 Verify that a forced 302 response sets HTTP_RESPONSE_REDIRECT_LOCATION.",
        "expected_files": [
          "RefererRedirectEnrichmentMiddlewareTests.cs"
        ],
        "dependencies": [
          "implement_middleware"
        ],
        "validation_criteria": [
          "All new tests green in CI."
        ]
      },
      {
        "order": 6,
        "id": "local_validation",
        "action": "manual_test",
        "description": "Run application locally with OTLP console exporter enabled. Trigger:\n1. Normal GET without Referer.\n2. GET with Referer.\n3. Endpoint that returns 302.\nConfirm span output includes correct tags.",
        "dependencies": [
          "register_middleware"
        ],
        "validation_criteria": [
          "Console shows expected attributes and empty string when header not present."
        ]
      },
      {
        "order": 7,
        "id": "performance_check",
        "action": "benchmark",
        "description": "Run existing load-test suite comparing master vs feature branch. Acceptable overhead < 1 % latency / throughput.",
        "dependencies": [
          "local_validation"
        ],
        "validation_criteria": [
          "No significant regression detected."
        ]
      },
      {
        "order": 8,
        "id": "pull_request",
        "action": "code_review",
        "description": "Open PR with detailed description, link to ticket, screenshots of local span output, and test results.",
        "dependencies": [
          "unit_integration_tests",
          "performance_check"
        ],
        "validation_criteria": [
          "2 peer reviews approved.",
          "CI pipeline green."
        ]
      },
      {
        "order": 9,
        "id": "deploy_demo",
        "action": "deploy",
        "description": "Promote build to Demo environment using normal release pipeline.",
        "dependencies": [
          "pull_request"
        ],
        "validation_criteria": [
          "Deployment success.",
          "Health probes green."
        ]
      },
      {
        "order": 10,
        "id": "demo_verification",
        "action": "run_kusto_query",
        "description": "Execute the provided Kusto query in Demo and verify columns HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION are populated for /BrowseDocuments.aspx and SSOEndpoint.ashx flows.",
        "dependencies": [
          "deploy_demo"
        ],
        "validation_criteria": [
          "At least one span shows each attribute.",
          "No errors in logs."
        ]
      },
      {
        "order": 11,
        "id": "rollout_prod",
        "action": "deploy_production",
        "description": "Schedule phased rollout to Stage and Prod once Demo validation signed off.",
        "dependencies": [
          "demo_verification"
        ],
        "validation_criteria": [
          "Same Kusto validation in Stage and Prod."
        ]
      }
    ],
    "contextual_hints": [
      "Adding response-header tag requires code that runs after the response status & headers are finalized but while Activity is still in scope",
      "Guaranteeing the same tag names across all existing OTel exporters / processors (case sensitivity, naming conventions)",
      "Avoiding duplicate tags if another library or future framework version starts emitting the same attributes"
    ]
  }
}