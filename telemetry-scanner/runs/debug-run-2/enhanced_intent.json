{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Enhance CLM web application HTTP request spans by adding HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes for better redirect-flow debugging.",
    "search_keywords": [
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "Activity.SetTag",
      "OpenTelemetry",
      "redirect"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": "http_server",
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"]"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 3,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "id": "locate_configuration",
        "action": "Codebase Recon",
        "description": "Identify where OpenTelemetry is configured and which middleware currently wraps HTTP spans.",
        "tasks": [
          "Search for AddOpenTelemetry, AddAspNetCoreInstrumentation, ActivitySource, SetTag, and custom middleware.",
          "Document the exact file + method where the Activity for server spans is created/enriched (ex: Startup.cs, TelemetryExtensions.cs, TracingMiddleware.cs)."
        ],
        "expected_files": [
          "Startup.cs",
          "TracingExtensions.cs",
          "TracingMiddleware.cs"
        ],
        "validation_criteria": "Confirmed single interception point that touches every incoming request span."
      },
      {
        "order": 2,
        "id": "design_enrichment_strategy",
        "action": "Technical Design",
        "description": "Decide whether to (A) extend existing custom middleware or (B) add a new middleware for span enrichment.",
        "tasks": [
          "Map ASP.NET pipeline order to ensure response header is available before enrichment runs.",
          "Create UML/sequence diagram snippet showing request, middleware, response, Activity tagging."
        ],
        "dependencies": [
          "locate_configuration"
        ],
        "validation_criteria": "Team agrees in design review meeting; design wiki page updated."
      },
      {
        "order": 3,
        "id": "implement_changes",
        "action": "Code Implementation",
        "description": "Capture Referer and Location headers and tag the current Activity.",
        "tasks": [
          "Add (or modify existing) middleware with async `Invoke(HttpContext context)` method.",
          "Inside middleware, obtain `var activity = Activity.Current;` and if not null:",
          "  \u2022 Capture Referer right after context.Request is available:",
          "    - `var referer = context.Request.Headers[\"Referer\"].FirstOrDefault();`",
          "    - `if (!string.IsNullOrEmpty(referer)) activity.SetTag(\"HTTP_REFERER\", referer);`",
          "  \u2022 Await next middleware (`await _next(context);`).",
          "  \u2022 After `await`, inspect response headers and status code:",
          "    - `if (context.Response.StatusCode >= 301 && context.Response.StatusCode <= 308)`",
          "    - `var location = context.Response.Headers[\"Location\"].FirstOrDefault();`",
          "    - `if (!string.IsNullOrEmpty(location)) activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location);`",
          "Guard against null `Activity.Current` and missing headers."
        ],
        "code_owner": "@telemetry-team",
        "dependencies": [
          "design_enrichment_strategy"
        ],
        "validation_criteria": "Build succeeds; no new warnings; code follows existing patterns."
      },
      {
        "order": 4,
        "id": "unit_and_integration_tests",
        "action": "Create Tests",
        "description": "Add automated tests ensuring tags are added.",
        "tasks": [
          "Use WebApplicationFactory or existing integration-test harness.",
          "Mock requests with Referer header and assert Activity has tag.",
          "Mock 302 response with Location header and assert tag.",
          "Add negative tests for missing headers ensuring no exceptions."
        ],
        "dependencies": [
          "implement_changes"
        ],
        "validation_criteria": "All tests green in CI."
      },
      {
        "order": 5,
        "id": "local_validation",
        "action": "Manual Local Run",
        "description": "Run clm-web locally with OTLP exporter pointing to dev Jaeger/Zipkin or console.",
        "tasks": [
          "Trigger navigation that causes referer/redirect.",
          "Inspect span data, verify new attributes are present and correctly named."
        ],
        "dependencies": [
          "implement_changes"
        ],
        "validation_criteria": "Attributes visible in local trace UI."
      },
      {
        "order": 6,
        "id": "performance_check",
        "action": "Benchmark",
        "description": "Ensure no measurable latency introduced.",
        "tasks": [
          "Run existing k6/Locust perf suite before and after change.",
          "Confirm p95 latency delta < 1 ms."
        ],
        "dependencies": [
          "local_validation"
        ],
        "validation_criteria": "Performance threshold met."
      },
      {
        "order": 7,
        "id": "code_review_and_merge",
        "action": "Pull Request & Review",
        "description": "Submit PR, request reviews, address feedback, squash & merge to main.",
        "dependencies": [
          "unit_and_integration_tests",
          "performance_check"
        ],
        "validation_criteria": "PR approved by at least 2 reviewers; CI pipeline green."
      },
      {
        "order": 8,
        "id": "deploy_to_demo",
        "action": "Demo Environment Deployment",
        "description": "Promote build containing change to Demo.",
        "tasks": [
          "Monitor deployment pipeline; verify health checks.",
          "Run provided Kusto query against Demo OtlpSpanEvents table."
        ],
        "dependencies": [
          "code_review_and_merge"
        ],
        "validation_criteria": "Query returns non-null HTTP_REFERER / HTTP_RESPONSE_REDIRECT_LOCATION for target pages."
      },
      {
        "order": 9,
        "id": "production_rollout",
        "action": "Staged Rollout",
        "description": "Progressively deploy to Prod (25% \u2192 100%).",
        "tasks": [
          "Monitor dashboards for error-rate, latency, and span volume.",
          "Run Kusto query in Prod to confirm attributes."
        ],
        "dependencies": [
          "deploy_to_demo"
        ],
        "validation_criteria": "No regression; attributes visible; rollback not required."
      },
      {
        "order": 10,
        "id": "documentation_and_close",
        "action": "Post-Deployment Tasks",
        "description": "Update internal wiki and close ticket.",
        "tasks": [
          "Add examples of Kusto queries with new attributes.",
          "Document middleware location for future telemetry additions.",
          "Mark JIRA ticket as Done."
        ],
        "dependencies": [
          "production_rollout"
        ],
        "validation_criteria": "Docs updated; ticket closed."
      }
    ],
    "contextual_hints": [
      "Identifying the right interception point where both request headers and final response headers are available in the same Activity",
      "Ensuring headers are captured on all request paths, including async and error flows, without adding measurable latency"
    ]
  }
}