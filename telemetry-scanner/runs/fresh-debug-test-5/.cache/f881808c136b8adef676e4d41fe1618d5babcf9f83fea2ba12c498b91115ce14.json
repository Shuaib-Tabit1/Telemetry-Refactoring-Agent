"EnhancedIntent(issue_category='INSTRUMENTATION', static_analysis_query={'find_method_call': 'SetTag'}, semantic_description='Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to existing HTTP request spans in the CLM web application.', search_keywords=['HTTP_REFERER', 'HTTP_RESPONSE_REDIRECT_LOCATION', 'SetTag', 'ActivitySource', 'OpenTelemetry', 'middleware', 'redirect'], telemetry_operation={'type': 'span', 'target_name': 'HTTP request span', 'action': 'ADD_ATTRIBUTES', 'attributes_to_add': [{'name': 'HTTP_REFERER', 'value_source': 'Request.Headers[\"Referer\"]'}, {'name': 'HTTP_RESPONSE_REDIRECT_LOCATION', 'value_source': 'Response.Headers[\"Location\"]'}], 'new_span_name': None, 'new_metric_details': {}}, confidence=<IntentConfidence.HIGH: 'high'>, operation_type=<OperationType.MULTI_FILE: 'multi_file'>, complexity_score=4, estimated_files=3, validation_result=ValidationResult(is_valid=True, confidence=<IntentConfidence.HIGH: 'high'>, issues=[], suggestions=[]), sub_tasks=[{'order': 1, 'name': 'Codebase Reconnaissance', 'action': 'locate_configuration', 'description': 'Search for existing OpenTelemetry setup, ActivitySource definitions and any custom ASP-NET middleware that already calls SetTag. Confirm the exact file(s) where http_server spans are enriched.', 'expected_files_or_patterns': ['Startup.cs / Program.cs (AddOpenTelemetry\u2026)', 'TelemetryExtensions.cs', '*ActivityEnrichment*.cs', 'Middleware/*Telemetry*.cs'], 'tools_or_commands': ['ripgrep \"SetTag(\"', 'ripgrep \"AddOpenTelemetry\"', 'ripgrep \"ActivitySource\"'], 'validation_criteria': 'Files that configure OpenTelemetry ASP.NET Instrumentation and create/modify Activity objects are identified and documented.'}, {'order': 2, 'name': 'Design Telemetry Injection Point', 'action': 'design_change', 'description': 'Decide whether to (a) extend existing enrichment delegate or (b) introduce new middleware positioned immediately after UseRouting and before UseEndpoints. Requirement: must have access to Activity, Request headers (at start) and Response headers (after next()).', 'dependencies': [1], 'deliverables': ['Short design doc or ADR added to /docs/telemetry/redirect-attributes.md'], 'validation_criteria': 'Consensus from at least one senior engineer; ADR merged to main branch.'}, {'order': 3, 'name': 'Implement Middleware / Enrichment', 'action': 'implement_changes', 'description': 'Create or update middleware that: 1) reads Request.Headers[\"Referer\"] at start of pipeline and sets Activity tag HTTP_REFERER if value present. 2) Awaits next(context), then inspects Response.StatusCode + Response.Headers[\"Location\"]; if status is 301/302/303/307/308 and Location header exists, sets Activity tag HTTP_RESPONSE_REDIRECT_LOCATION.', 'dependencies': [2], 'expected_files_or_patterns': ['Middleware/RefererAndRedirectTaggingMiddleware.cs', 'Startup.cs (app.UseRefererAndRedirectTagging())'], 'key_code_snippet': 'activity?.SetTag(\"HTTP_REFERER\", referer ?? string.Empty); \u2026 activity?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location ?? string.Empty);', 'non_functional_requirements': ['Do not create new Activity \u2013 enrich current one: Activity.Current', 'Null / empty header safe-guard', 'Add to IServiceCollection via extension method for reuse'], 'validation_criteria': 'Dotnet build passes; new middleware registered without affecting routing order.'}, {'order': 4, 'name': 'Unit / Integration Tests', 'action': 'add_tests', 'description': 'Add tests using WebApplicationFactory to ensure middleware tags are present for: a) normal 200 request, b) redirect (302) with Location header, c) request without Referer.', 'dependencies': [3], 'expected_files_or_patterns': ['Tests/Telemetry/RefererAndRedirectTaggingTests.cs'], 'validation_criteria': 'All new tests pass in CI pipeline.'}, {'order': 5, 'name': 'Local & Sandbox Verification', 'action': 'manual_validation', 'description': 'Run clm-web locally pointing to dev OTLP collector; execute pages that trigger redirect. Confirm via Jaeger/Zipkin exporter (or Live Metrics) that new attributes appear.', 'dependencies': [3], 'validation_criteria': 'Sample spans show HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION populated correctly.'}, {'order': 6, 'name': 'Demo Environment Deployment', 'action': 'deploy_demo', 'description': 'Create release branch, deploy to Demo slot. Wait 15 minutes for data ingestion then run provided Kusto query.', 'dependencies': [5], 'validation_criteria': 'Kusto query returns rows containing the two new attributes. Spans without redirect still have HTTP_REFERER when provided, redirect spans show both attributes.'}, {'order': 7, 'name': 'Performance & Security Review', 'action': 'non_functional_review', 'description': \"Use Application Insights 'Dependency duration' charts to ensure <1 % overhead. Verify no secret/PII is exposed via Referer header (internal URLs only).\", 'dependencies': [6], 'validation_criteria': 'No measurable latency increase; security review checklist signed off.'}, {'order': 8, 'name': 'Rollout to All Environments', 'action': 'global_deploy', 'description': 'Promote build to QA, ProdEast, ProdWest sequentially with 30 % traffic canary. Monitor errors and Kusto metrics.', 'dependencies': [7], 'validation_criteria': 'Zero rollback triggered; attributes visible across environments.'}, {'order': 9, 'name': 'Post-Deployment Cleanup & Documentation', 'action': 'update_docs', 'description': 'Update runbooks and Confluence page describing debug procedures using new attributes. Close the Jira ticket.', 'dependencies': [8], 'validation_criteria': 'Docs updated; ticket moved to Done.'}], contextual_hints=['Identifying/creating a single middleware location that has access to BOTH request headers (early) and response headers (late)', 'Ensuring attributes are added to the correct (server) span that existing OpenTelemetry instrumentation creates, without duplicating spans', 'Properly handling absent or empty headers without throwing exceptions or polluting span data'], similar_patterns=['http_server_span', 'middleware_instrumentation', 'add_span_attributes'])"