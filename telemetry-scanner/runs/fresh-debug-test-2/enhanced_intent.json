{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to existing HTTP request spans in the CLM web application.",
    "search_keywords": [
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "SetTag",
      "ActivitySource",
      "OpenTelemetry"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": "http-server-request-span",
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"]"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 3,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "action": "code_discovery",
        "description": "Locate all OpenTelemetry / ActivitySource configuration and any existing request or response enrichment code.",
        "tasks": [
          "Search repo for keywords: \"AddAspNetCoreInstrumentation\", \"ActivitySource\", \"SetTag\", \"AddTag\", \"IHttpContextAccessor\".",
          "Identify middleware execution order in Startup.cs / Program.cs (or equivalent).",
          "List files that currently set tags on the HTTP-server span."
        ],
        "expected_files": [
          "Startup.cs / Program.cs",
          "Telemetry/TelemetryExtensions.cs",
          "Middleware/*Telemetry*.cs",
          "Any custom ActivityEnricher classes"
        ],
        "validation_criteria": "All files that touch OpenTelemetry pipeline are documented."
      },
      {
        "order": 2,
        "action": "design_update",
        "description": "Decide where the two new tags should be set with minimal duplication and correct lifetime.",
        "tasks": [
          "If an existing ActivityEnrichment delegate is registered with AddAspNetCoreInstrumentation(options => options.Enrich = \u2026), extend that delegate.",
          "If no global enricher exists, create one and register it.",
          "For the redirect header capture, decide whether to: (a) extend existing ResponseLoggingMiddleware or (b) add a lightweight middleware that executes AFTER MVC but BEFORE the Activity is stopped."
        ],
        "dependencies": [
          1
        ],
        "validation_criteria": "Technical approach documented in PR description."
      },
      {
        "order": 3,
        "action": "implement_referer_tag",
        "description": "Set HTTP_REFERER tag on the current Activity for every request.",
        "code_snippet": "var referer = context.Request.Headers[\"Referer\"].FirstOrDefault();\nif (!string.IsNullOrEmpty(referer)) activity.SetTag(\"HTTP_REFERER\", referer);",
        "edge_cases": [
          "Header missing \u2192 do not set tag or set empty string (decide: CURRENT PATTERN = omit if missing).",
          "Multiple Referer headers \u2192 take FirstOrDefault."
        ],
        "dependencies": [
          2
        ],
        "validation_criteria": "Unit test verifies tag present when header supplied and absent when not."
      },
      {
        "order": 4,
        "action": "implement_redirect_location_tag",
        "description": "Capture Response.Headers[\"Location\"] when status code indicates redirect and set HTTP_RESPONSE_REDIRECT_LOCATION tag.",
        "tasks": [
          "Add / extend middleware using 'await _next(context);' pattern.",
          "After next() returns, inspect 'context.Response.StatusCode'. If 301/302/303/307/308 AND Response.Headers.ContainsKey(\"Location\"), set tag.",
          "Important: Use Activity.Current right after response because span has not yet been stopped (AspNetCoreInstrumentation stops it after next middleware)."
        ],
        "code_snippet": "var status = context.Response.StatusCode;\nif ((status == 301 || status == 302 || status == 303 || status == 307 || status == 308)\n    && context.Response.Headers.TryGetValue(\"Location\", out var loc))\n{\n    if (!string.IsNullOrEmpty(loc)) Activity.Current?.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", loc.ToString());\n}",
        "dependencies": [
          2
        ],
        "validation_criteria": "Unit test simulating 302 verifies tag value."
      },
      {
        "order": 5,
        "action": "unit_and_component_tests",
        "description": "Add / update tests for new middleware and enrichers.",
        "tasks": [
          "Create TestServer (Microsoft.AspNetCore.TestHost) integration tests.",
          "Assert Activity.Current has expected tags via ActivityListener or InMemoryExporter.",
          "Run dotnet test in CI."
        ],
        "dependencies": [
          3,
          4
        ],
        "validation_criteria": "All tests pass; coverage >= 80% for new code paths."
      },
      {
        "order": 6,
        "action": "local_manual_validation",
        "description": "Run clm-web locally with console or OTLP exporter; hit relevant pages; confirm tags appear.",
        "tasks": [
          "Launch site, navigate to /clm/Documents/BrowseDocuments.aspx from another page to generate Referer.",
          "Trigger an endpoint returning 302 and observe Location tag.",
          "Inspect console output or Jaeger to ensure values set."
        ],
        "dependencies": [
          5
        ],
        "validation_criteria": "Tags present with correct values in local traces."
      },
      {
        "order": 7,
        "action": "peer_review_and_pr",
        "description": "Open Pull Request, request review from Telemetry and CLM owners.",
        "tasks": [
          "Include design note, screenshots of local traces, updated Kusto query in description.",
          "Ensure Sonar / static analysis passes.",
          "Tag #telemetry for expedited review."
        ],
        "dependencies": [
          6
        ],
        "validation_criteria": "At least 2 approvals; no blocking comments."
      },
      {
        "order": 8,
        "action": "deploy_to_demo_env",
        "description": "Promote build to Demo environment (first environment in release pipeline).",
        "tasks": [
          "Run smoke test suite.",
          "Execute Kusto query provided in ticket; verify new columns populated.",
          "Track CPU / latency dashboards for 1 hour to rule out performance regressions."
        ],
        "dependencies": [
          7
        ],
        "validation_criteria": "Query returns non-null values; no perf regression >1%."
      },
      {
        "order": 9,
        "action": "rollout_to_all_envs",
        "description": "Progressive rollout (Demo \u2192 QA \u2192 Prod) with 1-day soak in each.",
        "tasks": [
          "Repeat Kusto validation in every environment.",
          "Announce completion on #clm-observability Slack channel."
        ],
        "dependencies": [
          8
        ],
        "validation_criteria": "Tags visible in OtlpSpanEvents across all envs."
      },
      {
        "order": 10,
        "action": "post_deployment_monitoring",
        "description": "Monitor error budgets and dashboards for 7 days; ensure no spike in span size or exporter failures.",
        "dependencies": [
          9
        ],
        "validation_criteria": "No abnormal telemetry volume or exporter errors."
      }
    ],
    "contextual_hints": [
      "Capturing the redirect-location header after the response has been generated (may require custom middleware or response-wrapping)",
      "Guaranteeing that instrumentation runs for every HTTP path and doesn\u2019t conflict with any existing OpenTelemetry auto-instrumentation already wiring up ActivitySource"
    ]
  }
}