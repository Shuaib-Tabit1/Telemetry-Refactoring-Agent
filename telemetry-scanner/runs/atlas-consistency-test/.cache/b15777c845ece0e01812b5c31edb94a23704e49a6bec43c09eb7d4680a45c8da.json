{
  "diff": "Telemetry spans for incoming HTTP-server requests already exist, but they do **not** include the\ntwo attributes requested by the monitoring team:\n\n\u2022 `HTTP_REFERER` \u2013 the value of the request header `Referer`  \n\u2022 `HTTP_RESPONSE_REDIRECT_LOCATION` \u2013 the value of the response header `Location`\n\nThe patch introduces a small reusable helper (`HttpSpanAttributeExtensions`) and wires it into the\ntwo ASP-NET-Core middlewares that create / decorate the server span:\n`LogAsyncRequestHttpMiddleware` (generic) and `ScmLogAsyncRequestHttpMiddleware`\n(SCM-specific).\n\nThe helper is called **before** the request is executed (to capture the referer) and **after**\n`await next()` returns (to capture the final redirect location).  \nIt is completely no-op when the current Activity is `null` or when the corresponding header\nis missing, and therefore is safe to add.\n\nNo DI change is required because the helper is a static extension method.",
  "explanation": "*** Begin Patch\n*** Add File: Web/Common/AspNetCore/Extensions/HttpSpanAttributeExtensions.cs\n+#nullable enable\n+using System.Diagnostics;\n+using Microsoft.AspNetCore.Http;\n+\n+namespace ADEXS.Web.Common.AspNetCore.Extensions;\n+\n+/// <summary>\n+/// Helper methods used by HTTP middlewares to add extra attributes to the\n+/// automatically created OpenTelemetry HTTP server span.\n+/// </summary>\n+internal static class HttpSpanAttributeExtensions\n+{\n+    private const string HttpRefererAttributeName = \"HTTP_REFERER\";\n+    private const string HttpRedirectLocationAttributeName = \"HTTP_RESPONSE_REDIRECT_LOCATION\";\n+\n+    /// <summary>\n+    /// Adds the HTTP_REFERER attribute \u2013 if present \u2013 to the current Activity.\n+    /// Has no side-effects when Activity.Current is null or the header is not present.\n+    /// </summary>\n+    internal static void AddHttpRefererTag(this HttpRequest request)\n+    {\n+        var activity = Activity.Current;\n+        if (activity == null)\n+            return;\n+\n+        if (request.Headers.TryGetValue(\"Referer\", out var header) && !string.IsNullOrEmpty(header))\n+        {\n+            activity.SetTag(HttpRefererAttributeName, header.ToString());\n+        }\n+    }\n+\n+    /// <summary>\n+    /// Adds the HTTP_RESPONSE_REDIRECT_LOCATION attribute \u2013 if present \u2013 to the current Activity.\n+    /// Should be called *after* the response pipeline has completed so that the header is final.\n+    /// </summary>\n+    internal static void AddRedirectLocationTag(this HttpResponse response)\n+    {\n+        var activity = Activity.Current;\n+        if (activity == null)\n+            return;\n+\n+        if (response.Headers.TryGetValue(\"Location\", out var header) && !string.IsNullOrEmpty(header))\n+        {\n+            activity.SetTag(HttpRedirectLocationAttributeName, header.ToString());\n+        }\n+    }\n+}\n+\n*** End Patch\n*** Update File: API/Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs\n@@\n     public async Task InvokeAsync(HttpContext context)\n     {\n-        var activity = Activity.Current;\n+        // Capture referer before the request starts processing.\n+        context.Request.AddHttpRefererTag();\n \n         await _next(context);\n+\n+        // After the pipeline has completed we can capture a possible redirect location.\n+        context.Response.AddRedirectLocationTag();\n     }\n }\n*** End Patch\n*** Update File: Web/Common/AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs\n@@\n     public async Task InvokeAsync(HttpContext context)\n     {\n-        var activity = Activity.Current;\n+        // Tag HTTP_REFERER at the very beginning.\n+        context.Request.AddHttpRefererTag();\n \n         await _next(context);\n+\n+        // Tag HTTP_RESPONSE_REDIRECT_LOCATION once the response is complete.\n+        context.Response.AddRedirectLocationTag();\n     }\n }\n*** End Patch\n*** End Patch",
  "selection_reasoning": "ReasoningChain(strategy=<ReasoningStrategy.CHAIN_OF_THOUGHT: 'chain_of_thought'>, steps=[ReasoningStep(step_number=1, description='1. Analysis', reasoning='1. Analysis  \\n   \u2022 Requirement: For every HTTP-server span that is already being created, attach two additional attributes:  \\n     \u2013 HTTP_REFERER  \u2190  Request.Headers[\"Referer\"]  ', conclusion='     \u2013 HTTP_REFERER  \u2190  Request.Headers[\"Referer\"]  ', confidence=0.8, evidence=['LLM analysis']), ReasoningStep(step_number=2, description='2. Planning', reasoning='2. Planning  \\n   Best approach:  \\n   a. Add two extension helpers in ActivityExtensions.cs:  ', conclusion='   a. Add two extension helpers in ActivityExtensions.cs:  ', confidence=0.8, evidence=['LLM analysis']), ReasoningStep(step_number=3, description='3. Implementation \u2013 files that need to be opened/edited', reasoning='3. Implementation \u2013 files that need to be opened/edited  \\n   1. /Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Extensions/Telemetry/ActivityExtensions.cs  \\n      \u2013 add the two new extension methods (or expand an existing \u201cAddCommonHttpTags\u201d method if present).  ', conclusion='      \u2013 add the two new extension methods (or expand an existing \u201cAddCommonHttpTags\u201d method if present).  ', confidence=0.8, evidence=['LLM analysis']), ReasoningStep(step_number=4, description='4. Validation', reasoning='4. Validation  \\n   \u2022 Run unit / integration tests that hit endpoints returning redirects and carrying Referer.  \\n   \u2022 Use Application Insights / OpenTelemetry collector to verify that new spans now contain the two attributes.  ', conclusion='   \u2022 Use Application Insights / OpenTelemetry collector to verify that new spans now contain the two attributes.  ', confidence=0.8, evidence=['LLM analysis'])], final_conclusion='\u2013 inside the finally / OnCompleted block (or after await _next), when the response is ready:', overall_confidence=0.8, alternative_approaches=['Best approach:', '\u2013 add the two new extension methods (or expand an existing \u201cAddCommonHttpTags\u201d method if present).', 'Alternative approaches considered'])",
  "patch_reasoning": "ReasoningChain(strategy=<ReasoningStrategy.CHAIN_OF_THOUGHT: 'chain_of_thought'>, steps=[ReasoningStep(step_number=1, description='Analysis', reasoning='Below is the complete patch that fulfils the INSTRUMENTATION intent:  \\nHTTP server request spans are now auto-enriched with the following extra attributes for **every** incoming request \u2013 irrespective of whether the app is running on .NET Framework or .NET / ASP.NET Core.\\n\\n\u2022 `http.referer`  (`OtelSemanticConventions.AttributeHttpReferer`)  \\n\u2022 `http.response.redirect_url` (`OtelSemanticConventions.AttributeHttpResponseRedirectUrl`)\\n\\n\\n### 1.  NET Framework (already covered \u2013 NO CHANGE)\\n\\n`ScmHttpApplication.cs` already adds the two attributes through `AddAspNetInstrumentation()`.  \\nNothing further required.\\n\\n\\n### 2.  NET / ASP.NET Core \u2011 new enrichment logic  \\nFiles touched:\\n```\\nProfileMiddleware.cs\\nScmLogAsyncRequestHttpMiddleware.cs\\n```\\n\\n#### 2.1  ProfileMiddleware.cs  \u2013 post-pipeline enrichment\\n```diff\\n@@\\n     private static void OnPostRequestHandlerExecute(HttpContext context)\\n     {\\n         Activity.Current?.SetTagsWithCommonFields(context);\\n+        // ---------------------------------------------------------------\\n+        // TELEMETRY ENRICHMENT : HTTP_REFERER + HTTP_RESPONSE_REDIRECT\\n+        // ---------------------------------------------------------------\\n+        var activity = Activity.Current;\\n+        if (activity is not null)\\n+        {\\n+            // Add HTTP_REFERER if available and not yet set.\\n+            if (!activity.IsTagPresent(OtelSemanticConventions.AttributeHttpReferer))\\n+            {\\n+                var referer = context?.Request?.Headers[\"Referer\"].ToString();\\n+                if (!string.IsNullOrEmpty(referer))\\n+                {\\n+                    activity.SetTag(OtelSemanticConventions.AttributeHttpReferer, referer);\\n+                }\\n+            }\\n+\\n+            // Add HTTP_RESPONSE_REDIRECT_LOCATION if there is a redirect.\\n+            if (!activity.IsTagPresent(OtelSemanticConventions.AttributeHttpResponseRedirectUrl))\\n+            {\\n+                var redirectLocation = context?.Response?.Headers[\"Location\"].ToString();\\n+                if (!string.IsNullOrEmpty(redirectLocation))\\n+                {\\n+                    activity.SetTag(OtelSemanticConventions.AttributeHttpResponseRedirectUrl, redirectLocation);\\n+                }\\n+            }\\n+        }\\n \\n         if (HasSession(context))\\n         {\\n             LogSessionSize(context.Session);\\n         }\\n```\\n\\n#### 2.2  ScmLogAsyncRequestHttpMiddleware.cs  \u2013 after `await _next`\\n```diff\\n@@\\n             await base.Invoke(context);\\n-            activity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n+            // -------------------------------------------------------------------\\n+            // Mark span status and add HTTP referer / redirect tags if applicable\\n+            // -------------------------------------------------------------------\\n+            activity?.SetStatus(context?.Response.StatusCode < 400 ? ActivityStatusCode.Ok : ActivityStatusCode.Error);\\n+\\n+            if (activity is not null)\\n+            {\\n+                // Referer\\n+                if (!activity.IsTagPresent(OtelSemanticConventions.AttributeHttpReferer))\\n+                {\\n+                    var referer = context?.Request?.Headers[\"Referer\"].ToString();\\n+                    if (!string.IsNullOrEmpty(referer))\\n+                    {\\n+                        activity.SetTag(OtelSemanticConventions.AttributeHttpReferer, referer);\\n+                    }\\n+                }\\n+\\n+                // Redirect location\\n+                if (!activity.IsTagPresent(OtelSemanticConventions.AttributeHttpResponseRedirectUrl))\\n+                {\\n+                    var redirectLocation = context?.Response?.Headers[\"Location\"].ToString();\\n+                    if (!string.IsNullOrEmpty(redirectLocation))\\n+                    {\\n+                        activity.SetTag(OtelSemanticConventions.AttributeHttpResponseRedirectUrl, redirectLocation);\\n+                    }\\n+                }\\n+            }\\n```\\n\\n### 3.  Helper Extension (added next to ActivityExtensions.cs)\\n\\n```csharp\\n#nullable enable\\nusing System.Diagnostics;\\n\\nnamespace ADEXS.DetectTypeService.Extensions.Telemetry;\\n\\n/// <summary>\\n/// Simple helper that tells us whether a tag already exists on an activity.\\n/// OpenTelemetry does not currently provide a direct API for this.\\n/// </summary>\\ninternal static class ActivityTagExtensions\\n{\\n    public static bool IsTagPresent(this Activity activity, string key)\\n    {\\n        foreach (var tag in activity.Tags)\\n        {\\n            if (tag.Key == key) return true;\\n        }\\n        return false;\\n    }\\n}\\n#nullable restore\\n```\\n\\n### 4.  Using-Directives Added\\nBoth middleware files now include  \\n```csharp\\nusing DocuSign.Msf.AspNet.OpenTelemetry.SemanticConventions;\\n```\\n\\n### \u2714  Result\\n\u2022 All HTTP server-side spans (Framework & Core) now carry the required attributes.  \\n\u2022 Strategy is fully automatic \u2013 tags are added once per request with no manual span creation required.', conclusion='Reasoning completed', confidence=0.7, evidence=['LLM response'])], final_conclusion='### \u2714  Result', overall_confidence=0.7, alternative_approaches=[])",
  "selected_files": [
    "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.Trace.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfoProcessor.Trace.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/DetectTypeProcessor.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/ScmHttpApplication.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/MessageWorkerService/DispatchedWorker.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Engine/WorkflowInstance.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.Trace.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/WINS/Service/V1/WinsService.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Profile/ProfileModule.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Helpers/BaseApiHandler.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common/Session/RedisSessionStateProviderWrapper.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorWindows.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/MimeLookup/MimeDetectorCrossPlatform.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/VideoInfo/VideoInfo.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/DetectTypeService/Extensions/Telemetry/ActivityExtensions.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/API.GateKeeper/Middlewares/LogAsyncRequestHttpMiddleware.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/WebNet/Middlewares/LogAsyncRequestHttpMiddleware.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web/SSO/SSOEndpoint.ashx.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web/DocExplorer/Controllers/PanelControllers/AttributesController.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/WebContent/Ajax/UploadFiles.ashx.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/API.Allocation/Middlewares/LogAsyncRequestHttpMiddleware.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/Helpers/HttpRequestAuditHelper.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Filters/MvcAuditedRequestAttribute.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.CommonUI/MVC/Controls/FormExtensions.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ProfileMiddleware.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Web.Common.AspNetCore/Web.Common.AspNetCore/Middlewares/ScmLogAsyncRequestHttpMiddleware.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowScopeEvents/WorkflowScopeEventsController.Trace.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowActivities/WorkflowActivitiesController.Trace.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/API.WorkflowActivities/Infrastructure/Telemetry/WorkflowDefinition/WorkflowDefinitionController.Trace.cs",
    "/Users/shuaib.tabit/Documents/Atlas/src/Core.Domain/DocumentCreation/OpenXmlExtensions.cs"
  ]
}