{
  "basic_intent": {
    "issue_category": "INSTRUMENTATION",
    "static_analysis_query": {
      "find_method_call": "SetTag"
    },
    "semantic_description": "Add HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION attributes to CLM web application OpenTelemetry request spans.",
    "search_keywords": [
      "HTTP_REFERER",
      "HTTP_RESPONSE_REDIRECT_LOCATION",
      "SetTag",
      "Activity.SetTag",
      "OpenTelemetry",
      "CLM"
    ],
    "telemetry_operation": {
      "type": "span",
      "target_name": "http-request-span",
      "action": "ADD_ATTRIBUTES",
      "attributes_to_add": [
        {
          "name": "HTTP_REFERER",
          "value_source": "Request.Headers[\"Referer\"]"
        },
        {
          "name": "HTTP_RESPONSE_REDIRECT_LOCATION",
          "value_source": "Response.Headers[\"Location\"]"
        }
      ],
      "new_span_name": null,
      "new_metric_details": {}
    }
  },
  "enhanced_analysis": {
    "confidence": "high",
    "operation_type": "multi_file",
    "complexity_score": 4,
    "estimated_files": 3,
    "validation_issues": [],
    "suggestions": [],
    "sub_tasks": [
      {
        "order": 1,
        "name": "Code-base discovery & impact analysis",
        "action": "locate_configuration",
        "description": "Search the CLM solution for OpenTelemetry registration and existing Activity/SetTag calls. Confirm whether a custom middleware already enriches spans.",
        "tasks": [
          "grep / ripgrep for \"AddOpenTelemetry\", \"ActivitySource\", \"SetTag\", \"UseOpenTelemetry*\", \"AddAspNetCoreInstrumentation\"",
          "Identify the shared ASP.NET middleware pipeline file(s) (Startup.cs, Program.cs, OTelExtensions.cs, *TelemetryMiddleware.cs)",
          "Document the exact span name used for inbound HTTP requests \u2013 usually produced by ASP.NET automatic instrumentation (e.g. \"HTTP GET /path\")."
        ],
        "expected_files": [
          "src/CLM.Web/Startup.cs",
          "src/CLM.Web/Telemetry/OpenTelemetryExtensions.cs",
          "src/Shared/Telemetry/RequestEnrichmentMiddleware.cs"
        ],
        "validation_criteria": "All files & lines containing OpenTelemetry span enrichment located and listed in Confluence discovery page."
      },
      {
        "order": 2,
        "name": "Design enrichment hook",
        "action": "design_solution",
        "dependencies": [
          1
        ],
        "description": "Decide where to inject the header enrichment. Preferred: a single custom middleware that has access to both HttpContext.Request and HttpContext.Response after next() executes.",
        "tasks": [
          "If RequestEnrichmentMiddleware already exists, extend it; else create new middleware `RedirectHeaderEnrichmentMiddleware`.",
          "Confirm middleware runs after auto-instrumentation so we add tags to the *existing* Activity.Current without opening new spans."
        ],
        "validation_criteria": "Architecture diagram updated; pull-request template includes chosen approach."
      },
      {
        "order": 3,
        "name": "Implement middleware changes",
        "action": "implement_changes",
        "dependencies": [
          2
        ],
        "description": "Capture headers and add them as span attributes.",
        "code_snippet": [
          "public async Task InvokeAsync(HttpContext context) {",
          "    var activity = Activity.Current;",
          "    if (activity != null) {",
          "        var referer = context.Request.Headers[\"Referer\"].FirstOrDefault();",
          "        if (!string.IsNullOrEmpty(referer))",
          "            activity.SetTag(\"HTTP_REFERER\", referer);",
          "    }",
          "    await _next(context);",
          "    if (activity != null) {",
          "        if (context.Response.StatusCode >= 301 && context.Response.StatusCode <= 308) {",
          "            var location = context.Response.Headers[\"Location\"].FirstOrDefault();",
          "            if (!string.IsNullOrEmpty(location))",
          "                activity.SetTag(\"HTTP_RESPONSE_REDIRECT_LOCATION\", location);",
          "        }",
          "    }",
          "}"
        ],
        "validation_criteria": "Unit tests compile; style & null handling conform to guidelines."
      },
      {
        "order": 4,
        "name": "Register middleware",
        "action": "update_pipeline",
        "dependencies": [
          3
        ],
        "description": "Add `app.UseMiddleware<RedirectHeaderEnrichmentMiddleware>()` right after `app.UseRouting()` and before `app.UseEndpoints()` in Startup.cs.",
        "validation_criteria": "Local run shows middleware added once and headers appear in span preview."
      },
      {
        "order": 5,
        "name": "Unit & integration tests",
        "action": "add_tests",
        "dependencies": [
          3
        ],
        "description": "Create tests with TestServer or WebApplicationFactory.",
        "tasks": [
          "Happy path: GET /test with Referer set \u2192 Assert span contains HTTP_REFERER.",
          "Redirect path: endpoint that returns 302 and Location \u2192 Assert both tags present.",
          "Edge case: no headers \u2192 Ensure tags not set and no exceptions."
        ],
        "validation_criteria": "All tests pass in CI pipeline (>= 90% code coverage for middleware)."
      },
      {
        "order": 6,
        "name": "Performance check",
        "action": "benchmark",
        "dependencies": [
          5
        ],
        "description": "Run k6 or built-in BenchmarkDotNet comparing baseline vs branch for 1k rps for 2 min.",
        "validation_criteria": "P99 latency delta < 1 ms; Memory alloc delta < 0.5 %."
      },
      {
        "order": 7,
        "name": "Deploy to Demo",
        "action": "deploy_demo",
        "dependencies": [
          6
        ],
        "description": "Merge to develop, trigger Demo environment pipeline.",
        "validation_criteria": [
          "Kusto query in ticket description returns non-empty HTTP_REFERER and HTTP_RESPONSE_REDIRECT_LOCATION columns within 5 minutes.",
          "No spike in 5xx or latency on Application Insights dashboard."
        ]
      },
      {
        "order": 8,
        "name": "Rollout to all environments",
        "action": "deploy_prod",
        "dependencies": [
          7
        ],
        "description": "Staged rollout \u2013 QA -> Staging -> Production with 30-minute observation window each.",
        "validation_criteria": "Same Kusto queries show attributes in all environments; no rollback triggered."
      },
      {
        "order": 9,
        "name": "Documentation & Observability dash update",
        "action": "update_docs",
        "dependencies": [
          8
        ],
        "description": "1) Update CLM observability wiki with new attributes. 2) Add the two fields to Grafana/PowerBI redirect troubleshooting dashboard.",
        "validation_criteria": "Docs merged; dashboards show new filters."
      },
      {
        "order": 10,
        "name": "Post-deployment review",
        "action": "retrospective",
        "dependencies": [
          8
        ],
        "description": "Collect feedback after one week; check incidents related to redirects tracing.",
        "validation_criteria": "No open issues; mark Jira ticket \u2018Done\u2019."
      }
    ],
    "contextual_hints": [
      "Hooking into the ASP.NET pipeline at a point where both the incoming headers and the final response headers are available",
      "Ensuring the custom SetTag logic co-exists with existing OpenTelemetry auto-instrumentation without creating duplicate or nested spans"
    ]
  }
}